{"title":"Qt面试题集合","type":"page","uid":"189be2596c81d742ff39ecab2661715b","text":" Qt 中常用的五大模块是哪些？ Qt 中常用的五大模块包括： QtCore：提供了 Qt 的核心功能，例如基本的非 GUI 类、线程和事件处理等。 QtGui：提供用户界面（UI）类，例如窗口部件、按钮、标签等。此外，它还包含 QPainter 和 QPalette 等绘图和调...","date":"2021-06-13T08:23:29.000Z","updated":"2023-06-20T09:31:23.471Z","comments":true,"path":"api/pages/images/posts/Qt/进阶教程/Qt面试题集合.json","covers":null,"excerpt":"","content":"<ol>\n<li>Qt 中常用的五大模块是哪些？</li>\n</ol>\n<p>Qt 中常用的五大模块包括：</p>\n<ul>\n<li><p>QtCore：提供了 Qt 的核心功能，例如基本的非 GUI 类、线程和事件处理等。</p>\n</li>\n<li><p>QtGui：提供用户界面（UI）类，例如窗口部件、按钮、标签等。此外，它还包含 QPainter 和 QPalette 等绘图和调色板类。</p>\n</li>\n<li><p>QtWidgets：是 QtGui 模块的子集，提供了一套完整的可视化 UI 控件库，例如按钮、文本编辑器、表格等，用于构建跨平台的桌面应用程序。</p>\n</li>\n<li><p>QtNetwork：提供网络编程类，用于创建 TCP 和 UDP 客户端和服务器，以及处理套接字和 HTTP 请求。</p>\n</li>\n<li><p>QtSql：提供简单易用的数据库访问 API，用于在 Qt 中连接、查询和操作数据源中的数据。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>什么是信号和机制？如何使用信号和实现对象间通信？</li>\n</ol>\n<p>信号和槽是 Qt 框架中用于对象间通信的机制。信号是一种特殊类型的函数，用于发出通知对象已经发生了某个事件。而是接收信号的函数，当一个信号触发时，与之相连接的将被自动调用。这样可以实现对象间的解耦和灵活的事件处理流程。</p>\n<p>使用信号和机制可以在一个对象内部或之间实现异步编程，也可以帮助开发者解耦不同组件、模块的代码，提高系统的可维护性和扩展性。</p>\n<ol start=\"3\">\n<li>如何创建自定义信号？</li>\n</ol>\n<p>您可以使用关键字 signals 在 QObject 类中声明自定义信号。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySignal</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们在类中声明了自定义 signal“mySignal”。您可以选择不写任何参数，这意味着它是一个简单的通知信号。</p>\n<p>要触发信号，请使用类似 emit mySignal() 的语法。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::someFunction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">    <span class=\"function\">emit <span class=\"title\">mySignal</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在 Qt 中，为何不建议作 UI 控件并修改其属性值？</li>\n</ol>\n<p>在 Qt 中，建议将 UI 控件（例如按钮、标签等）视为视图层控制器（View-Controller），而将业务逻辑部分分离出来，确保应用程序的低耦合性。因此，在 UI 控件中处理业务逻辑和直接更改属性值可能会导致难以维护代码、多余的重复代码以及不便于文件结构优化等一系列问题。</p>\n<p>相反，通过将业务逻辑分离出来，您可以更好地管理和测试代码，并保持代码的清晰度。通过连接信号和槽来实现对界面控件的修改。</p>\n<ol start=\"5\">\n<li>QPainter 是什么？它用于哪些场景？</li>\n</ol>\n<p>QPainter 是 Qt 的绘图引擎，用于绘制各种图形元素和渲染文本。 它提供了很多常用的函数，例如画矩形、画圆等可以绘制基本图形。它还包含设置画笔宽度、颜色和样式、字体，渐变、图案、透明度的功能等，使用户可以使用相对简单的步骤呈现出复杂的效果。 </p>\n<p>QPainter 在 GUI 应用程序中特别有用。 通过使用 QPainter，您可以在窗口或其他部件上实现自定义的渲染，并创建自己的图标、图表和数据可视化工具，增强应用程序的用户体验。</p>\n<ol start=\"6\">\n<li>Qt 中有哪些类型的定时器？它们之间有何区别？</li>\n</ol>\n<p>Qt 中有以下两种类型的定时器：</p>\n<ul>\n<li><p>QTimer：是一个通用的、基于事件的定时器，用于在指定时间间隔后触发 timeOut() 信号。</p>\n</li>\n<li><p>QBasicTimer：是用于更高级别的定时操作的辅助类。它允许对象创建一个内部计时器，并使用 timerEvent() 函数处理超时事件。</p>\n</li>\n</ul>\n<p>两者均支持逐个次数触发或重复触发方法，但 QBasicTimer 可自行管理其内部定时器，这使得它更适合于需要细粒度的定时器操作。</p>\n<ol start=\"7\">\n<li>QThread 和 QtConcurrent 之间有何区别？您在项目中使用哪种方式来处理多线程？</li>\n</ol>\n<p>QThread 是 Qt 中的一个基础类，用于在应用程序中建立新的线程。使用 QThread，可以创建一个新线程并将特定任务放在该线程中执行，从而使主线程不会被阻塞。但是，需要注意的是，直接使用 QThread 时有时候存在一些难以解决的问题，例如内存泄漏和跨线程处理信号时可能会遇到问题等。</p>\n<p>QtConcurrent 则是一个高级别 API，提供了许多方便加载和管理线程的函数。通过使用 QtConcurrent，您可以轻松地编写并行代码，并使用 map-reduce 模式执行算法。它更易于使用和管理，但灵活性较低。</p>\n<p>关于在项目中使用哪种方式来处理多线程，这取决于具体情况。如果需要更细粒度的控制，例如需要在程序级别控制线程、给线程分配优先级和分离下属线程等操作，则应使用 QThread。如果需要的仅仅是一个简单的后台线程，执行IO密集型代码或者大量简单的计算，可以使用 QtConcurrent。</p>\n<ol start=\"8\">\n<li>Qt 提供了哪些用于格式化字符和字符串的类和函数？它们之间有何区别？</li>\n</ol>\n<p>Qt 提供了很多能够格式化字符和字符串的类和函数，其中包括：</p>\n<ul>\n<li><p>QString：它是 Qt 中最常用的字符串类，支持 Unicode 和本地化字符、支持格式化；</p>\n</li>\n<li><p>QTextStream：它可以使用 &lt;&lt; 运算符向流中添加数据，并自动进行字符串转换和缓冲处理；</p>\n</li>\n<li><p>QLocale：提供与语言环境相关的功能，例如日期和数字格式化；</p>\n</li>\n<li><p>QVariant：是一个通用的值类，可在特定格式和类型之间进行转换。</p>\n</li>\n</ul>\n<p>这些类和函数在处理不同场景时，各自拥有它们的优点。 QString 提供了一般性字符串处理功能； QTextStream 尤其擅长于处理文件I&#x2F;O操作； QLocale 显然适用于需要国际化的字符串操作等等。选择合适的工具将会使应用程序的效率和准确性得到提高。</p>\n<ol start=\"9\">\n<li>QObject 为何禁止拷贝构造函数和拷贝赋值运符？</li>\n</ol>\n<p>QObject 实例通常被视为对象树的节点，也就是说，它们被分层组合在一起，形成了一个层次结构。这个层次结构中，每个 QObject 实例都有一个父对象（除了顶级的 QObject 对象），并且当父对象删除时，所有子对象也会自动删除。</p>\n<p>如果允许 QObject 实例的拷贝构造函数，则可能导致某些问题，例如：</p>\n<ol>\n<li><p>多个实例引用同一对象，无法确定哪个对象是“正确”的。</p>\n</li>\n<li><p>在复制一个 QObject 实例时，我们无法确定该对象在哪个树中，该对象的父指针不正确。</p>\n</li>\n<li><p>如果新创建的对象没有进行正确的注册，可能会导致该对象在销毁时出现错误和内存泄漏。</p>\n</li>\n</ol>\n<p>因此，QObject 禁止拷贝构造函数和拷贝赋值运算符，以确保程序员不会意外地触发上述问题，在开发期间更好地进行管理。</p>\n<p>如果需要复制 QObject 对象，可以使用 QObject 的 clone() 函数或者其他自定义函数实现深度克隆操作，并确保处理所有子对象的引用和指针。</p>\n<ol start=\"10\">\n<li>如何在 Qt 中处理文件和目录操作？Qt 中有哪些类和函数可用于读取和写入文件？</li>\n</ol>\n<p>在 Qt 中，你可以使用 QFile 类来读取和写入文件。对于文件目录操作，QDir 类是一个有用的课程。您可以使用 QDir 来遍历目录、过滤和排序文件、获取有关文件&#x2F;目录信息、创建和移动文件等等。</p>\n<p>以下是一些常见的 Qt 文件和目录操作函数：</p>\n<ul>\n<li><p>QFile::open() - 打开文件并返回文件句柄；</p>\n</li>\n<li><p>QFile::readAll() - 读取整个文件并返回其内容的 QByteArray；</p>\n</li>\n<li><p>QFile::write() - 写数据到打开的文件上；</p>\n</li>\n<li><p>QDir::setCurrent() - 设置所以绝对路径基录；</p>\n</li>\n<li><p>QDir::exists() - 检查目录或文件是否存在；</p>\n</li>\n<li><p>QDir::mkpath() - 递归创建新目录。</p>\n</li>\n</ul>\n<ol start=\"11\">\n<li>在 Qt 中如何进行数据库操作？Qt 中有哪些类和函数可用于连接数据库、执行查询和更新数据？</li>\n</ol>\n<p>Qt 提供了 QtSql模块，用于在 Qt 应用程序中进行数据库操作。它支持多种主流的数据库引擎，例如 SQLite、MySQL、PostgreSQL 和 Oracle。以下是一些常见的 QtSql 类和函数：</p>\n<ul>\n<li><p>QSqlDatabase：用于连接到一个特定的数据库引擎，并返回一个数据库对象；</p>\n</li>\n<li><p>QSqlQuery：用于执行 SQL 查询，并提供对结果集的访问；</p>\n</li>\n<li><p>QSqlTableModel： 提供了一个 model-view 接口，使用与数据库表的记录对应的模型数据；</p>\n</li>\n<li><p>QSqlRelationalTableModel：QSqlTableModel的子类，支持多个表之间的关联。</p>\n</li>\n</ul>\n<p>使用 QtSql 进行数据库操作的一般步骤如下：</p>\n<ol>\n<li><p>选择要使用的数据库引擎，例如 SQLite，MySQL 或 PostgreSQL。如果您不确定应该选择哪种引擎，请参阅各自的优缺点。</p>\n</li>\n<li><p>创建并打开一个数据库连接（QSqlDatabase）。</p>\n</li>\n<li><p>执行 SQL 查询或操作数据。这通常涉及使用 QSqlQuery 对象。</p>\n</li>\n<li><p>处理查询结果。</p>\n</li>\n<li><p>关闭数据库连接。</p>\n</li>\n</ol>\n<p>注意：在编写 QtSql 代码时，您需要考虑多线程问题和 SQL 注入攻击等安全问题。可以使用 prepare() 和 bindValue() 等 QSqlQuery 函数来减轻 SQL 注入攻击问题。同时也建议在单独的线程中执行数据库操作，以保持高性能和更好的线程安全性。</p>\n<ol start=\"12\">\n<li>QML 和 Qt Widgets 之间有何区别？</li>\n</ol>\n<p>QML 和 Qt Widgets 都是 Qt 支持的 UI 开发框架，但二者有很大的不同：</p>\n<ol>\n<li><p>编写语言：Qt Widgets 使用 C++ 来编写 UI 界面，而QML 基于 JavaScript、XML和基础 HTML&#x2F;CSS。</p>\n</li>\n<li><p>技术：Qt Widgets 是通过 QWidget 和 QML （通过 Qt Quick 的 QQuickItem 派生得来）将元素组合起来的。 Qt Widgets 采用的是固定坐标的方式布局，而 QML 使用基于着色器的引擎，能够支持应变性和动态排列。</p>\n</li>\n<li><p>视觉风格：Qt Widgets 提供了一套独立于平台的 widget 库，并与平台的原生视觉风格类似。QML 具有灵活的主题、模板和皮肤功能，可以创建适合自定义品牌的完全可Personalized的用户界面。</p>\n</li>\n<li><p>性能：QML 的渲染性能优于传统的 Qt Widgets，在处理复杂的 2D 和 3D 呈现任务时效果显著。</p>\n</li>\n</ol>\n<p>选择使用哪种框架依赖于您的需求和特定情况。Qt Widgets适用于对控件的位置、大小和其他属性方面更为关注，而 QML 正好相反；如果您需要自定义自己的 CSS 或 JS，或者需要实现复杂的动画&#x2F; 2D&#x2F;3D 渲染等，则建议使用 QML。</p>\n<ol start=\"13\">\n<li>在 Qt 中，如何处理用户界面元素的事件？具体来说，如何处理按钮的单击事件？</li>\n</ol>\n<p>在 Qt 中，您可以通过信号和插机制来处理 UI 元素的事件。主要步骤如下：</p>\n<ol>\n<li><p>为 UI 元素定义信号。例如，QPushButton 的 clicked() 信号表示按钮已经单击。</p>\n</li>\n<li><p>为 UI 元素连接插槽函数。插槽函数是事件发生时要调用的函数。</p>\n</li>\n<li><p>编写插槽函数以响应信号。例如，clicked() 发生时执行的插槽函数可以是一个简单的计算或者启动其他操作。</p>\n</li>\n</ol>\n<p>下面是 QPushButton 处理单击事件的示例代码：</p>\n<p>在 Header 文件中声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public slots:</span><br><span class=\"line\">    void onBtnClicked();</span><br></pre></td></tr></table></figure>\n\n<p>在实现文件中实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void MyWidget::onBtnClicked()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   // 按钮已被单击</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在构造函数中设置连接：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QObject::<span class=\"built_in\">connect</span>(ui-&gt;myButton, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">clicked</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">onBtnClicked</span>()));</span><br></pre></td></tr></table></figure>\n\n<p>这里，ui-&gt;myButton 是在 .ui 文件中定义的 QPushButton 对象，SIGNAL(clicked()) 表示当点击按钮时，clicked() 信号将被发射。如果使用新语法，则需要使用 QObject::connect() 而不是上面的旧语法。</p>\n<ol start=\"14\">\n<li>如何使用 QML 创建自定义组件？</li>\n</ol>\n<p>在 QML 中，您可以使用 Component 来创建自定义组件。Component 是一种特殊类型的对象，可以被实例化并作为 QML 的一部分进行使用。要创建 Component，可以使用一个独立的文件，或者在同一个文件中定义多个组件。</p>\n<p>以下定义组件的示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MyButton.qml</span><br><span class=\"line\">import QtQuick 2.0</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle &#123;</span><br><span class=\"line\">    id: root</span><br><span class=\"line\">    width: 100; height: 50</span><br><span class=\"line\">    color: &quot;red&quot;</span><br><span class=\"line\">    radius: 10</span><br><span class=\"line\"></span><br><span class=\"line\">    signal clicked()</span><br><span class=\"line\"></span><br><span class=\"line\">    Text &#123;</span><br><span class=\"line\">        anchors.centerIn: parent</span><br><span class=\"line\">        text: &quot;Click me!&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    MouseArea &#123;</span><br><span class=\"line\">        anchors.fill: parent</span><br><span class=\"line\">        onClicked: root.clicked()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们定义了一个名为 MyButton 的自定义组件。该组件包含一个红色的圆角矩形、文本和一个 MouseArea。MouseArea 接收单击事件，并发射一个 clicked() 信号，表示按钮已被单击。下一步，我们需要将此组件实例化并作为 QML 的一部分进行使用。</p>\n<p>您可以在主 QML 文件中添加以下代码来实例化 MyButton 组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.qml</span><br><span class=\"line\">import QtQuick 2.0</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle &#123;</span><br><span class=\"line\">    width: 360; height: 360</span><br><span class=\"line\">    color: &quot;#333&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyButton &#123;</span><br><span class=\"line\">        x: 130; y: 130</span><br><span class=\"line\">        onClicked: console.log(&quot;Button clicked!&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们在主 QML 文件中实例化了一个 MyButton 组件，并将其添加到了主界面上。MyButton被点击时，我们将控制台输出一条消息。</p>\n<ol start=\"15\">\n<li>如何在 Qt 中绘制图形？</li>\n</ol>\n<p>在 Qt 中，您可以使用 QPainter 类进行绘图，它提供了一组画图设备和元素，例如颜色、线宽和各种几何形状。以下是一个简单的示例，演示如何使用 QPainter 绘制一个正方形：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void MyWidget::paintEvent(QPaintEvent *event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QPainter painter(this);</span><br><span class=\"line\">    painter.setRenderHint(QPainter::Antialiasing);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 设置画笔和背景颜色</span><br><span class=\"line\">    painter.setPen(Qt::white);</span><br><span class=\"line\">    painter.setBrush(Qt::gray);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 绘制正方形</span><br><span class=\"line\">    QRectF rectangle(10.0, 20.0, 80.0, 60.0);</span><br><span class=\"line\">    painter.drawRect(rectangle);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要绘制其他图形，您需要设置不同的 QPainter 函数，例如 drawLine()、drawEllipse()、drawText() 等等。您还可以使用 QPainterPath 类来创建复杂的自定义图形路径。</p>\n<p>注意：Qt 在使用 QPainter 绘图时，可能会出现绘图问题和性能问题。如果您需要进行大量绘图操作或者处理复杂的图形，请考虑使用 OpenGL 或 Qt Quick 的 QML Canvas 等更高效的绘图技术。</p>\n<ol start=\"16\">\n<li>在 Qt 中，如何使用信号和插槽机制进行对象间通信？</li>\n</ol>\n<p>在 Qt 中，信和插槽是实现对象间通信的一种强大方式。每个 QObject 类型的对象都有一个 signals: 以及 slots: 部分。其中 signals: 包含了所需的信号定义，slots: 则包含了响应信号的插槽函数。</p>\n<p>以下是一个使用信号和插槽的简单示例，演示如何在两个对象之间传递数据：</p>\n<ol>\n<li>创建发送方类：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sender</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个 signal ，以 int 类型发送数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">sendNumber</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">emit <span class=\"title\">numberSent</span><span class=\"params\">(number)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"comment\">// 声明一个发送 int 类型数据的 signal</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">numberSent</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建接收方类：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个接收 int 类型数据的 slot</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">receiveNumber</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received number:&quot;</span> &lt;&lt; number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>连接信号和插槽：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建实例（或使用现有实例）</span></span><br><span class=\"line\">Sender sender;</span><br><span class=\"line\">Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 连接 Sender 的 numberSent(int) 信号到 Receiver 的 receiveNumber(int) 槽</span></span><br><span class=\"line\">QObject::<span class=\"built_in\">connect</span>(&amp;sender, &amp;Sender::numberSent, &amp;receiver,Receiver::receiveNumber);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">sender.<span class=\"built_in\">sendNumber</span>(<span class=\"number\">42</span>); <span class=\"comment\">// receiver 将会输出 &quot;Received number: 42&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里，Sender 类定义了一个发送 int 类型数据的 signal（numberSent），并向信号发射器发送该数值。Receiver 类定义了一个接收 int 类型数据的 slot（receiveNumber），并在其插槽函数中打印该数据。</p>\n<p>最后，我们将两个对象连接起来，当 Sender 类调用 sendNumber() 发送数字时，connect() 函数会将它连接到 Receiver 类的 receiveNumber() slot，从而实现了对象间的通信。</p>\n<ol start=\"17\">\n<li>在 Qt 中，如何处理网络请求？</li>\n</ol>\n<p>在 Qt 中，您可以使用 Qt Network 模块处理网络请求，并发送和接收各种协议的数据。以下是一个简单的示例，演示如何使用 Qt Network 模块发送 HTTP GET 请求：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtNetwork/QNetworkAccessManager&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtNetwork/QNetworkReply&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Network/QNetworkRequest&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 QNetworkAccessManager 实例</span></span><br><span class=\"line\">    QNetworkAccessManager manager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 实例化请求对象</span></span><br><span class=\"line\">    QNetworkRequest request;</span><br><span class=\"line\">    request.<span class=\"built_in\">setUrl</span>(<span class=\"built_in\">QUrl</span>(<span class=\"string\">&quot;http://www.example.com&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送 GET 请求</span></span><br><span class=\"line\">    QNetworkReply *reply = manager.<span class=\"built_in\">get</span>(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明处理数据完成的槽</span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(reply, &amp;QNetworkReply::finished, [&amp;]() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理返回的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reply-&gt;<span class=\"built_in\">error</span>() == QNetworkReply::NoError) &#123;</span><br><span class=\"line\">            QString data = <span class=\"built_in\">QString</span>(reply-&gt;<span class=\"built_in\">readAll</span>());</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Network error:&quot;</span> &lt;&lt; reply-&gt;<span class=\"built_in\">errorString</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放资源</span></span><br><span class=\"line\">        reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">        a.<span class=\"built_in\">quit</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在处理网络请求时，请将其放在单独的线程中，以避免阻塞主循环和可能的性能问题。可以使用 QThread 之类的 Qt 类来处理多线程请求。18. 在 Qt 中，如何使用数据库？</p>\n<p>在 Qt 中，您可以使用 QSqlDatabase 类连接和操作数据库。以下是一个简单的示例，演示如何使用 Qt 连接 SQLite 数据库：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtSql&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在默认位置创建数据库连接</span></span><br><span class=\"line\">    QSqlDatabase db = QSqlDatabase::<span class=\"built_in\">addDatabase</span>(<span class=\"string\">&quot;QSQLITE&quot;</span>);</span><br><span class=\"line\">    db.<span class=\"built_in\">setDatabaseName</span>(<span class=\"string\">&quot;myDb.db&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打开数据库后进行操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (db.<span class=\"built_in\">open</span>()) &#123;</span><br><span class=\"line\">        QSqlQuery query;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 建立表格</span></span><br><span class=\"line\">        query.<span class=\"built_in\">exec</span>(<span class=\"string\">&quot;CREATE TABLE people (id INTEGER PRIMARY KEY, name TEXT)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 插入数据</span></span><br><span class=\"line\">        query.<span class=\"built_in\">exec</span>(<span class=\"string\">&quot;INSERT INTO people VALUES(1, &#x27;Tom&#x27;)&quot;</span>);</span><br><span class=\"line\">        query.<span class=\"built_in\">exec</span>(<span class=\"string\">&quot;INSERT INTO people VALUES(2, &#x27;Jerry&#x27;)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查询</span></span><br><span class=\"line\">        query.<span class=\"built_in\">exec</span>(<span class=\"string\">&quot;SELECT id, name FROM people&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (query.<span class=\"built_in\">next</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> id = query.<span class=\"built_in\">value</span>(<span class=\"number\">0</span>).<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">            QString name = query.<span class=\"built_in\">value</span>(<span class=\"number\">1</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;ID:&quot;</span> &lt;&lt; &lt;&lt; <span class=\"string\">&quot; Name:&quot;</span> &lt;&lt; name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">        db.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Failed to open database:&quot;</span> &lt;&lt; db.<span class=\"built_in\">lastError</span>().<span class=\"built_in\">text</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：在使用 QSqlDatabase 类时，请确保安装了所需的驱动程序（例如，SQLite 需要 Qt 自带的 SQLite 驱动）。另外请注意，Database 使用大量的资源。当您不再需要它时，请记得关闭&#x2F;删除连接，以避免内存泄漏和性能问题。</p>\n<ol start=\"19\">\n<li>在 Qt 中，如何进行多语言支持？</li>\n</ol>\n<p>在 Qt 中，您可以使用 QTranslator 类实现应用程序的多语言支持。以下是一个简单的示例，演示如何将此功能添加到您的应用程序中：</p>\n<ol>\n<li>使用 Qt Linguist 创建翻译文件</li>\n</ol>\n<p>首先，您需要使用 Qt Linguist 工具创建翻译文件 (.ts)。这个文件包含了所有需要翻译的文本字符串和其对应的翻译。您可以使用 Qt Creator 编辑器的一部分来打开和编辑 .ts 文件，或者使用命令行工具 lupdate 和 linguist 来生成和编辑它们。</p>\n<ol start=\"2\">\n<li>加载翻译文件</li>\n</ol>\n<p>在应用程序代码中，您可以使用 QTranslator 类加载 .qm 翻译文件 （从 .ts 文件编译而得）。例如，下面是一个针对英文和西班牙文翻译支持的简单示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QTranslator&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载翻译文件</span></span><br><span class=\"line\">    QTranslator translator;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (translator.<span class=\"built_in\">load</span>(<span class=\"string\">&quot;myapp_es.qm&quot;</span>)) &#123;</span><br><span class=\"line\">        a.<span class=\"built_in\">installTranslator</span>(&amp;translator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行其他操作</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们加载名为 myapp_es.qm 的西班牙语翻译文件，并将它安装到应用程序中。然后，当显示文本字符串时，它们将自动翻译成相应的西班牙语文本。</p>\n<ol start=\"3\">\n<li>重新编译和部署</li>\n</ol>\n<p>最后，请记得重新编译您的应用程序，并将 .qm 文件部署到正确的位置，以便应用程序可以找到这个文件并使用它进行多语言支持。20. 在 Qt 中，如何进行文件和目录操作？</p>\n<p>在 Qt 中，您可以使用 QFile、QDir 和 QFileInfo 等类来进行文件和目录操作。以下是一些简单的示例：</p>\n<ol>\n<li>创建文件并写入数据</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QFile&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个名为 myFile.txt 的文本文件，并向其中写入数据</span></span><br><span class=\"line\">    <span class=\"function\">QFile <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">&quot;myFile.txt&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file.<span class=\"built_in\">open</span>(QIODevice::WriteOnly | QIODevice::Text)) &#123;</span><br><span class=\"line\">        <span class=\"function\">QTextStream <span class=\"title\">stream</span><span class=\"params\">(&amp;file)</span></span>;</span><br><span class=\"line\">        stream &lt;&lt; <span class=\"string\">&quot;Hello world!&quot;</span>;</span><br><span class=\"line\">        file.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们使用 QFile 类创建一个名为 myFile.txt 的文件，并向它写入 “Hello world!” 文本数据。最后，我们关闭文件以确保所有数据都被写入。</p>\n<ol start=\"2\">\n<li>读取文件数据</li>\n</ol>\n<p>#include <QCoreApplication><br>#include <QFile></p>\n<p>int main(int argc, char *argv[])<br>{<br>    QCoreApplication a(argc, argv);</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">// 打开文件，并读取其中的数据</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">QFile file(&quot;myFile.txt&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">if (file.open(QIODevice::ReadOnly | QIODevice::Text)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    QTextStream stream(&amp;file);</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    QString data = stream.readAll();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    file.close();</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    qDebug() &lt;&lt; data; // 输出文件包含的数据</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">return a.exec();</span></span></code></pre></div><p>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这里，我们打开名为 myFile.txt 的文件，并使用 QTextStream 类从中读取所有数据。然后，我们将文件中包含的数据打印到控制台上以进行验证。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 删除文件</span><br><span class=\"line\"></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">#include &lt;QCoreApplication&gt;</span><br><span class=\"line\">#include &lt;QFile&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QCoreApplication a(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 删除名为 myFile.txt 的文件</span><br><span class=\"line\">    QFile::remove(&quot;myFile.txt&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们使用 QFile 类的静态 remove() 函数删除名为 myFile.txt 的文件。您可以使用 rename() 函数来重命名文件，并使用 exists() 函数来查看文件是否存在。</p>\n<ol start=\"4\">\n<li>遍历目录</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDir&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历名为 myFolder 的目录，并列举其中所有子文件和子目录</span></span><br><span class=\"line\">    <span class=\"function\">QDir <span class=\"title\">dir</span><span class=\"params\">(<span class=\"string\">&quot;myFolder&quot;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> QFileInfo&amp; info : dir.<span class=\"built_in\">entryInfoList</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (info.<span class=\"built_in\">isDir</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Directory:&quot;</span> &lt;&lt; info.<span class=\"built_in\">fileName</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;File:&quot;</span> &lt;&lt; info.<span class=\"built_in\">fileName</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们使用 QDir 类打开名为 myFolder 的目录，并使用 entryInfoList() 函数列举目录中的文件和子目录。然后，我们检查每个条目是否是目录或文件，并打印它们的名称到控制台上以进行验证。21. 在 Qt 中，如何进行线程操作？</p>\n<p>在 Qt 中，您可以使用 QThread 类和 QRunnable 接口执行多线程任务。以下是一些简单的示例：</p>\n<ol>\n<li>使用 QThread 执行任务</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QThread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWorker</span> : <span class=\"keyword\">public</span> QObject &#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Worker thread ID:&quot;</span> &lt;&lt; QThread::<span class=\"built_in\">currentThread</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 执行其他操作</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"function\">emit <span class=\"title\">workFinished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">workFinished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新线程</span></span><br><span class=\"line\">    QThread* thread = <span class=\"keyword\">new</span> QThread;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建工作对象，并将其移动到新线程中</span></span><br><span class=\"line\">    MyWorker* worker = <span class=\"keyword\">new</span> MyWorker;</span><br><span class=\"line\">    worker-&gt;<span class=\"built_in\">moveToThread</span>(thread);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接信号和槽以启动工作线程</span></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(thread, &amp;QThread::started, worker, &amp;MyWorker::doWork);</span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(worker, &amp;MyWorker::workFinished, thread, &amp;QThread::quit);</span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(worker, &amp;MyWorker::workFinished, worker, &amp;MyWorker::deleteLater);</span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(thread, &amp;QThread::finished, thread, &amp;QThread::deleteLater);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 启动线程</span></span><br><span class=\"line\">    thread-&gt;<span class=\"built_in\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个名为 MyWorker 的工作类，该类实现了一个槽函数 doWork() 来执行工作任务。然后，我们创建了一个 QThread 实例，并将 MyWorker 移动到这个 QThread 实例的线程中。</p>\n<p>接下来，我们将 QThread::started 信号连接到 MyWorker::doWork ，以启动工作线程。当工作完成时，MyWorker 会发射 workFinished 信号，并将其连接到 QThread::quit 以停止工作线程。最后，我们在 QThread::finished 信号上将 QThread 实例和 MyWorker 实例删除。</p>\n<ol start=\"2\">\n<li>使用 QRunnable 执行任务</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QThread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QThreadPool&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyTask</span> : <span class=\"keyword\">public</span> QRunnable &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Task thread ID:&quot;</span> &lt;&lt; QThread::<span class=\"built_in\">currentThread</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 执行其他操作</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新任务并执行</span></span><br><span class=\"line\">    MyTask* task = <span class=\"keyword\">new</span> MyTask;</span><br><span class=\"line\">    QThreadPool::<span class=\"built_in\">globalInstance</span>()-&gt;<span class=\"built_in\">start</span>(task);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个名为 MyTask 的任务，该任务实现了 QRunnable 接口。然后，我们创建了 MyTask 实例，并使用 QThreadPool::globalInstance()-&gt;start() 函数将其提交到全局线程池中以异步执行。</p>\n<p>注意：如果您想控制线程池的行为，可以使用 QThreadPool 类的其他函数。例如，setMaxThreadCount() 函数可用于设置最大线程数，releaseThread() 函数可释放空闲的线程资源，等等。22. 在 Qt 中，如何进行网络编程？</p>\n<p>在 Qt 中，您可以使用 QTcpServer、QTcpSocket、QUdpSocket 和 QSslSocket 等类来进行网络编程。以下是一些简单的示例：</p>\n<ol>\n<li>TCP 服务器</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QTcpServer&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QTcpSocket&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 TCP 服务器</span></span><br><span class=\"line\">    QTcpServer server;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绑定服务器到本机地址和端口</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.<span class=\"built_in\">listen</span>(QHostAddress::LocalHost, <span class=\"number\">12345</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Listening for incoming connections on port 12345...&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接受传入连接</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (server.<span class=\"built_in\">isListening</span>()) &#123;</span><br><span class=\"line\">            QTcpSocket* client = server.<span class=\"built_in\">nextPendingConnection</span>();</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;New client connected from:&quot;</span> &lt;&lt; client-&gt;<span class=\"built_in\">peerAddress</span>() &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; client-&gt;<span class=\"built_in\">peerPort</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 向客户端发送欢迎消息</span></span><br><span class=\"line\">            client-&gt;<span class=\"built_in\">write</span>(<span class=\"string\">&quot;Welcome to my server!&quot;</span>);</span><br><span class=\"line\">            client-&gt;<span class=\"built_in\">flush</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 接收并显示来自客户端的消息</span></span><br><span class=\"line\">            QByteArray data = client-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Client message:&quot;</span> &lt;&lt; data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个 TCP 服务器，并将其绑定到本机地址（127.0.0.1）和端口 12345。然后，我们使用 nextPendingConnection() 函数阻塞等待传入连接，并显示连接客户端的地址和端口。通过 client-&gt;write() 函数向客户发送欢迎消息，并使用 readAll() 函数接收并显示来自客户端的消息。您可以使用 QTcpSocket 类实现客户端。</p>\n<ol start=\"2\">\n<li>UDP 客户端</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QUdpSocket&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 UDP 套接字</span></span><br><span class=\"line\">    QUdpSocket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向本地主机 12345 端口发送数据报</span></span><br><span class=\"line\">    QByteArray data = <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\">QHostAddress <span class=\"title\">addr</span><span class=\"params\">(<span class=\"string\">&quot;127.0.0.1&quot;</span>)</span></span>;</span><br><span class=\"line\">    quint16 port = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    socket.<span class=\"built_in\">writeDatagram</span>(data, addr, port);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了一个 QUdpSocket 实例，并使用 writeDatagram() 函数向本地主机（127.0.0.1）和端口 12345 发送 Hello, world! 数据报。您可以在另一个应用程序中使用 QUdpSocket 类以接收这个数据包或通过其他方式与它进行通信。</p>\n<ol start=\"3\">\n<li>SSL 客户端</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSslSocket&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 SSL 连接套接字</span></span><br><span class=\"line\">    QSslSocket socket;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 连接到 SSL 服务器</span></span><br><span class=\"line\">    socket.<span class=\"built_in\">connectToHostEncrypted</span>(<span class=\"string\">&quot;mysslserver.com&quot;</span>, <span class=\"number\">443</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket.<span class=\"built_in\">waitForEncrypted</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;SSL handshake successful.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送和接收数据</span></span><br><span class=\"line\">        socket.<span class=\"built_in\">write</span>(<span class=\"string\">&quot;GET / HTTP/1.0\\r\\n\\r\\n&quot;</span>);</span><br><span class=\"line\">        socket.<span class=\"built_in\">flush</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (socket.<span class=\"built_in\">waitForReadyRead</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; socket.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;SSL handshake failed:&quot;</span> &lt;&lt; socket.<span class=\"built_in\">errorString</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们创建了 QSslSocket 实例，并使用 connectToHostEncrypted() 函数连接到名为 mysslserver.com 的 SSL 服务器的端口 443。如果 SSL 握手成功，则使用 write()、flush() 和 readAll() 函数发送和接收数据。您可以使用 QSslSocket 实现 SSL 服务器。请注意，为了使 SSL 握手尽可能平滑，最好使用 QApplication 而不是 QCoreApplication 类作为 Qt 应用程序的子类，并提供上下文以支持证书验证。23. 在 Qt 中，如何进行数据库操作？</p>\n<p>在 Qt 中，您可以使用 QSqlDatabase、QSqlQuery 和 QSqlTableModel 等类来进行数据库操作。以下是一些简单的示例：</p>\n<ol>\n<li>连接到 SQLite 数据库并执行查询</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSqlDatabase&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSqlError&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSqlQuery&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QSqlDatabase db = QSqlDatabase::<span class=\"built_in\">addDatabase</span>(<span class=\"string\">&quot;QSQLITE&quot;</span>);</span><br><span class=\"line\">    db.<span class=\"built_in\">setDatabaseName</span>(<span class=\"string\">&quot;mydatabase.db&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (db.<span class=\"built_in\">open</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt;Database connection established.<span class=\"string\">&quot;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        QSqlQuery query;</span></span><br><span class=\"line\"><span class=\"string\">        query.exec(&quot;</span><span class=\"function\">CREATE TABLE IF NOT EXISTS <span class=\"title\">mytable</span> <span class=\"params\">(<span class=\"string\">&quot;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"><span class=\"function\">                   &quot;</span>  id INTEGER PRIMARY KEY,<span class=\"string\">&quot;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"><span class=\"function\">                   &quot;</span>  name TEXT NOT <span class=\"literal\">NULL</span>,<span class=\"string\">&quot;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"><span class=\"function\">                   &quot;</span>  age INTEGER)</span></span>;<span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        if (query.isActive()) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            qDebug() &lt;&lt; &quot;</span>Table created successfully.<span class=\"string\">&quot;;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        else &#123;</span></span><br><span class=\"line\"><span class=\"string\">            qDebug() &lt;&lt; &quot;</span>Table creation failed:<span class=\"string\">&quot; &lt;&lt; query.lastError().text();</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        // 插入数据记录</span></span><br><span class=\"line\"><span class=\"string\">        query.prepare(&quot;</span><span class=\"function\">INSERT INTO <span class=\"title\">mytable</span> <span class=\"params\">(name, age)</span> <span class=\"title\">VALUES</span> <span class=\"params\">(?, ?)</span>&quot;)</span>;</span><br><span class=\"line\">        query.<span class=\"built_in\">bindValue</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;John Doe&quot;</span>);</span><br><span class=\"line\">        query.<span class=\"built_in\">bindValue</span>(<span class=\"number\">1</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (query.<span class=\"built_in\">exec</span>()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Record inserted successfully.&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Record insertion failed:&quot;</span> &lt;&lt; query.<span class=\"built_in\">lastError</span>().<span class=\"built_in\">text</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行查询</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (query.<span class=\"built_in\">exec</span>(<span class=\"string\">&quot;SELECT * FROM mytable&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (query.<span class=\"built_in\">next</span>()) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> id = query.<span class=\"built_in\">value</span>(<span class=\"number\">0</span>).<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">                QString name = query.<span class=\"built_in\">value</span>(<span class=\"number\">1</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">                <span class=\"type\">int</span> age = query.<span class=\"built_in\">value</span>(<span class=\"number\">2</span>).<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">                <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;ID:&quot;</span> &lt;&lt; id &lt;&lt; <span class=\"string\">&quot;Name:&quot;</span> &lt;&lt; name &lt;&lt; <span class=\"string\">&quot;Age:&quot;</span> &lt;&lt; age;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Query execution failed:&quot;</span> &lt;&lt;.<span class=\"built_in\">lastError</span>().<span class=\"built_in\">text</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Database connection failed:&quot;</span> &lt;&lt;.<span class=\"built_in\">lastError</span>().<span class=\"built_in\">text</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们使用 addDatabase() 函数添加一个 SQLite 数据库，并使用 setDatabaseName() 函数设置数据库文件路径。然后，我们打开这个数据库并执行一个 SQL 查询以创建一个名为 mytable 的数据表。如果查询成功，我们将一个新的记录插入到该数据表中。</p>\n<p>接下来，我们执行另一个 SQL 查询以读取 mytable 中的数据行，并使用 next() 函数向前遍历结果集。最后，我们从每一行中提取三个整数值并打印其 ID、姓名和年龄。</p>\n<ol start=\"2\">\n<li>通过 QSqlTableModel 直接操作数据表</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSqlDatabase&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSqlError&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSqlTableModel&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\">    QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QSqlDatabase db = QSqlDatabase::<span class=\"built_in\">addDatabase</span>(<span class=\"string\">&quot;QSQLITE&quot;</span>);</span><br><span class=\"line\">    db.<span class=\"built_in\">setDatabaseName</span>(<span class=\"string\">&quot;mydatabase.db&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (db.<span class=\"built_in\">open</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Database connection established.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建模型并绑定到数据表</span></span><br><span class=\"line\">        QSqlTableModel model;</span><br><span class=\"line\">        model.<span class=\"built_in\">setTable</span>(<span class=\"string\">&quot;mytable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加新行</span></span><br><span class=\"line\">        model.<span class=\"built_in\">insertRows</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        model.<span class=\"built_in\">setData</span>(model.<span class=\"built_in\">index</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"string\">&quot;Jane Smith&quot;</span>);</span><br><span class=\"line\">        model.<span class=\"built_in\">setData</span>(model.<span class=\"built_in\">index</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"number\">30</span>);</span><br><span class=\"line\">        model.<span class=\"built_in\">submitAll</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 显示所有行</span></span><br><span class=\"line\">        model.<span class=\"built_in\">select</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> row = <span class=\"number\">0</span>; row &lt; model.<span class=\"built_in\">rowCount</span>(); ++row) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> id = model.<span class=\"built_in\">index</span>(row, <span class=\"number\">0</span>).<span class=\"built_in\">data</span>().<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">            QString name = model.<span class=\"built_in\">index</span>(row, <span class=\"number\">1</span>).<span class=\"built_in\">data</span>().<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> age = model.<span class=\"built_in\">index</span>(row, <span class=\"number\">2</span>).<span class=\"built_in\">data</span>().<span class=\"built_in\">toInt</span>();</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;ID:&quot;</span> &lt;&lt; id &lt;&lt; <span class=\"string\">&quot;Name:&quot;</span> &lt;&lt; name &lt;&lt; <span class=\"string\">&quot;Age:&quot;</span> &lt;&lt; age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Database connection failed:&quot;</span> &lt;&lt; db.<span class=\"built_in\">lastError</span>().<span class=\"built_in\">text</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们再次使用 addDatabase() 函数添加 SQLite 数据库，然后打开它。接着，我们创建了一个 QSqlTableModel 实例，将其绑定到 mytable 数据表，并插入一行新的数据记录。然后，我们使用 select() 函数查询整个数据表并显示所有行的 ID、姓名和年龄。</p>\n<p>通过上述代码，您就可以在 Qt 中连接到数据库、执行查询和操作数据表。</p>\n","count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"toc":"","data":[]}