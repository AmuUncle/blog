{"title":"QPainter：Qt图形渲染引擎","type":"page","uid":"f9f14c7610c7ecc97fac0534303c95bb","text":"QPainter：Qt图形渲染引擎Qt 是一种跨平台的 C++ 应用程序框架，拥有丰富而强大的绘图功能。在 Qt 中，用于绘制图形和文本的主要类是 QPainter。QPainter 是一种基于扫描线的图形渲染引擎，可绘制线条、多边形、图像和文字等。 在本章中，我们将学习如何使用...","date":"2023-06-13T03:12:58.000Z","updated":"2023-06-13T03:13:10.515Z","comments":true,"path":"api/pages/images/posts/Qt/进阶教程/QPainter：Qt图形渲染引擎.json","covers":null,"excerpt":"","content":"<h1 id=\"QPainter：Qt图形渲染引擎\"><a href=\"#QPainter：Qt图形渲染引擎\" class=\"headerlink\" title=\"QPainter：Qt图形渲染引擎\"></a>QPainter：Qt图形渲染引擎</h1><p>Qt 是一种跨平台的 C++ 应用程序框架，拥有丰富而强大的绘图功能。在 Qt 中，用于绘制图形和文本的主要类是 QPainter。QPainter 是一种基于扫描线的图形渲染引擎，可绘制线条、多边形、图像和文字等。</p>\n<p>在本章中，我们将学习如何使用 QPainter 类进行绘图，在此之前，您需要了解以下内容：</p>\n<ul>\n<li>C++ 的基本语法和面向对象编程</li>\n<li>Qt 的基本组件和 API</li>\n<li>Qt 信号和的机制</li>\n</ul>\n<h2 id=\"QPainter-类概述\"><a href=\"#QPainter-类概述\" class=\"headerlink\" title=\"QPainter 类概述\"></a>QPainter 类概述</h2><p>QPainter 是 Qt 的核心绘图类之一，提供了各种方法来画出各种图形和文本。QPainter 类通过与特定设备的 QPainterDevice 对象交互，将二维图形呈现到窗口之上。</p>\n<p>QPainter 可以与 QWidget 或其他显示设备（如 QImage 或 QPrinter）配合使用，因此您可以在屏幕上轻松地呈现复杂的几何图形和文本。</p>\n<p>QPainter 的高效性可能会产生混淆，尤其是对新手，但实际上 QPainter 使用了优化的算法，能够快速渲染大部分类型的图形和文本数据。此外，QPainter 还实现了双缓冲技术。</p>\n<p>QPainter 还提供了丰富的 API 来轻松实现以下操作：</p>\n<ul>\n<li>绘制基本的几何形状，如线段，多边形和椭圆。</li>\n<li>填充矩形，多边形和复杂路径。</li>\n<li>绘制文本并根据需要进行布局。</li>\n<li>绘制图像和像素数据。</li>\n<li>变换和移动绘图对象。</li>\n</ul>\n<p>让我们开始学习 QPainter 的使用吧！</p>\n<h2 id=\"QPainter-绘画设备\"><a href=\"#QPainter-绘画设备\" class=\"headerlink\" title=\"QPainter 绘画设备\"></a>QPainter 绘画设备</h2><p>QPainter 与不同的 QPainterDevice 类交互（例如窗口、pixmap、printer 等），通过 QPainterDevice 的 begin() 和 end() 方法以及 QPaintDeviceMetrics 来控制绘画设备。</p>\n<p>在下面的代码片段中，我们看到当生成 QImage （图像）并将其用作 QPainterDevice 时，就使用 QPainter 在其上绘制图片：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QImage <span class=\"title\">image</span><span class=\"params\">(<span class=\"number\">400</span>, <span class=\"number\">400</span>, QImage::Format_RGB32)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(&amp;image)</span></span>; <span class=\"comment\">// 创建一个绘制器并将它与 Image 关联起来</span></span><br><span class=\"line\"> </span><br><span class=\"line\">painter.<span class=\"built_in\">fillRect</span>(image.<span class=\"built_in\">rect</span>(), Qt::white); <span class=\"comment\">// 填充矩形背景为白色</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">QPen <span class=\"title\">pen</span><span class=\"params\">(Qt::green, <span class=\"number\">4</span>, Qt::DashLine, Qt::RoundCap, Qt::RoundJoin)</span></span>;</span><br><span class=\"line\">painter.<span class=\"built_in\">setPen</span>(pen);</span><br><span class=\"line\"> </span><br><span class=\"line\">painter.<span class=\"built_in\">drawLine</span>(<span class=\"number\">50</span>, <span class=\"number\">250</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 绘制直线</span></span><br><span class=\"line\">painter.<span class=\"built_in\">drawRect</span>(<span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>);  <span class=\"comment\">// 绘制矩形</span></span><br><span class=\"line\">painter.<span class=\"built_in\">drawEllipse</span>(<span class=\"number\">250</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">150</span>);  <span class=\"comment\">// 绘制椭圆</span></span><br><span class=\"line\"> </span><br><span class=\"line\">painter.<span class=\"built_in\">end</span>();    <span class=\"comment\">// 和上面一样，必须要调用 end() 结束绘画</span></span><br></pre></td></tr></table></figure>\n\n<p>将 QImage 作为 QPainterDevice 可以实现离屏渲染，以便在窗口或打印机外绘图，并保存到文件中。下面是一个将 QImage 写入文件的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image.<span class=\"built_in\">save</span>(<span class=\"string\">&quot;example.jpg&quot;</span>, <span class=\"string\">&quot;JPG&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>除 QImage 外，还可以使用 QWidget（或派生类）作为 QPainterDevice，这种情况下 QPainter 将自动在窗口上绘制。请注意，在绘制 QWidget 上的内容之前，您需要首先在QWidget 上选择 QPainter。</p>\n<p>以 QWidget 作为 QPainterDevice 的示例代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::paintEvent</span><span class=\"params\">(QPaintEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    painter.<span class=\"built_in\">fillRect</span>(<span class=\"built_in\">rect</span>(), Qt::white);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\">QPen <span class=\"title\">pen</span><span class=\"params\">(Qt::blue, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">    painter.<span class=\"built_in\">setPen</span>(pen);</span><br><span class=\"line\"> </span><br><span class=\"line\">    painter.<span class=\"built_in\">drawLine</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>,(), <span class=\"built_in\">height</span>());</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawLine</span>(<span class=\"built_in\">width</span>(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"built_in\">height</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绘制几何形状\"><a href=\"#绘制几何形状\" class=\"headerlink\" title=\"绘制几何形状\"></a>绘制几何形状</h2><p>QPainter 提供了各种方法来绘制基本的几何形状，例如线段、矩形、圆和椭圆。当使用 QPainter 时，首先需要设置图形属性，刷和颜色。</p>\n<h3 id=\"画笔和画刷\"><a href=\"#画笔和画刷\" class=\"headerlink\" title=\"画笔和画刷\"></a>画笔和画刷</h3><p>尽管你可以为每个几何形状设置自己的颜色和笔刷，但很多时候，这些属性会适用于在 QPainter 上绘制的所有几何形状。QPainter 使用 QPen 和 QBrush 类来管理这些属性。</p>\n<p>QPen 定义划，可以定义颜色、宽度、样式、线端点以及角的类型。创建 QPen 对象时，需要指定颜色和线宽，其他选项也可以通过设置不同的属性来调整。</p>\n<p>QBrush 定义了一个图案或颜色填充，可以定义颜色、渐变和纹理等。在创建 QBrush 对象时，可以为其传递 QColor 对象（如果要填充一种颜色），也可以使用 QGradient （如 QLinearGradient 或 QRadialGradient）来创建渐变效果。</p>\n<p>现在让我们看看如何绘制几何形状。下面是绘制三角形和梯形的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::paintEvent</span><span class=\"params\">(QPaintEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\">QLinearGradient <span class=\"title\">gradient</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width(), height())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渐变色填充</span></span><br><span class=\"line\">    gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">0</span>, Qt::red);</span><br><span class=\"line\">    gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">0.5</span>, Qt::green);</span><br><span class=\"line\">    gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">1</span>, Qt::blue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QBrush <span class=\"title\">brush</span><span class=\"params\">(gradient)</span></span>;     <span class=\"comment\">// 带有渐变色的画刷</span></span><br><span class=\"line\"></span><br><span class=\"line\">    painter.<span class=\"built_in\">setBrush</span>(brush);   <span class=\"comment\">// 设置画刷</span></span><br><span class=\"line\">    painter.<span class=\"built_in\">setPen</span>(Qt::black); <span class=\"comment\">// 设置铅笔颜色</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 绘制三角形</span></span><br><span class=\"line\">    QPolygonF triangle;</span><br><span class=\"line\">    triangle &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"built_in\">width</span>(), <span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"number\">0</span>, <span class=\"built_in\">height</span>());</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawPolygon</span>(triangle);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 绘制梯形</span></span><br><span class=\"line\">    QPolygonF trapezoid;</span><br><span class=\"line\">    trapezoid &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"built_in\">width</span>(), <span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"built_in\">width</span>() - <span class=\"number\">50</span>, <span class=\"built_in\">height</span>()) &lt;&lt; <span class=\"built_in\">QPointF</span>(<span class=\"number\">50</span>, <span class=\"built_in\">height</span>());</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawPolygon</span>(trapezoid);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，我们使用 QPolygonF 来定义三角形和梯形的顶点。然后，我们将其传递到 QPainter 的 drawPolygon 函数中进行绘制。</p>\n<p>值得注意的是，在定义 QPolygonF 对象时，需要指定所有的点坐标。这些坐标是以局部坐标系为参考的。</p>\n<h3 id=\"矩形和圆形\"><a href=\"#矩形和圆形\" class=\"headerlink\" title=\"矩形和圆形\"></a>矩形和圆形</h3><p>QPainter 还提供了其他一些常见图形的绘制方法，如矩形和圆形。下面是一个简单的例子，它使用 QPen 和 QBrush 分别设置矩形和圆形的外观：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::paintEvent</span><span class=\"params\">(QPaintEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\">QPen <span class=\"title\">pen</span><span class=\"params\">(Qt::black, <span class=\"number\">2</span>, Qt::SolidLine)</span></span>;   <span class=\"comment\">// 定义铅笔</span></span><br><span class=\"line\">    painter.<span class=\"built_in\">setPen</span>(pen);                     <span class=\"comment\">// 设置铅笔</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    Q::blue, Qt::Dense4Pattern);<span class=\"comment\">// 定义画刷</span></span><br><span class=\"line\">    painter.<span class=\"built_in\">setBrush</span>(brush);                 <span class=\"comment\">// 设置画刷</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 绘制矩形</span></span><br><span class=\"line\">    <span class=\"function\">QRectF <span class=\"title\">rect</span><span class=\"params\">(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>)</span></span>;           <span class=\"comment\">// 定义矩形区域</span></span><br><span class=\"line\">    painter.<span class=\"built_in\">drawRect</span>(rect);                 <span class=\"comment\">// 绘制矩形</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 绘制圆</span></span><br><span class=\"line\">    <span class=\"function\">QRectF <span class=\"title\">circle</span><span class=\"params\">(<span class=\"number\">150</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>)</span></span>;          <span class=\"comment\">// 定义圆形的外接矩形</span></span><br><span class=\"line\">    painter.<span class=\"built_in\">drawEllipse</span>(circle);             <span class=\"comment\">// 绘制圆形</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，我们使用 QRectF 来指定矩形和圆形的位置和尺寸。我们还将 QPen、QBrush 和 QRectF 对象作为参数传递给 QPainter 类的绘制函数。</p>\n<h2 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h2><p>QPainter 还提供了一种绘制文本的方法。使用 drawText 函数来完成此操作。您需要指定字符串，以及位于字符串底部水平对齐和垂直对齐的坐标。如果需要更大的控制，可以使用 drawStaticText。</p>\n<p>下面的代码演示如何向窗口中绘制文本：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::paintEvent</span><span class=\"params\">(QPaintEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    QFont font;</span><br><span class=\"line\">    font.<span class=\"built_in\">setPointSize</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">    font.<span class=\"built_in\">setBold</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    painter.<span class=\"built_in\">setFont</span>(font);</span><br><span class=\"line\"> </span><br><span class=\"line\">    QString text = <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\">    QRect rect = painter.<span class=\"built_in\">boundingRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>(), Qt::AlignCenter, text);</span><br><span class=\"line\"> </span><br><span class=\"line\">    painter.<span class=\"built_in\">drawText</span>(rect, text, Qt::AlignCenter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们首先创建 QFont 对象来设置字体的大小和粗细程度。然后，我们创建一个字符串，并获取其引起的矩形对象。最后，我们使用 QRect 和 QString 参数调用 drawText 函数来在窗口上显示字符串。</p>\n<p>如果您没有指定对齐方式，则文字将位于 Painter 指定的矩形左上角。</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>QPainter 是一个功能强大的绘图工具，可以用于呈现任意形状、文本和图像。由于其灵活性和高度优化的算法，它也被广泛用于绘制实时图形。</p>\n<p>但是，由于绘制复杂几何形状和使用大量的纹理或网格会影响绘制性能，QPainter 在某些情况下可能并不是最好的选择。在这种情况下，可能需要使用专门的图形库，比如 OpenGL 或 Vulkan。</p>\n<p>另外，为了获得更好的性能，建议您在使用 QPainter 时遵循以下准则：</p>\n<ul>\n<li>避免每次调用 paintEvent 函数时重新创建 QPen 和 QBrush 对象。尽可能复用先前创建的对象。</li>\n<li>使用 QPixmap 而不是 QImage，在窗口中绘制简单的图形时。因为 QPixmap 通常比 QImage 更高效地呈现到屏幕上。</li>\n<li>避免在 paintEvent 中进行过多的计算（例如计算多边形路径或生成渐变）。如果必须要进行复杂的计算，请将预先计算的结果存储在成员变量或全局变量中，并在需要时重用它们。</li>\n</ul>\n<p>在 Qt 中，使用 QPainter 绘图是非常常见的操作。如果您了解 QPainter 的 API 并按照最佳实践使用它，那么将可以轻松地创建复杂的图形和文本布局，并以高效的方式呈现到屏幕上。## QPainter 与 Qt 组件</p>\n<p>在 Qt 应用程序中，除了直接绘制到窗口上之外，您还可以将 QPainter 用于 Qt 组件的绘制（例如 QPushButton、QLabel 和 QGraphicsScene 等）。</p>\n<p>通过继承 QWidget 和实现 paintEvent 函数来进行绘制是一种常见的方法。如果您使用的是更高级别的组件，则可能需要重写更具体的绘制函数（例如 QStylePainter::drawControl 和 QStyle::drawPrimitive）来控制组件的呈现。</p>\n<p>下面是一个简单的例子，演示如何在 QWidget 上绘制一个文本字符串：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::paintEvent</span><span class=\"params\">(QPaintEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    QFont font;</span><br><span class=\"line\">    font.<span class=\"built_in\">setPointSize</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">    font.<span class=\"built_in\">setBold</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    painter.<span class=\"built_in\">setFont</span>(font);</span><br><span class=\"line\"> </span><br><span class=\"line\">    QString text = <span class=\"string\">&quot;Hello, world!&quot;</span>;</span><br><span class=\"line\">    QRect rect = painter.<span class=\"built_in\">boundingRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>(), Qt::AlignCenter, text);</span><br><span class=\"line\"> </span><br><span class=\"line\">    painter.<span class=\"built_in\">drawText</span>(rect, text, Qt::AlignCenter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们将 QPainter 直接传递给 QWidget 实例，并且在 paintEvent 函数中绘制文本。</p>\n<p>在更高级别的 Qt 组件中，您通常需要使用 QStylePainter 或 QPainterPath 类来控制组件的样式和几何形状。以下是一个示例，演示如何使用 QStylePainter 来自定义 QPushButton 的外观：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyButton::paintEvent</span><span class=\"params\">(QPaintEvent *event)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QStylePainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    QStyleOptionButton option;</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawControl</span>(QStyle::CE_PushButton, option);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们定义了一个自定义 QPushButton 子类，然后在 paintEvent 函数中使用 QStylePainter 进行绘制。QStyleOptionButton 对象用于指定按钮的状态和文本，然后调用 QStylePainter 的 drawControl 函数来绘制按钮。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在 Qt 中，QPainter 是一种强大的图形绘制工具，可用于将几何形状、文本和图像呈现到窗口或 Qt 组件中。您可以通过设置属性（如铅笔宽度、画刷颜色和字体）来控制绘制过程，并使用 QPainterPath 类型来创建复杂的形状。</p>\n<p>为了获得最佳性能，请注意遵循最佳实践，并使用优化过的算法来计算和绘制形状。如果您更高级别的绘图功能，则可以考虑使用 OpenGL 或 Vulkan 等专业库来进行绘图。除了本文所述的基本功能之外，QPainter 还具有另外许多高级功能。</p>\n<p>例如，QPainter 还支持裁剪功能，可以通过 QPainter::setClipRect() 或 QPainter::setClipPath() 函数将绘制区域限制为一个矩形或 Qt 路径。这对于在不同部分绘制颜色和图案时非常有用，避免了渲染到整个窗口的需要。</p>\n<p>QPainter 还支持在图形上应用变换，包括旋转、缩放和移动，这可以使用 QTransform 对象完成。您可以使用 QPainter::setWorldTransform() 函数将变换应用于 QPainter，并使用 QPainter::resetTransform() 函数将其重置回默认状态。</p>\n<p>如果您需要在图形上应用混合效果，QPainter 也提供了支持。您可以使用 QPainter::setCompositionMode() 函数将绘制操作与现有画布内容组合，以产生透明效果，或者使用其他混合模式实现各种效果。</p>\n<p>最后但并非最不重要的是，Qt 文档中还有大量额外的示例、教程和解释，深入探索 QPainter 的使用方法。无论您是新手还是有经验的 Qt 开发人员，都可以从中获益。</p>\n<p>希望本文对您加深对 QPainter 的理解，并帮助您更好地使用它进行图形绘制！</p>\n","count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QPainter%EF%BC%9AQt%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">QPainter：Qt图形渲染引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QPainter-%E7%B1%BB%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">QPainter 类概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QPainter-%E7%BB%98%E7%94%BB%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">QPainter 绘画设备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6\"><span class=\"toc-text\">绘制几何形状</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%BB%E7%AC%94%E5%92%8C%E7%94%BB%E5%88%B7\"><span class=\"toc-text\">画笔和画刷</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9F%A9%E5%BD%A2%E5%92%8C%E5%9C%86%E5%BD%A2\"><span class=\"toc-text\">矩形和圆形</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%98%E5%88%B6%E6%96%87%E6%9C%AC\"><span class=\"toc-text\">绘制文本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">性能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","data":[]}