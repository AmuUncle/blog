{"title":"Qt 线程池","type":"page","uid":"4fbeabb0ac48ed0e6d723581a950f5a5","text":"Qt 线程池Qt 线程池是 Qt 库中用于任务异步执行的工具类，它提供了一种简单方便的方式来管理多线程并发处理。本篇文章将会介绍 Qt 线程池的概念及其使用方法。 什么是线程池？线程池是一个预先创建好一组线程，将可用线程保存在内存池中，等待来自任务队列的任务请求，一旦有任务到达就...","date":"2021-11-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.749Z","comments":true,"path":"api/pages/images/posts/Qt/进阶教程/Qt 线程池.json","covers":null,"excerpt":"","content":"<h1 id=\"Qt-线程池\"><a href=\"#Qt-线程池\" class=\"headerlink\" title=\"Qt 线程池\"></a>Qt 线程池</h1><p>Qt 线程池是 Qt 库中用于任务异步执行的工具类，它提供了一种简单方便的方式来管理多线程并发处理。本篇文章将会介绍 Qt 线程池的概念及其使用方法。</p>\n<h2 id=\"什么是线程池？\"><a href=\"#什么是线程池？\" class=\"headerlink\" title=\"什么是线程池？\"></a>什么是线程池？</h2><p>线程池是一个预先创建好一组线程，将可用线程保存在内存池中，等待来自任务队列的任务请求，一旦有任务到达就会自动分配空闲的线程来执行任务。线程执行完任务后并不会被立即销毁而是重新返回线程池中等待下次任务调度。</p>\n<p>线程池在多线程编程中广泛应用，能够有效控制线程创建和线程销毁的频率，避免由于创建过多线程导致系统资源浪费和运行效率降低的问题。</p>\n<h2 id=\"Qt-线程池的使用\"><a href=\"#Qt-线程池的使用\" class=\"headerlink\" title=\"Qt 线程池的使用\"></a>Qt 线程池的使用</h2><h3 id=\"引入头文件\"><a href=\"#引入头文件\" class=\"headerlink\" title=\"引入头文件\"></a>引入头文件</h3><p>为了使用 Qt 线程池，需要引入 <code>QtConcurrent/QtConcurrentRun</code> 头文件，实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtConcurrent/QtConcurrentRun&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建线程池\"><a href=\"#创建线程池\" class=\"headerlink\" title=\"创建线程池\"></a>创建线程池</h3><p>要使用 Qt 线程池，需要创建一个 <code>QThreadPool</code> 对象。 Qt 线程池默认使用线程数等于 CPU 核心数的两倍，但是你可以自定义线程数。创建线程池的代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QThreadPool *threadPool = QThreadPool::<span class=\"built_in\">globalInstance</span>();</span><br><span class=\"line\"><span class=\"comment\">// or </span></span><br><span class=\"line\">QThreadPool *threadPool = <span class=\"keyword\">new</span> <span class=\"built_in\">QThreadPool</span>(parent);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义任务函数\"><a href=\"#定义任务函数\" class=\"headerlink\" title=\"定义任务函数\"></a>定义任务函数</h3><p>需要执行在线程池中的任务必须是静态或全局的，这样才能保证在线程池中正确执行。为了方便演示，下面代码片段中使用 lambda 表达式作为任务函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> task = []()&#123;</span><br><span class=\"line\">    QThread::<span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 模拟耗时操作</span></span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;任务执行完毕&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提交任务\"><a href=\"#提交任务\" class=\"headerlink\" title=\"提交任务\"></a>提交任务</h3><p>将任务提交到线程池中进行处理，使用 <code>QtConcurrent::run()</code> 函数即可。例如，以下代码可将 <code>task</code> 任务提交到线程池中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QtConcurrent::<span class=\"built_in\">run</span>(threadPool, task);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制线程池\"><a href=\"#控制线程池\" class=\"headerlink\" title=\"控制线程池\"></a>控制线程池</h3><p><code>QThreadPool</code> 对象有几个控制线程池行为的属性和方法：</p>\n<ul>\n<li><code>setMaxThreadCount(int maxThreadCount)</code>：设置线程池最大线程数。</li>\n<li><code>activeThreadCount()</code>：返回活跃线程个数。</li>\n<li><code>reserveThread()</code>：分配一个新的线程，相当于增加一个已有线程的数量。</li>\n<li><code>releaseThread()</code>：释放一个线程，相当于减少一个线程的数量。</li>\n</ul>\n<h3 id=\"等待任务完成\"><a href=\"#等待任务完成\" class=\"headerlink\" title=\"等待任务完成\"></a>等待任务完成</h3><p>运行时，任务被提交到线程池中异步执行。想要等待所有的任务执行完成才继续后面的代码执行，可以使用 <code>QThreadPool::waitForDone()</code> 方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threadPool-&gt;<span class=\"built_in\">waitForDone</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Qt 线程池提供了一种简单方便的方式来执行多线程并发操作，避免由于创建过多线程导致系统资源浪费和运行效率降低的问题。需要注意的是，在进行多线程并发处理时，必须保证代码的线程安全性。希望本文对 Qt 线程池的概念及使用方法有所帮助。</p>\n","count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qt-%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">Qt 线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9F\"><span class=\"toc-text\">什么是线程池？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Qt-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Qt 线程池的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E5%A4%B4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">引入头文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">创建线程池</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E4%BB%BB%E5%8A%A1%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">定义任务函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">提交任务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">控制线程池</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%89%E5%BE%85%E4%BB%BB%E5%8A%A1%E5%AE%8C%E6%88%90\"><span class=\"toc-text\">等待任务完成</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","data":[]}