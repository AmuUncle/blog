{"title":"Qt多进程通信","type":"page","uid":"8ffc5768d6e6142053991932264dddb5","text":"Qt多进程通信在许多应用程序中，多进程通信（IPC）是必不可少的。例如，一个应用程序可能需要将数据从一个进程传递到另一个进程，或者需要在两个进程之间同步信息。Qt 提供了一些方法来实现多进程通信，本文将介绍其中的一些。 进程间通信方式Qt提供了几种进程间通信的方式，常见的有： 1...","date":"2023-05-13T03:00:12.000Z","updated":"2023-05-19T05:34:19.751Z","comments":true,"path":"api/pages/images/posts/Qt/进阶教程/Qt多进程通信.json","covers":null,"excerpt":"","content":"<h1 id=\"Qt多进程通信\"><a href=\"#Qt多进程通信\" class=\"headerlink\" title=\"Qt多进程通信\"></a>Qt多进程通信</h1><p>在许多应用程序中，多进程通信（IPC）是必不可少的。例如，一个应用程序可能需要将数据从一个进程传递到另一个进程，或者需要在两个进程之间同步信息。Qt 提供了一些方法来实现多进程通信，本文将介绍其中的一些。</p>\n<h2 id=\"进程间通信方式\"><a href=\"#进程间通信方式\" class=\"headerlink\" title=\"进程间通信方式\"></a>进程间通信方式</h2><p>Qt提供了几种进程间通信的方式，常见的有：</p>\n<h3 id=\"1-信号和槽\"><a href=\"#1-信号和槽\" class=\"headerlink\" title=\"1. 信号和槽\"></a>1. 信号和槽</h3><p>信号和槽是Qt中最常用的通信机制，它可以在单个进程内发送消息并响应消息。如果我们想在不同进程之间使用信号和槽进行通信，则需要使用QSharedMemory和QLocalServer等类来实现跨进程访问共享内存和监听套接字。</p>\n<h3 id=\"2-套接字\"><a href=\"#2-套接字\" class=\"headerlink\" title=\"2. 套接字\"></a>2. 套接字</h3><p>套接字是Linux和Windows操作系统上实现进程间通信的标准方法。Qt提供了QTcpSocket和QTcpServer作为基于TCP&#x2F;IP协议的套接字实现以及QUdpSocket和QUdpServer作为UDP协议的套接字实现。</p>\n<h3 id=\"3-共享内存\"><a href=\"#3-共享内存\" class=\"headerlink\" title=\"3. 共享内存\"></a>3. 共享内存</h3><p>共享内存是一种非常快速的进程间通信方式。Qt提供了QSharedMemory类来实现共享内存。</p>\n<h3 id=\"4-本地进程间通信\"><a href=\"#4-本地进程间通信\" class=\"headerlink\" title=\"4. 本地进程间通信\"></a>4. 本地进程间通信</h3><p>Qt提供了QLocalSocket和QLocalServer类来实现本地进程间通信。这些类使用套接字实现，但它们可以在本地计算机上快速地进行通信，而不必通过网络。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>下面将针对以上四种方式分别介绍如何在Qt中实现多进程通信。</p>\n<h3 id=\"1-信号和槽-1\"><a href=\"#1-信号和槽-1\" class=\"headerlink\" title=\"1. 信号和槽\"></a>1. 信号和槽</h3><p>信号和槽是一种非常方便的方式来跨线程或进程发送消息并响应消息。在Qt中，我们可以使用QSharedMemory类来实现跨进程访问共享内存和监听套接字。</p>\n<p>首先，我们需要创建一个QSharedMemory对象，并调用create()方法来创建共享内存段：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QSharedMemory sharedMemory;</span><br><span class=\"line\">sharedMemory.<span class=\"built_in\">create</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)); <span class=\"comment\">// 创建一个大小为int的共享内存段</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们需要将数据写入共享内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> value = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)sharedMemory.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data, &amp;value, <span class=\"built_in\">sizeof</span>(value));</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们需要发送一个信号，以便另一个进程可以读取共享内存中的值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">emit <span class=\"title\">valueChanged</span><span class=\"params\">(sharedMemory.nativeKey())</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>在另一个进程中，我们需要连接到这个信号并读取共享内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::onValueChanged</span><span class=\"params\">(<span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QSharedMemory sharedMemory;</span><br><span class=\"line\">    sharedMemory.<span class=\"built_in\">setNativeKey</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sharedMemory.<span class=\"built_in\">attach</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理共享内存附加失败的情况</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)sharedMemory.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;value, data, <span class=\"built_in\">sizeof</span>(value));</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Value: &quot;</span> &lt;&lt; value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-套接字-1\"><a href=\"#2-套接字-1\" class=\"headerlink\" title=\"2. 套接字\"></a>2. 套接字</h3><p>要在两个进程之间使用套接字进行通信，我们需要使用QTcpSocket和QTcpServer（或QUdpSocket和QUdpServer）类。首先，在服务器进程中，我们需要创建一个QTcpServer对象并将其绑定到一个端口：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QTcpServer server;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!server.<span class=\"built_in\">listen</span>(QHostAddress::Any, <span class=\"number\">1234</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理服务器启动失败的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们需要等待客户端连接：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::onNewConnection</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QTcpSocket *socket = server.<span class=\"built_in\">nextPendingConnection</span>();</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(socket, &amp;QTcpSocket::readyRead, <span class=\"keyword\">this</span>, &amp;MyClass::onReadyRead);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">在客户端进程中，我们需要创建一个QTcpSocket对象，并连接到服务器：</span><br><span class=\"line\"></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">QTcpSocket socket;</span><br><span class=\"line\">socket.<span class=\"built_in\">connectToHost</span>(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">1234</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!socket.<span class=\"built_in\">waitForConnected</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理连接失败的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们可以使用write()方法向服务器发送数据：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QDataStream <span class=\"title\">out</span><span class=\"params\">(&amp;socket)</span></span>;</span><br><span class=\"line\">out &lt;&lt; <span class=\"built_in\">QString</span>(<span class=\"string\">&quot;Hello, server!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后，服务器可以使用readyRead()信号来读取数据：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::onReadyRead</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QTcpSocket *socket = <span class=\"built_in\">qobject_cast</span>&lt;QTcpSocket *&gt;(<span class=\"built_in\">sender</span>());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket) &#123;</span><br><span class=\"line\">        <span class=\"function\">QDataStream <span class=\"title\">in</span><span class=\"params\">(socket)</span></span>;</span><br><span class=\"line\">        QString message;</span><br><span class=\"line\">        in &gt;&gt; message;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received message: &quot;</span> &lt;&lt; message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-共享内存-1\"><a href=\"#3-共享内存-1\" class=\"headerlink\" title=\"3. 共享内存\"></a>3. 共享内存</h3><p>共享内存是一种非常快速的进程间通信方式。Qt提供了QSharedMemory类来实现共享内存。</p>\n<p>首先，我们需要创建一个QSharedMemory对象，并调用create()方法来创建共享内存段：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QSharedMemory sharedMemory;</span><br><span class=\"line\">sharedMemory.<span class=\"built_in\">create</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)); <span class=\"comment\">// 创建一个大小为int的共享内存段</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，我们需要将数据写入共享内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> value = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)sharedMemory.<span class=\"built_in\">data</span>();</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(data, &amp;value, <span class=\"built_in\">sizeof</span>(value));</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们需要发送一个信号，以便另一个进程可以读取共享内存中的值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">emit <span class=\"title\">valueChanged</span><span class=\"params\">(sharedMemory.nativeKey())</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>在另一个进程中，我们需要连接到这个信号并读取共享内存：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::onValueChanged</span><span class=\"params\">(<span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QSharedMemory sharedMemory;</span><br><span class=\"line\">    sharedMemory.<span class=\"built_in\">setNativeKey</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sharedMemory.<span class=\"built_in\">attach</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理共享内存附加失败的情况</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)sharedMemory.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;value, data, <span class=\"built_in\">sizeof</span>(value));</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Value: &quot;</span> &lt;&lt; value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-本地进程间通信-1\"><a href=\"#4-本地进程间通信-1\" class=\"headerlink\" title=\"4. 本地进程间通信\"></a>4. 本地进程间通信</h3><p>Qt提供了QLocalSocket和QLocalServer类来实现本地进程间通信。这些类使用套接字实现，但它们可以在本地计算机上快速地进行通信，而不必通过网络。</p>\n<p>首先，在服务器进程中，我们需要创建一个QLocalServer对象并将其绑定到一个地址：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QLocalServer server;</span><br><span class=\"line\">server.<span class=\"built_in\">listen</span>(<span class=\"string\">&quot;myserver&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们需要等待客户端连接：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::onNewConnection</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QLocalSocket *socket = server.<span class=\"built_in\">nextPendingConnection</span>();</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(socket, &amp;QLocalSocket::readyRead, <span class=\"keyword\">this</span>, &amp;MyClass::onReadyRead);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在客户端进程中，我们需要创建一个QLocalSocket对象，并连接到服务器：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QLocalSocket socket;</span><br><span class=\"line\">socket.<span class=\"built_in\">connectToServer</span>(<span class=\"string\">&quot;myserver&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!socket.<span class=\"built_in\">waitForConnected</span>()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理连接失败的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后，我们可以使用write()方法向服务器发送数据：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QDataStream <span class=\"title\">out</span><span class=\"params\">(&amp;socket)</span></span>;</span><br><span class=\"line\">out &lt;&lt; <span class=\"built_in\">QString</span>(<span class=\"string\">&quot;Hello, server!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后，服务器可以使用readyRead()信号来读取数据：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::onReadyRead</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QLocalSocket *socket = <span class=\"built_in\">qobject_cast</span>&lt;QLocalSocket *&gt;(<span class=\"built_in\">sender</span>());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket) &#123;</span><br><span class=\"line\">        <span class=\"function\">QDataStream <span class=\"title\">in</span><span class=\"params\">(socket)</span></span>;</span><br><span class=\"line\">        QString message;</span><br><span class=\"line\">        in &gt;&gt; message;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received message: &quot;</span> &lt;&lt; message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在Qt中，我们可以使用几种不同的方法来实现多进程之间的通信。每种方法都有其优点和缺点，具体要根据实际情况进行选择。无论采用哪种方式，Qt都提供了丰富的类和方法来帮助我们实现高效、稳定的进程间通信。</p>\n<p>以上就是本文的全部内容，希望能对你在Qt中实现多进程通信有所帮助！## 附加代码示例</p>\n<p>以下是一个使用共享内存实现进程间通信的简单代码示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sender.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSharedMemory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QSharedMemory sharedMemory;</span><br><span class=\"line\">    sharedMemory.<span class=\"built_in\">create</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> value = <span class=\"number\">42</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)sharedMemory.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data, &amp;value, <span class=\"built_in\">sizeof</span>(value));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">emit <span class=\"title\">valueChanged</span><span class=\"params\">(sharedMemory.nativeKey())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// receiver.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QSharedMemory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QSharedMemory sharedMemory;</span><br><span class=\"line\">    sharedMemory.<span class=\"built_in\">setNativeKey</span>(<span class=\"number\">1234</span>); <span class=\"comment\">// 假定sender已经创建了共享内存，key为1234</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sharedMemory.<span class=\"built_in\">attach</span>()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Failed to attach to shared memory.&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> value;</span><br><span class=\"line\">    <span class=\"type\">char</span> *data = (<span class=\"type\">char</span> *)sharedMemory.<span class=\"built_in\">data</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;value, data, <span class=\"built_in\">sizeof</span>(value));</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received value: &quot;</span> &lt;&lt; value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，<code>sender.cpp</code>将一个整数值写入共享内存并发出一个信号。<code>receiver.cpp</code>连接到这个信号并读取共享内存中的值。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Qt Documentation: Interprocess Communication in Qt</li>\n<li>Qt Forum: Inter-process communication through signals and slots</li>\n<li>Towards Data Science: A Comprehensive Guide to Shared Memory in C++</li>\n</ul>\n","count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qt%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">Qt多进程通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">进程间通信方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD\"><span class=\"toc-text\">1. 信号和槽</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A5%97%E6%8E%A5%E5%AD%97\"><span class=\"toc-text\">2. 套接字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98\"><span class=\"toc-text\">3. 共享内存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%9C%AC%E5%9C%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">4. 本地进程间通信</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">实现方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD-1\"><span class=\"toc-text\">1. 信号和槽</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A5%97%E6%8E%A5%E5%AD%97-1\"><span class=\"toc-text\">2. 套接字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98-1\"><span class=\"toc-text\">3. 共享内存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%9C%AC%E5%9C%B0%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-1\"><span class=\"toc-text\">4. 本地进程间通信</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol>","data":[]}