{"title":"Q_D指针：Qt中的私有指针","type":"page","uid":"9d2830c9ce5740d7858848bda4843346","text":"Q_D指针：Qt中的私有指针在开发Qt应用程序时，为了保护对象的私有数据并提高代码健壮性，经常会使用QObject和QSharedData等。然而，Q_D指针是一种更高效且易于使用的方法，它可以避免复制数据，保护对象不受外部访问，并减少内存分配和复制。在本文中，我们将详细介绍Q_...","date":"2021-10-04T03:34:06.000Z","updated":"2023-05-19T05:34:19.748Z","comments":true,"path":"api/pages/images/posts/Qt/进阶教程/Q_D指针：Qt中的私有指针.json","covers":null,"excerpt":"","content":"<h1 id=\"Q-D指针：Qt中的私有指针\"><a href=\"#Q-D指针：Qt中的私有指针\" class=\"headerlink\" title=\"Q_D指针：Qt中的私有指针\"></a>Q_D指针：Qt中的私有指针</h1><p>在开发Qt应用程序时，为了保护对象的私有数据并提高代码健壮性，经常会使用QObject和QSharedData等。然而，Q_D指针是一种更高效且易于使用的方法，它可以避免复制数据，保护对象不受外部访问，并减少内存分配和复制。在本文中，我们将详细介绍Q_D指针的原理、优点和使用方法。</p>\n<h2 id=\"什么是Q-D指针？\"><a href=\"#什么是Q-D指针？\" class=\"headerlink\" title=\"什么是Q_D指针？\"></a>什么是Q_D指针？</h2><p>Q_D指针是Qt框架中的私有指针，用于隐藏对象的实现和保护其数据。Q_D指针的原理是将对象的实现放在单独的类（例如MyClassPrivate）中，然后将Q_D指针作为指向该类的单个成员变量存储在主类中。这意味着只有该类可以访问此指针，并且对象的实现可以轻松地更改而无需更改公共接口。</p>\n<p>以下是一个简单的使用Q_D指针的示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QExplicitlySharedDataPointer&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClassPrivate</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>();</span><br><span class=\"line\">    ~<span class=\"built_in\">MyClass</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setNumber</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getNumber</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    QExplicitlySharedDataPointer&lt;MyClassPrivate&gt; <span class=\"type\">const</span> d_ptr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClassPrivate</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> m_number;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass::<span class=\"built_in\">MyClass</span>() : <span class=\"built_in\">d_ptr</span>(<span class=\"keyword\">new</span> MyClassPrivate)</span><br><span class=\"line\">&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyClass::~<span class=\"built_in\">MyClass</span>()</span><br><span class=\"line\">&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyClass::setNumber</span><span class=\"params\">(<span class=\"type\">int</span> number)</span> </span>&#123;</span><br><span class=\"line\">    d_ptr-&gt;m_number = number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">MyClass::getNumber</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d_ptr-&gt;m_number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MyClass* myObject = <span class=\"keyword\">new</span> MyClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    myObject-&gt;<span class=\"built_in\">setNumber</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;My object&#x27;s number is: &quot;</span> &lt;&lt; myObject-&gt;<span class=\"built_in\">getNumber</span>() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> myObject;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个名为“MyClass”的主类和一个名为“MyClassPrivate”的辅助类。在MyClass中，我们使用Q_D指针作为私有成员变量，并将它存储在const变量d_ptr中。然后，在MyClassPrivate中，我们定义了一个简单的数据成员m_number，并从MyClass中使用setNumber()和getNumber()方法进行访问。</p>\n<p>最后，在main()函数中，我们创建了一个新的MyClass对象，并使用setNumber()和getNumber()方法设置和检索对象的数字。最后，我们使用delete操作符删除对象以避免内存泄漏。</p>\n<h2 id=\"Q-D指针的优点\"><a href=\"#Q-D指针的优点\" class=\"headerlink\" title=\"Q_D指针的优点\"></a>Q_D指针的优点</h2><p>使用Q_D指针作为Qt应用程序的开发模式有许多好处：</p>\n<ul>\n<li>私有化实现：Q_D指针避免直接访问和更改对象状态，从而保护对象及其数据并减少操作需要管理员风险。</li>\n<li>避免复制：Q_D指针避免了对象的复制，从而减少了内存分配和拷贝操作，节约时间和资源。</li>\n<li>可测试性：使用Q_D指针可以使类更易于测试和调试。Q_D指针减少了公共接口的复杂性，使得更容易构建自动化测试。</li>\n</ul>\n<h2 id=\"使用Q-D指针的注意点\"><a href=\"#使用Q-D指针的注意点\" class=\"headerlink\" title=\"使用Q_D指针的注意点\"></a>使用Q_D指针的注意点</h2><p>在使用Q_D指针时，需要注意以下事项：</p>\n<ul>\n<li>实现需要单独定义： 辅助类型单独定义以确保辅助类型只能通过Q_D指针访问。</li>\n<li>指针不是线程安全的：Q_D指针仍需要锁定，有许多选项可用于实现该目标，例如信号槽机制和互斥体等。</li>\n<li>依赖QObject：由于Q_D指针需要访问QObject的元信息，因此只能与派生自QObject的类一起使用。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>Q_D指针是一种用于保护对象实现并防止数据复制的Qt应用程序开发模式。它使得我们开发更高效、具备更好可测试性和减少内存分配的安全代码变得轻而易举。有了Q_D指针，我们可以实现复杂对象中数据的封装和管理，帮助我们更快地开发更健壮的Qt应用程序。</p>\n","count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Q-D%E6%8C%87%E9%92%88%EF%BC%9AQt%E4%B8%AD%E7%9A%84%E7%A7%81%E6%9C%89%E6%8C%87%E9%92%88\"><span class=\"toc-text\">Q_D指针：Qt中的私有指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFQ-D%E6%8C%87%E9%92%88%EF%BC%9F\"><span class=\"toc-text\">什么是Q_D指针？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-D%E6%8C%87%E9%92%88%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">Q_D指针的优点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Q-D%E6%8C%87%E9%92%88%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">使用Q_D指针的注意点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","data":[]}