{"title":"qRegisterMetaType：Qt中的元类型注册机制","type":"page","uid":"b9a3389aff6db59f2d76b525dc3489d6","text":"qRegisterMetaType：Qt中的元类型注册机制Qt框架提供了强大的信号槽机制和反射功能。在这些机制下，元类型注册是一项重要且必须的操作。在实际开发中，我们经常需要将自定义的C++类或者结构体暴露给Qt的元对象系统，以便能够通过信号槽机制或者QVariant等进行处理。...","date":"2021-10-04T03:34:06.000Z","updated":"2023-05-19T05:34:19.753Z","comments":true,"path":"api/pages/images/posts/Qt/进阶教程/qRegisterMetaType：Qt中的元类型注册机制.json","covers":null,"excerpt":"","content":"<h1 id=\"qRegisterMetaType：Qt中的元类型注册机制\"><a href=\"#qRegisterMetaType：Qt中的元类型注册机制\" class=\"headerlink\" title=\"qRegisterMetaType：Qt中的元类型注册机制\"></a>qRegisterMetaType：Qt中的元类型注册机制</h1><p>Qt框架提供了强大的信号槽机制和反射功能。在这些机制下，元类型注册是一项重要且必须的操作。在实际开发中，我们经常需要将自定义的C++类或者结构体暴露给Qt的元对象系统，以便能够通过信号槽机制或者QVariant等进行处理。qRegisterMetaType是Qt中用于元类型注册的函数，本文将详细介绍它的使用方法和应用场景。</p>\n<h2 id=\"什么是元类型注册？\"><a href=\"#什么是元类型注册？\" class=\"headerlink\" title=\"什么是元类型注册？\"></a>什么是元类型注册？</h2><p>元类型注册是向Qt元对象系统中注册某个C++数据类型，使其能够被Qt信号槽机制、动态属性、QObject子类化（Q_OBJECT）等类型系统所支持和识别。C++中的简单类型，如int、char、void*等，已经被Qt进行过初始化并注册。但是我们定义的自定义类型，如个人信息、订单、消息等等，需要通过元类型注册才能为Qt框架所用。</p>\n<p>以下是一个简单的例子，介绍了如何使用qRegisterMetaType来注册一个自定义的类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QCoreApplication&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtCore/QMetaType&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyClass</span>() : <span class=\"built_in\">m_data</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyClass</span><span class=\"params\">(<span class=\"type\">int</span> data)</span> : m_data(data) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getData</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> m_data; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> m_data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Q_DECLARE_METATYPE</span>(MyClass)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">qRegisterMetaType</span>&lt;MyClass&gt;(<span class=\"string\">&quot;MyClass&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyClass <span class=\"title\">myObject</span><span class=\"params\">(<span class=\"number\">42</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   QMetaType::Type type = QMetaType::<span class=\"built_in\">type</span>(<span class=\"string\">&quot;MyClass&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (type != QMetaType::UnknownType) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;MyClass is a registered meta-type!&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个叫做”MyClass”的类，并使用了Q_DECLARE_METATYPE宏来声明它是一个自定义元类型。之后，我们使用qRegisterMetaType函数将这个类注册到Qt元对象系统中，并提供了一个标签名称“MyClass”。</p>\n<p>创建了MyClass对象（m_data被初始化为42）之后，我们通过Q_MetaType::type()函数检查是否正确地注册了该类。如果正确注册，则返回类型QMetaType::Type无效,否则返回QMetaType::UnknownType。</p>\n<h2 id=\"qRegisterMetaType的应用场景\"><a href=\"#qRegisterMetaType的应用场景\" class=\"headerlink\" title=\"qRegisterMetaType的应用场景\"></a>qRegisterMetaType的应用场景</h2><ul>\n<li>传递复杂类型参数: 元类型注册使得我们可以在信号槽之间传递我们自定义的数据类型，而不必依靠QVariant进行数据处理从而进行扩展。</li>\n<li>继承QObject后添加新的事件或者属性: Q_OBJECT类中定义的事件和属性是基于元对象系统实现的，因此对于新的事件或者属性，可能需要使用qRegisterMetaType增加支持。</li>\n<li>构建Qt对外部库的桥梁：在想要将第三方库与Qt结合使用时，我们需要将自定义类型注册为元类型。</li>\n</ul>\n<h2 id=\"qRegisterMetaType注意点\"><a href=\"#qRegisterMetaType注意点\" class=\"headerlink\" title=\"qRegisterMetaType注意点\"></a>qRegisterMetaType注意点</h2><ul>\n<li>对于const的m_amedata需要传递包装器类 （如QSharedPointer,const_cast 包装器等）。</li>\n<li>元对象系统内部有一个Hardcoded list of Qt data types已经添加到Q_RegisterMetaType中了，如果已经添加则不需要额外添加两次。</li>\n<li>在使用自定义数据类型之前必须先进行注册，否则程序可能会崩溃。</li>\n<li>由于QT的meta object是用宏来声明元信息的，因此C++标准的RTTI(Run-Time Type Information)并不能应用于此。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>在Qt开发中，元类型注册是一项非常重要的操作，使得我们能够自定义数据类型成为Qt元对象系统的一部分。使用qRegisterMetaType可以轻松地完成这个任务，避免了不必要的冗余代码和其他问题，在Qt应用程序开发中又具有重要地位。 通过该机制，我们可以增加代码的健壮性，并更加有效地编写基于元对象系统的代码，实现更好的效率和可读性。</p>\n","count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#qRegisterMetaType%EF%BC%9AQt%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%86%8C%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">qRegisterMetaType：Qt中的元类型注册机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%83%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%86%8C%EF%BC%9F\"><span class=\"toc-text\">什么是元类型注册？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#qRegisterMetaType%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">qRegisterMetaType的应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#qRegisterMetaType%E6%B3%A8%E6%84%8F%E7%82%B9\"><span class=\"toc-text\">qRegisterMetaType注意点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","data":[]}