{"title":"Qt高级绘图","type":"page","uid":"c62582710916c0742c8d3617f9f6270d","text":"Qt高级绘图在这篇文章中，我们将会介绍Qt中的高级绘制技术，并了解如何使用它们来实现自定义的绘制和渲染。Qt提供了一些专业级别的API来进行绘图操作，可以创建矢量图形或者像素颜色（bitmap）图形。 QPainter绘图框架Qt中最常用的绘制API是QPainter类。它可以用...","date":"2021-10-03T02:34:06.000Z","updated":"2023-05-19T05:34:19.708Z","comments":true,"path":"api/pages/images/posts/Qt/基础教程/Qt高级绘图.json","covers":null,"excerpt":"","content":"<h1 id=\"Qt高级绘图\"><a href=\"#Qt高级绘图\" class=\"headerlink\" title=\"Qt高级绘图\"></a>Qt高级绘图</h1><p>在这篇文章中，我们将会介绍Qt中的高级绘制技术，并了解如何使用它们来实现自定义的绘制和渲染。Qt提供了一些专业级别的API来进行绘图操作，可以创建矢量图形或者像素颜色（bitmap）图形。</p>\n<h2 id=\"QPainter绘图框架\"><a href=\"#QPainter绘图框架\" class=\"headerlink\" title=\"QPainter绘图框架\"></a>QPainter绘图框架</h2><p>Qt中最常用的绘制API是QPainter类。它可以用于将几何形状、图像和文本等内容绘制到窗口或Widge上。</p>\n<p>以下是一个简单的例子，展示如何使用QPainter在QWidget上绘制一条直线：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CustomWidget::paintEvent</span><span class=\"params\">(QPaintEvent* event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawLine</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先，我们重载QWidget的paintEvent()函数，在其参数event中派生一个QPainter对象，然后使用drawLine()函数在CustomWidget委托的窗口上绘制一条直线。</p>\n<h2 id=\"手动绘画：绘制基本图元\"><a href=\"#手动绘画：绘制基本图元\" class=\"headerlink\" title=\"手动绘画：绘制基本图元\"></a>手动绘画：绘制基本图元</h2><p>通过手动绘制，我们可以创建自定义的图形界面，通常需要使用以下的基本图形元素：线条、多边形、椭圆、弧形和文字等。</p>\n<p>例如，下面是一个绘制圆形和矩形的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CustomWidget::paintEvent</span><span class=\"params\">(QPaintEvent* event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">    painter.<span class=\"built_in\">setBrush</span>(<span class=\"built_in\">QBrush</span>(Qt::black));</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawEllipse</span>(<span class=\"built_in\">QRectF</span>(<span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\">    painter.<span class=\"built_in\">drawRect</span>(<span class=\"built_in\">QRectF</span>(<span class=\"number\">80</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们重载QWidget的paintEvent()函数，并使用QPainter类在CustomWidget委托的窗口上绘制了一个圆和矩形。注意：由于Qt计算尺寸是采用浮点类型的矩形标准，我们使用QRectF来定义矩形。</p>\n<h2 id=\"高级绘图：OpenGL\"><a href=\"#高级绘图：OpenGL\" class=\"headerlink\" title=\"高级绘图：OpenGL\"></a>高级绘图：OpenGL</h2><p>除了Qt自带的绘图API，Qt还支持OpenGL，通常可用于高性能、多次运动的环境中，如游戏或数据科学等。</p>\n<p>例如，以下代码展示了如何在QWidget上绘制三角形（当OpenGL开启时）：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CustomWidget::paintEvent</span><span class=\"params\">(QPaintEvent* event)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> QT_OPENGL_SUPPORT</span></span><br><span class=\"line\">    QOpenGLWidget* widget = <span class=\"keyword\">new</span> <span class=\"built_in\">QOpenGLWidget</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    widget -&gt;<span class=\"built_in\">makeCurrent</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glBegin</span>(GL_TRIANGLES);</span><br><span class=\"line\">    <span class=\"built_in\">glVertex2f</span>(<span class=\"number\">-1.0f</span>,<span class=\"number\">-0.5f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glVertex2f</span>( <span class=\"number\">1.0f</span>,<span class=\"number\">-0.5f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glVertex2f</span>( <span class=\"number\">0.0f</span>, <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glEnd</span>();</span><br><span class=\"line\">    <span class=\"built_in\">glFlush</span>();  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用QPainter API 绘制其他内容</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们创建了一个QOpenGLWidget对象，并调用它的makeCurrent()方法获取OpenGL渲染环境。</p>\n<p>接着，我们使用OpenGL API绘制三角形，并调用glFlush()函数刷新缓冲区来呈现图像。</p>\n<p>在不支持OpenGL的情况下（如运行在低端硬件或嵌入式设备上），我们可以使用QPainter API替代OpenGL的功能，或者提供本地CPU的软件渲染方式。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Qt提供了多种高级绘制技术，可以帮助我们实现精美的UI界面和高性能的数据可视化。通过手动绘图和OpenGL，我们可以创造出令人惊叹的艺术作品和复杂的3D场景展示。</p>\n","count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qt%E9%AB%98%E7%BA%A7%E7%BB%98%E5%9B%BE\"><span class=\"toc-text\">Qt高级绘图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QPainter%E7%BB%98%E5%9B%BE%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">QPainter绘图框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E7%BB%98%E7%94%BB%EF%BC%9A%E7%BB%98%E5%88%B6%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%85%83\"><span class=\"toc-text\">手动绘画：绘制基本图元</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E7%BB%98%E5%9B%BE%EF%BC%9AOpenGL\"><span class=\"toc-text\">高级绘图：OpenGL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","data":[]}