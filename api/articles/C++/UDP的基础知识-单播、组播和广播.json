{"title":"UDP的基础知识-单播、组播和广播","uid":"bfa7a2b6ebbeca6f6d16afb84bd5fd2a","slug":"C++/UDP的基础知识-单播、组播和广播","date":"2023-05-12T05:52:41.000Z","updated":"2023-05-19T05:34:19.701Z","comments":true,"path":"api/articles/C++/UDP的基础知识-单播、组播和广播.json","keywords":null,"cover":null,"content":"<h2 id=\"UDP的基础知识\"><a href=\"#UDP的基础知识\" class=\"headerlink\" title=\"UDP的基础知识\"></a>UDP的基础知识</h2><p>UDP（User Datagram Protocol）是一种无连接协议，它将数据报文发送出去，由接收端来进行处理。UDP不提供可靠性，也不保证数据的正确性和顺序。但是，UDP具有较低的延迟和较少的开销。在网络游戏、视频流传输、DNS等应用中广泛使用。</p>\n<p>UDP使用IP协议来传输数据，每个UDP数据包被封装在一个IP数据包中并通过网络的其他节点进行路由。UDP使用端口来标识不同应用程序之间的通信，并为每个UDP数据包提供源端口和目的端口。源端口和目标端口的结合形成了一个套接字（socket），套接字可以唯一标识两个应用程序之间的单独的会话。</p>\n<h2 id=\"单播\"><a href=\"#单播\" class=\"headerlink\" title=\"单播\"></a>单播</h2><p><strong>单播（Unicast）</strong> 是一对一通信模式，在这种模式下，一个发送者向一个接收者发送数据包。单播通过以下程序示例实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个IPv4 UDP套接字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> sockfd = <span class=\"built_in\">socket</span>(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造服务器地址</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> server_addr;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;server_addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = <span class=\"built_in\">htons</span>(<span class=\"number\">8888</span>);</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = <span class=\"built_in\">inet_addr</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">    <span class=\"type\">char</span> buf[] = <span class=\"string\">&quot;Hello, this is a unicast message!&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sendto</span>(sockfd, buf, <span class=\"built_in\">strlen</span>(buf), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;server_addr, <span class=\"built_in\">sizeof</span>(server_addr));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 关闭套接字</span></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sockfd);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的程序中，我们使用<code>socket</code>函数创建了一个IPv4 UDP套接字，并使用<code>sendto</code>函数向指定的服务器IP地址和端口发送数据包。</p>\n<h2 id=\"组播\"><a href=\"#组播\" class=\"headerlink\" title=\"组播\"></a>组播</h2><p>组播是一种用于在网络中向多个接收方同时传输数据的通信方式。在UDP协议中，组播使用特定的IP地址范围（224.0.0.0 - 239.255.255.255）进行标识。发送方通过将数据包发送到组播地址，而不是单独的目标地址，可以将数据传输给一组接收方。</p>\n<p>组播需要使用专门的协议支持，如IGMP（Internet Group Management Protocol），以便确定哪些接收方对该组播感兴趣，并将数据包路由到正确的接收方。</p>\n<p>在C++中使用UDP进行组播的示例代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PORT 8888</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GROUP <span class=\"string\">&quot;239.0.0.1&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> addr;</span><br><span class=\"line\">    <span class=\"type\">int</span> sock, cnt;</span><br><span class=\"line\">    <span class=\"type\">char</span> message[] = <span class=\"string\">&quot;Hello, multicast!&quot;</span>;</span><br><span class=\"line\">    sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sock &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(addr));</span><br><span class=\"line\">    addr.sin_family = AF_INET;</span><br><span class=\"line\">    addr.sin_addr.s_addr = <span class=\"built_in\">inet_addr</span>(GROUP);</span><br><span class=\"line\">    addr.sin_port = <span class=\"built_in\">htons</span>(PORT);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt = <span class=\"built_in\">sendto</span>(sock, message, <span class=\"built_in\">sizeof</span>(message), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;addr, <span class=\"built_in\">sizeof</span>(addr));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;sendto&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，使用<code>socket()</code>函数创建一个UDP套接字并指定组播的IP地址和端口号。发送方通过<code>sendto()</code>函数将数据包发送到组播地址，并以一定的时间间隔重复执行此操作。</p>\n<h2 id=\"广播\"><a href=\"#广播\" class=\"headerlink\" title=\"广播\"></a>广播</h2><p>广播是另一种用于向一组接收方传输数据的通信方式，在网络中向同一子网中的所有主机发送数据包。在IPv4网络中，广播使用特殊的IP地址（255.255.255.255）进行标识。</p>\n<p>在C++中使用UDP进行广播的示例代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PORT 8888</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BROADCAST <span class=\"string\">&quot;255.255.255.255&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> addr;</span><br><span class=\"line\">    <span class=\"type\">int</span> sock, cnt;</span><br><span class=\"line\">    <span class=\"type\">char</span> message[] = <span class=\"string\">&quot;Hello, broadcast!&quot;</span>;</span><br><span class=\"line\">    sock = <span class=\"built_in\">socket</span>(AF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sock &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;socket&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;addr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(addr));</span><br><span class=\"line\">    addr.sin_family = AF_INET;</span><br><span class=\"line\">    addr.sin_addr.s_addr = <span class=\"built_in\">inet_addr</span>(BROADCAST);</span><br><span class=\"line\">    addr.sin_port = <span class=\"built_in\">htons</span>(PORT);</span><br><span class=\"line\">    <span class=\"type\">int</span> optval = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setsockopt</span>(sock, SOL_SOCKET, SO_BROADCAST, &amp;optval, <span class=\"built_in\">sizeof</span>(optval));</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt = <span class=\"built_in\">sendto</span>(sock, message, <span class=\"built_in\">sizeof</span>(message), <span class=\"number\">0</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;addr, <span class=\"built_in\">sizeof</span>(addr));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;sendto&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(sock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，使用<code>socket()</code>函数创建一个UDP套接字并指定广播的IP地址和端口号。发送方通过<code>setsockopt()</code>函数将<code>SO_BROADCAST</code>选项设置为启用广播功能，并使用<code>sendto()</code>函数将数据包发送到广播地址，并以一定的时间间隔重复执行此操作。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单播、组播和广播都是UDP协议中常用的通信方式。单播适用于点对点的通信，组播和广播适用于向多个接收方传输数据。其中组播需要使用IGMP协议支持，并使用特定的IP地址范围进行标识；广播需要使用特殊的IP地址（255.255.255.255）进行标识，并启用<code>SO_BROADCAST</code>选项。</p>\n<p>在C++中，可以使用<code>socket()</code>函数创建UDP套接字，并使用<code>sendto()</code>函数将数据包发送到目标地址、组播地址或广播地址，以实现单播、组播和广播功能。</p>\n","text":"UDP的基础知识UDP（User Datagram Protocol）是一种无连接协议，它将数据报文发送出去，由接收端来进行处理。UDP不提供可靠性，也不保证数...","permalink":"/post/C++/UDP的基础知识-单播、组播和广播","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":2,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"网络通信","slug":"网络通信","count":2,"path":"api/tags/网络通信.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UDP%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">UDP的基础知识</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E6%92%AD\"><span class=\"toc-text\">单播</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E6%92%AD\"><span class=\"toc-text\">组播</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%BF%E6%92%AD\"><span class=\"toc-text\">广播</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Qt多进程通信","uid":"dc668aa3f9d7827fe3cbf73af04ed4c5","slug":"Qt/进阶教程/Qt多进程通信","date":"2023-05-13T03:00:12.000Z","updated":"2023-05-19T05:34:19.751Z","comments":true,"path":"api/articles/Qt/进阶教程/Qt多进程通信.json","keywords":null,"cover":null,"text":"Qt多进程通信在许多应用程序中，多进程通信（IPC）是必不可少的。例如，一个应用程序可能需要将数据从一个进程传递到另一个进程，或者需要在两个进程之间同步信息。Q...","permalink":"/post/Qt/进阶教程/Qt多进程通信","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"vs2017编译FFmpeg","uid":"8f33bd7fed458691a6f6e03ce02f258a","slug":"其他/vs2017编译FFmpeg","date":"2023-05-11T11:52:25.000Z","updated":"2024-11-11T08:35:33.984Z","comments":true,"path":"api/articles/其他/vs2017编译FFmpeg.json","keywords":null,"cover":[],"text":"编译环境 操作系统: Window10 64位 需要下载的文件 vs2017 MSYS2 编译步骤安装vs2017 网络上很多安装教程，这里不再赘述，自行安装 ...","permalink":"/post/其他/vs2017编译FFmpeg","photos":[],"count_time":{"symbolsCount":"60k","symbolsTime":"54 mins."},"categories":[{"name":"音视频编码","slug":"音视频编码","count":1,"path":"api/categories/音视频编码.json"}],"tags":[{"name":"FFmpeg","slug":"FFmpeg","count":2,"path":"api/tags/FFmpeg.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}