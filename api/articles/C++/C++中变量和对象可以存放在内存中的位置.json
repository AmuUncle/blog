{"title":"C++中变量和对象可以存放在内存中的位置","uid":"3faf2e95846c995629df56586598456a","slug":"C++/C++中变量和对象可以存放在内存中的位置","date":"2018-05-12T05:52:41.000Z","updated":"2023-06-05T07:41:06.629Z","comments":true,"path":"api/articles/C++/C++中变量和对象可以存放在内存中的位置.json","keywords":null,"cover":null,"content":"<p>在 C++ 中，变量和对象可以存放在各种不同的内存位置，具体取决于它们的定义方式、生命周期及其类型等因素。以下是常见的 C++ 变量和对象所存放的位置：</p>\n<ol>\n<li><p>自动变量：自动变量是指在程序中使用作用域声明的变量（即局部变量），其值只在相应作用域内有效。这些变量通常被分配在堆栈上（Stack Memory）中，并在函数运行时动态地分配和释放。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">example</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">10</span>; <span class=\"comment\">// 在堆栈中分配整数变量x</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态变量：静态变量属于所有实例共享的变量，它们一般在程序开始执行时静态地分配到一个规定的内存位置。全局变量和函数内 static 变量都属于静态变量。全局变量会被分配到数据段中（Data Segment），而函数内 static 变量会被分配到全局或静态变量所在的内存区域中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> globalVar; <span class=\"comment\">// 分配在数据段中的全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">example</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> localVar; <span class=\"comment\">// 函数内静态变量</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动态分配的变量：动态变量是在程序运行期间动态地分配和释放的，通常是由 <code>new</code> 和 <code>delete</code> 或者 <code>malloc()</code> 和 <code>free()</code> 等操作所创建、分配和释放的。动态变量通常被分配到堆（Heap Memory）中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>* ptr = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 动态分配一个整型变量</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> ptr; <span class=\"comment\">// 内存释放</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常量和文本字符串：常量被保存在代码段（Code Segment）、全局数据区（Global Data Area）或只读数据区（Read Only Data Segment）。文本字符串保存在 ++ 程序的可执行文件中，并在程序运行时被加载到内存中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> constantNum = <span class=\"number\">10</span>; <span class=\"comment\">// 定义常量数值</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* str = <span class=\"string\">&quot;hello&quot;</span>; <span class=\"comment\">// 文本字符串在代码段中</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>需要注意的是，C++ 变量所存放的位置不仅取决于它们的类型和定义方式，还可能受到编译器和编译器选项等因素的影响。程序员可以使用调试工具来查看变量的实际内存地址并研究其位置。</p>\n","text":"在 C++ 中，变量和对象可以存放在各种不同的内存位置，具体取决于它们的定义方式、生命周期及其类型等因素。以下是常见的 C++ 变量和对象所存放的位置： 自动变...","permalink":"/post/C++/C++中变量和对象可以存放在内存中的位置","photos":[],"count_time":{"symbolsCount":969,"symbolsTime":"1 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":2,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"网络通信","slug":"网络通信","count":2,"path":"api/tags/网络通信.json"}],"toc":"","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】非阻塞模式下send和recv函数的返回值","uid":"12ad89ee9300bed7e58f0d5f1f9116ca","slug":"转载/网络编程/非阻塞模式下send和recv函数的返回值","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.915Z","comments":true,"path":"api/articles/转载/网络编程/非阻塞模式下send和recv函数的返回值.json","keywords":null,"cover":[],"text":"非阻塞模式下 send 和 recv 函数的返回值我们来总结一下 send 和 recv 函数的各种返回值意义： 返回值 n 返回值含义 大于 0 成功发送 n...","permalink":"/post/转载/网络编程/非阻塞模式下send和recv函数的返回值","photos":[],"count_time":{"symbolsCount":"9.2k","symbolsTime":"8 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"},{"name":"网络编程","slug":"网络编程","count":10,"path":"api/tags/网络编程.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"第16节 MFC之SendMessage和PostMessage","uid":"5ea2af3786de0c1e89d3cfbe74111832","slug":"MFC/第16节-MFC之SendMessage和PostMessage","date":"2017-11-04T15:33:16.000Z","updated":"2023-05-19T05:34:20.890Z","comments":true,"path":"api/articles/MFC/第16节-MFC之SendMessage和PostMessage.json","keywords":null,"cover":[],"text":" 1、PostMessage会将消息压入窗口所在线程的消息队列，然后返回；而SendMessage则不经过消息队列，SendMessage可认为是直接调用了该窗...","permalink":"/post/MFC/第16节-MFC之SendMessage和PostMessage","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}