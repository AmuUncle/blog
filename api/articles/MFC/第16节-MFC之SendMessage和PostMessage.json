{"title":"第16节 MFC之SendMessage和PostMessage","uid":"5ea2af3786de0c1e89d3cfbe74111832","slug":"MFC/第16节-MFC之SendMessage和PostMessage","date":"2017-11-04T15:33:16.000Z","updated":"2023-05-19T05:34:20.890Z","comments":true,"path":"api/articles/MFC/第16节-MFC之SendMessage和PostMessage.json","keywords":null,"cover":[],"content":"<blockquote>\n<p>1、<strong>PostMessage</strong>会将消息压入窗口所在线程的消息队列，然后返回；而SendMessage则不经过消息队列，<strong>SendMessage</strong>可认为是直接调用了该窗口的窗口过程，因此在我们需要获得消息处理后的返回值的时候，就要用到<strong>SendMessage</strong>。<br>    例如：当在程序中指定如下使用：<strong>PostMessage（hWnd, WM_MSG,0,0）</strong>，那么当程序执行到PostMessage的时候，仅将消息WM_MSG压入到创建hWnd所指窗口的那个线程的消息队列，然后程序将继续执行下去，而至于程序什么时候响应该消息，则要看那个线程什么时候得到控制权；<br>    而指定如下使用：<strong>SendMessage（hWnd, WM_MSG,0,0）</strong>，那么当程序执行到该处时，将发生一次跳转：从当前位置，跳转到hWnd的窗口过程中去响应WM_MSG消息，当消息处理结束，窗口过程返回，程序又将从<strong>SendMessage</strong>后面继续执行，当然，我们可以获得窗口过程对该消息的处理结果，也即取<strong>SendMessage</strong>的返回值。（这里只是针对单线程）。</p>\n</blockquote>\n<blockquote>\n<p>2、在多线程应用中，<strong>PostMessage</strong>的用法还是一样，但<strong>SendMessage</strong>则不同了。如果在线程A中向线程B所创建的一个窗口hWndB发送消息<strong>SendMessage（hWndB，WM_MSG，0，0）</strong>，那么系统将会立即将执行权从线程A切换到线程B，然后在线程B中调用hWndB的窗口过程来处理消息，并且在处理完该消息后，执行权仍然在B手中！这个时候，线程A则暂停在<strong>SendMessage</strong>处，等待下次线程A获得执行权后才继续执行，并且仍然可以获得消息处理的结果（返回值）。一般，为了避免死锁，在B中对WM_MSG做出处理之前，要加上：<br>if(InSendMessage()) RelpyMessage(lResult)； 即判断：如果该消息是发自另外一个线程，则立即 RelpyMessage，回复消息，参数lResult即是返回值。而如果是在同一个线程内，则InSendMessage()将会返回FALSE。     —百度知道</p>\n</blockquote>\n<p>总而言之，按我的理解，<strong>SendMessage</strong>和<strong>PostMessage</strong>都是向窗体发送消息的函数，但是<strong>PostMessage</strong>发送完消息立刻返回，不会等待消息结果，但<strong>SendMessage</strong>会等到消息返回结果再执行下一步；</p>\n<p>今天我们通过各例子来试试这两种发送消息的方法；</p>\n<blockquote>\n<p>创建一个界面图标，通过拖动图标到任意的windows窗口上，获取到窗口的句柄，标题，类名；并通过<strong>SendMessage</strong>或<strong>PostMessage</strong>发送消息到该窗口，修改窗口标题或关闭窗口；</p>\n</blockquote>\n<h2 id=\"1-新建项目\"><a href=\"#1-新建项目\" class=\"headerlink\" title=\"1. 新建项目\"></a>1. 新建项目</h2><p>新建一个基于对话框项目“day18”，布局如下，自行处理：<br><img src=\"http://img.blog.csdn.net/20171104224025288?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"2-新建类Cday18Dlg成员变量\"><a href=\"#2-新建类Cday18Dlg成员变量\" class=\"headerlink\" title=\"2. 新建类Cday18Dlg成员变量\"></a>2. 新建类Cday18Dlg成员变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HCURSOR m_hCursor;  //定义一个鼠标的指针</span><br><span class=\"line\">RECT m_rtCtrl;      //图标的大小</span><br><span class=\"line\">BOOL m_bCapturing;   //鼠标捕获</span><br><span class=\"line\">HWND m_hWndDest;   //目标窗口的窗口句柄</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-加载鼠标指针及获取图标大小\"><a href=\"#3-加载鼠标指针及获取图标大小\" class=\"headerlink\" title=\"3.加载鼠标指针及获取图标大小\"></a>3.加载鼠标指针及获取图标大小</h2><p>编辑Cday18Dlg::OnInitDialog()初始化函数，在return之前添加如下两行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_hCursor = LoadCursor(NULL, IDC_SIZEALL);</span><br><span class=\"line\">GetDlgItem(IDC_PIC)-&gt;GetWindowRect(&amp;m_rtCtrl);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-创建鼠标右键点击及释放消息\"><a href=\"#4-创建鼠标右键点击及释放消息\" class=\"headerlink\" title=\"4.创建鼠标右键点击及释放消息\"></a>4.创建鼠标右键点击及释放消息</h2><p>如图，添加OnLButtonDown及OnLButtonUp消息处理函数：<br><img src=\"http://img.blog.csdn.net/20171104225220222?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>编辑OnLButtonDown及OnLButtonUp消息处理函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Cday18Dlg::OnLButtonDown(UINT nFlags, CPoint point)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t// TODO: 在此添加消息处理程序代码和/或调用默认值</span><br><span class=\"line\">\tif (point.x &gt;= m_rtCtrl.left </span><br><span class=\"line\">\t\t&amp;&amp; point.x &lt;= m_rtCtrl.right </span><br><span class=\"line\">\t\t|| point.y &gt;= m_rtCtrl.top </span><br><span class=\"line\">\t\t&amp;&amp; point.y &lt;= m_rtCtrl.bottom)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_bCapturing = TRUE;</span><br><span class=\"line\">\t\tSetCapture(); // 开始捕获鼠标</span><br><span class=\"line\">\t\tSetCursor(m_hCursor);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tCDialogEx::OnLButtonDown(nFlags, point);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码解释：</p>\n<blockquote>\n<p>1.判断鼠标点击的位置是否在图标上；<br>2.若是，则将开始捕获鼠标标志置位真，并且开始捕获鼠标位置；<br>3.将捕获的鼠标位置设置到成员变量m_hCursor；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Cday18Dlg::OnLButtonUp(UINT nFlags, CPoint point)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t// TODO: 在此添加消息处理程序代码和/或调用默认值</span><br><span class=\"line\">\tif (m_bCapturing)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tReleaseCapture();</span><br><span class=\"line\">\t\tm_bCapturing = FALSE;</span><br><span class=\"line\">\t\tPOINT pt = point;</span><br><span class=\"line\">\t\tClientToScreen(&amp;pt);</span><br><span class=\"line\">\t\tm_hWndDest = ::WindowFromPoint(pt);</span><br><span class=\"line\">\t\tTCHAR szBuf[MAX_PATH] = &#123;0&#125;;</span><br><span class=\"line\">\t\t_stprintf(szBuf,_T(&quot;0x%.8X&quot;),m_hWndDest);</span><br><span class=\"line\">\t\tSetDlgItemText(IDC_EDIT_DESTHWND,szBuf);</span><br><span class=\"line\">\t\tGetClassName(m_hWndDest,szBuf,MAX_PATH);</span><br><span class=\"line\">\t\tSetDlgItemText(IDC_EDIT_DESTCLASS,szBuf);</span><br><span class=\"line\">\t\t::SendMessage(m_hWndDest,WM_GETTEXT,MAX_PATH,(LPARAM)szBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSetDlgItemText(IDC_EDIT_DESTTEXT,szBuf);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCDialogEx::OnLButtonUp(nFlags, point);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码解释：</p>\n<blockquote>\n<p>1.判断是否在捕获鼠标；<br>2.若是，释放鼠标捕获，获取当前鼠标的位置；<br>3.通过当前鼠标的位置获取到当前位置的窗口句柄；<br>4.分别获取该窗口的句柄，类名，标题；</p>\n</blockquote>\n<p>效果图：<br><img src=\"http://img.blog.csdn.net/20171104230232355?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20171104230242358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"5-实现修改目标窗口标题\"><a href=\"#5-实现修改目标窗口标题\" class=\"headerlink\" title=\"5.实现修改目标窗口标题\"></a>5.实现修改目标窗口标题</h2><p>双击“修改标题”按钮，编辑其clicked方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Cday18Dlg::OnBnClickedBtnSettext()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t// TODO: 在此添加控件通知处理程序代码</span><br><span class=\"line\">\tCString strText;</span><br><span class=\"line\">\tGetDlgItemText(IDC_EDIT_DESTTEXT,strText);</span><br><span class=\"line\">\t::SendMessage(m_hWndDest,WM_SETTEXT,0,(LPARAM)(LPCTSTR)strText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码解释：</p>\n<blockquote>\n<p>1.获取文本框中的标题值；<br>2.通过SendMessage方法发送WM_SETTEXT消息修改目标窗口的标题</p>\n</blockquote>\n<p>效果图：<br><img src=\"http://img.blog.csdn.net/20171104230641050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"6-实现关闭目标窗口\"><a href=\"#6-实现关闭目标窗口\" class=\"headerlink\" title=\"6.实现关闭目标窗口\"></a>6.实现关闭目标窗口</h2><p>双击“关闭标题”按钮，编辑其clicked方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void Cday18Dlg::OnBnClickedBtnSettext2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t// TODO: 在此添加控件通知处理程序代码</span><br><span class=\"line\">\t::SendMessage(m_hWndDest,WM_CLOSE,0,0);</span><br><span class=\"line\">\t//::PostMessage(m_hWndDest,WM_CLOSE,0,0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码解释：</p>\n<blockquote>\n<p>1.通过SendMessage方法发送WM_CLOSE消息来关闭目标窗口；</p>\n</blockquote>\n<p>上面我们都是使用SendMessage方法来发送消息，其实我们也可以把SendMessage全部替换成PostMessage，我们来看看效果：<br><img src=\"http://img.blog.csdn.net/20171104231231467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我们可以看“窗口标题”获取的值是不对的，这是为什么？我们来看一下获取标题的这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReleaseCapture();</span><br><span class=\"line\">m_bCapturing = FALSE;</span><br><span class=\"line\">POINT pt = point;</span><br><span class=\"line\">ClientToScreen(&amp;pt);</span><br><span class=\"line\">m_hWndDest = ::WindowFromPoint(pt);</span><br><span class=\"line\">TCHAR szBuf[MAX_PATH] = &#123;0&#125;;</span><br><span class=\"line\">_stprintf(szBuf,_T(&quot;0x%.8X&quot;),m_hWndDest);</span><br><span class=\"line\">SetDlgItemText(IDC_EDIT_DESTHWND,szBuf);</span><br><span class=\"line\">GetClassName(m_hWndDest,szBuf,MAX_PATH);</span><br><span class=\"line\">SetDlgItemText(IDC_EDIT_DESTCLASS,szBuf);</span><br><span class=\"line\">::PostMessage(m_hWndDest,WM_GETTEXT,MAX_PATH,(LPARAM)szBuf);</span><br><span class=\"line\">SetDlgItemText(IDC_EDIT_DESTTEXT,szBuf);</span><br></pre></td></tr></table></figure>\n<p>我们看到前面获取窗口句柄，类名都是没问题的，但是到了最后获取标题时出了问题；<br>那是因为PostMessage是不会等待消息的返回结果，发送之后直接往下运行，这时szBuf的值还是前面获取的“窗口类名”，所以导致最后的“窗口标题”内容获取出错，这也很好的证明PostMessage和SendMessage的区别；<br>还有“修改标题”及“关闭窗口”按钮不管是PostMessage和SendMessage方法都不会出错，那是因为我们在这两个按钮方法中都不需要消息的返回值，所以在我们以后的实际使用中一定要考虑清楚需要使用哪种发送消息方法；</p>\n<h3 id=\"动态效果图：\"><a href=\"#动态效果图：\" class=\"headerlink\" title=\"动态效果图：\"></a>动态效果图：</h3><p><img src=\"http://img.blog.csdn.net/20171104233147214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjU1NDkzMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>附MFC消息分类及说明：</p>\n<h3 id=\"窗口消息\"><a href=\"#窗口消息\" class=\"headerlink\" title=\"窗口消息\"></a>窗口消息</h3><blockquote>\n<p>WM_CREATE           创建一个窗口 WM_DESTROY          当一个窗口被破坏时发送 WM_MOVE<br>移动一个窗口 WM_SIZE             改变一个窗口的大小 WM_ACTIVATE<br>一个窗口被激活或失去激活状态 WM_SETFOCUS         一个窗口获得焦点 WM_KILLFOCUS<br>一个窗口失去焦点 WM_ENABLE           一个窗口改变成Enable状态 WM_SETREDRAW<br>设置窗口是否能重画 WM_SETTEXT          应用程序发送此消息来设置一个窗口的文本 WM_GETTEXT<br>应用程序发送此消息来复制对应窗口的文本到缓冲区 WM_GETTEXTLENGTH    得到与一个窗口有关的文本的长度（不包含空字符）<br>WM_PAINT            要求一个窗口重画自己 WM_CLOSE<br>当一个窗口或应用程序要关闭时发送一个信号 WM_QUERYENDSESSION<br>当用户选择结束对话框或程序自己调用ExitWindows函数 WM_QUIT             用来结束程序运行<br>WM_QUERYOPEN        当用户窗口恢复以前的大小位置时，把此消息发送给某个图标 WM_ERASEBKGND<br>当窗口背景必须被擦除时（例在窗口改变大小时） WM_SYSCOLORCHANGE   当系统颜色改变时，发送此消息给所有顶级窗口<br>WM_ENDSESSION       当系统进程发出WM_QUERYENDSESSION消息后，此消息发送给应用程序，通知它对话是否结束<br>WM_SHOWWINDOW       当隐藏或显示窗口是发送此消息给这个窗口 WM_ACTIVATEAPP<br>发此消息给应用程序哪个窗口是激活的，哪个是非激活的 WM_FONTCHANGE       当系统的字体资源库变化时发送此消息给所有顶级窗口<br>WM_TIMECHANGE       当系统的时间变化时发送此消息给所有顶级窗口 WM_CANCELMODE<br>发送此消息来取消某种正在进行的摸态（操作） WM_SETCURSOR<br>如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口 WM_MOUSEACTIVATE<br>当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口 WM_CHILDACTIVATE<br>发送此消息给MDI子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小 WM_QUEUESYNC<br>此消息由基于计算机的训练程序发送，通过 WH_JOURNALPALYBACK 的 hook 程序分离出用户输入消息<br>WM_GETMINMAXINFO    此消息发送给窗口当它将要改变大小或位置 WM_PAINTICON<br>发送给最小化窗口当它图标将要被重画 WM_ICONERASEBKGND   此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画<br>WM_NEXTDLGCTL       发送此消息给一个对话框程序去更改焦点位置 WM_SPOOLERSTATUS<br>每当打印管理列队增加或减少一条作业时发出此消息 WM_DRAWITEM<br>当button，combobox，listbox，menu的可视外观改变时发送 WM_MEASUREITEM      当button,<br>combo box, list box, list view control, or menu item 被创建时<br>WM_VKEYTOITEM<br>此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息 WM_CHARTOITEM<br>此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息 WM_SETFONT<br>当绘制文本时程序发送此消息得到控件要用的颜色 WM_GETFONT          应用程序发送此消息得到当前控件绘制文本的字体<br>WM_SETHOTKEY        应用程序发送此消息让一个窗口与一个热键相关连 WM_GETHOTKEY<br>应用程序发送此消息来判断热键与某个窗口是否有关联 WM_QUERYDRAGICON<br>此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标<br>WM_COMPAREITEM      发送此消息来判定 combobox 或 listbox 新增加的项的相对位置<br>WM_COMPACTING       显示内存已经很少了 WM_WINDOWPOSCHANGING<br>发送此消息给那个窗口的大小和位置将要被改变时，来调用 setwindowpos 函数或其它窗口管理函数<br>WM_WINDOWPOSCHANGED 发送此消息给那个窗口的大小和位置已经被改变时，来调用setwindowpos函数或其它窗口管理函数<br>WM_POWER            当系统将要进入暂停状态时发送此消息 WM_COPYDATA<br>当一个应用程序传递数据给另一个应用程序时发送此消息 WM_CANCELJOURNA     当某个用户取消程序日志激活状态，提交此消息给程序<br>WM_NOTIFY           当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口<br>WM_INPUTLANGCHANGEREQUEST  当用户选择某种输入语言，或输入语言的热键改变 WM_INPUTLANGCHANGE<br>当平台现场已经被改变后发送此消息给受影响的最顶级窗口 WM_TCARD            当程序已经初始化 windows<br>帮助例程时发送此消息给应用程序 WM_HELP<br>此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口<br>WM_USERCHANGED<br>当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体设置信息，在用户更新设置时系统马上发送此消息<br>WM_NOTIFYFORMAT     公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构<br>WM_CONTEXTMENU      当用户某个窗口中点击了一下右键就发送此消息给这个窗口 WM_STYLECHANGING<br>当调用SETWINDOWLONG函数将要改变一个或多个 窗口的风格时发送此消息给那个窗口 WM_STYLECHANGED     当调用<br>SETWINDOWLONG 函数一个或多个 窗口的风格后发送此消息给那个窗口 WM_DISPLAYCHANGE<br>当显示器的分辨率改变后发送此消息给所有的窗口 WM_GETICON<br>此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄 WM_SETICON<br>程序发送此消息让一个新的大图标或小图标与某个窗口关联 WM_NCCREATE<br>当某个窗口第一次被创建时，此消息在WM_CREATE消息发送前发送 WM_NCDESTROY<br>此消息通知某个窗口，非客户区正在销毁 WM_NCCALCSIZE       当某个窗口的客户区域必须被核算时发送此消息<br>WM_NCHITTEST        移动鼠标，按住或释放鼠标时发生 WM_NCPAINT<br>程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时 WM_NCACTIVATE<br>此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态 WM_GETDLGCODE<br>发送此消息给某个与对话框程序关联的控件。正常情况下，windows 处理所有输入到此控件的箭头键和 TAB 键。通常响应<br>WM_GETDLGCODE 消息，应用程序可以控制一个特定类型的输入和处理这个输入<br>                     WM_NCMOUSEMOVE      当光标在一个窗口的非客户区内移动时发送此消息给这个窗口。非客户区为：窗体的标题栏及窗体的边框 WM_NCLBUTTONDOWN<br>当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息 WM_NCLBUTTONUP<br>当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息 WM_NCLBUTTONDBLCLK<br>当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息 WM_NCRBUTTONDOWN<br>当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息 WM_NCRBUTTONUP<br>当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息 WM_NCRBUTTONDBLCLK<br>当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息 WM_NCMBUTTONDOWN<br>当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息 WM_NCMBUTTONUP<br>当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息 WM_NCMBUTTONDBLCLK<br>当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息 WM_KEYFIRST         WM_KEYDOWN 按下一个键<br>WM_KEYUP            释放一个键 WM_CHAR             按下某键，并已发出WM_KEYDOWN，<br>WM_KEYUP消息 WM_DEADCHAR         当用 translatemessage 函数翻译 WM_KEYUP<br>消息时发送此消息给拥有焦点的窗口 WM_SYSKEYDOWN       当用户按住 ALT 键同时按下其它键时提交此消息给拥有焦点的窗口<br>WM_SYSKEYUP         当用户释放一个键同时 ALT 键还按着时提交此消息给拥有焦点的窗口 WM_SYSCHAR<br>当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口 WM_SYSDEADCHAR<br>当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口 WM_INITDIALOG<br>在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务 WM_COMMAND<br>当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译 WM_SYSCOMMAND<br>当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息 WM_TIMER            发生了定时器事件<br>WM_HSCROLL          当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件<br>WM_VSCROLL          当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件<br>WM_INITMENU<br>当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单 WM_INITMENUPOPUP<br>当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部 WM_MENUSELECT<br>当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口） WM_MENUCHAR<br>当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者 WM_ENTERIDLE<br>当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待<br>WM_CTLCOLORMSGBOX   在 windows<br>绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色<br>WM_CTLCOLOREDIT     当一个编辑型控件将要被绘制时发送此消息给它的父窗口<br>通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色 WM_CTLCOLORLISTBOX<br>当一个列表框控件将要被绘制前发送此消息给它的父窗口<br>通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色 WM_CTLCOLORBTN<br>当一个按钮控件将要被绘制时发送此消息给它的父窗口 通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色<br>WM_CTLCOLORDLG      当一个对话框控件将要被绘制前发送此消息给它的父窗口<br>通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色 WM_CTLCOLORSCROLLBAR<br>当一个滚动条控件将要被绘制时发送此消息给它的父窗口 通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色<br>WM_CTLCOLORSTATIC   当一个静态控件将要被绘制时发送此消息给它的父窗口 通过响应这条消息，所有者窗口可以<br>通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色 WM_MOUSEFIRST       移动鼠标时发生<br>WM_MOUSEMOVE        移动鼠标时发生，同WM_MOUSEFIRST WM_LBUTTONDOWN      按下鼠标左键<br>WM_LBUTTONUP        释放鼠标左键 WM_LBUTTONDBLCLK    双击鼠标左键 WM_RBUTTONDOWN<br>按下鼠标右键 WM_RBUTTONUP        释放鼠标右键 WM_RBUTTONDBLCLK    双击鼠标右键<br>WM_MBUTTONDOWN      按下鼠标中键 WM_MBUTTONUP        释放鼠标中键 WM_MBUTTONDBLCLK<br>双击鼠标中键 WM_MOUSEWHEEL       当鼠标轮子转动时发送此消息个当前有焦点的控件</p>\n</blockquote>\n<h3 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h3><blockquote>\n<p>BM_CLICK    按钮被点击消息  BM_GETCHECK 可用于复选框&#x2F;单选框。查看是否被选择了  BM_GETSTATE<br>发送此消息，可返回 button 的状态，如是否被选择；是否可用（不可用就变灰了）  BM_SETCHECK<br>如果已经选择了，发送此消息后，变为未选择，就是那个钩没被勾上 BM_SETSTATE 设置 button 被点击状态。</p>\n</blockquote>\n<h3 id=\"组合框\"><a href=\"#组合框\" class=\"headerlink\" title=\"组合框\"></a>组合框</h3><blockquote>\n<p>CB_ADDSTRING       添加字符串到组合框。  CB_DELETESTRING    删除组合框中的条目，即 item 。<br>CB_GETCOUNT        得到组合框条目 item 的数目。  CB_GETCURSEL<br>返回组合框中被选条目在组合框中的位置，第一条为 0。<br>                   如果没有条目或出错，则返回 -1 。 CB_GETDROPPEDSTATE 发送此消息，可判断组合框的下拉列表是否下拉。<br>                   如果是，返回非零值，不是，则返回 0 。 CB_GETLBTEXT       得到组合框的条目文本。返回值是这个文本的长度。  CB_GETLBTEXTLEN    返回值是条目的文本的长度。<br>CB_INSERTSTRING    插入字符串条目到组合框中。  CB_RESETCONTENT    清空组合框所有条目。<br>CB_SETCURSEL       设置组合框被选条目。  CB_SHOWDROPDOWN    让组合框的下拉列表下拉，即显出所有条目。</p>\n</blockquote>\n<h3 id=\"编辑框\"><a href=\"#编辑框\" class=\"headerlink\" title=\"编辑框\"></a>编辑框</h3><blockquote>\n<p>EM_CANUNDO             决定上一次操作是否可以 undo（撤消操作）。如果可以，则可发送 EM_UNDO 消息<br>EM_GETFIRSTVISIBLELINE 在多行控件中，找到最上层的可见的行号。此行号是相对于所有行的。<br>EM_GETPASSWORDCHAR     返回密码框的字符集，即查看密码。  EM_GETSEL<br>返回在可编辑控件中，被选择（高亮选择）的字符集的起点和终点的位置，用 SendMessage 的 wParam<br>参数返回起点位置，lParam 返回终点位置  EM_REPLACESEL<br>用不同的字符串替换可编辑控件中的字符串。如果可编辑控件中没有字符串，则此消息变为添加字符串。如果 wParam 为<br>TRUE，则本次操作允许撤消，FALSE 禁止撤消。  EM_SETPASSWORDCHAR     在可编辑控件中设置密码字符集，即用 *<br>代替  EM_UNDO                发送操作撤消消息。    EM_GETLINE<br>获取编辑控件中输入的文字。 EM_LINEFROMCHAR        检索指定字符索引（索引编号从编辑框的第一个字符开始）所在的行索引<br>EM_LINEINDEX           在多行编辑控件中，检索某行首字符在编辑控件中的索引 EM_ERRSPACE<br>编辑控件不能分配足够的内存来满足特定的要求。<br>                       编辑控件的父窗口通过 WM_COMMAND 消息收到此消息。 EM_LIMITTEXT           设置编辑框用户可输入的最大字符数。wParam 为字符数，lParam 不使用(0L)</p>\n</blockquote>\n<h3 id=\"IP-地址控件\"><a href=\"#IP-地址控件\" class=\"headerlink\" title=\"IP 地址控件\"></a>IP 地址控件</h3><blockquote>\n<p>IPM_CLEARADDRESS       清除 IP 地址控件（IP Address control）的内容<br>IPM_GETADDRESS         从 IP 地址控件获得存储在它中的 IP 地址信息 IPM_ISBLANK<br>决定 IP 地址控件是否可以为空值。即 127.0.0.1 之类的地址为空  IPM_SETADDRESS         在 IP<br>地址控件中设置 IP 地址     IPM_SETFOCUS           在 IP 地址控件中，当需要输入 IP 地址时，<br>使之获得键盘输入焦点  IPM_SETRANGE           设置输入 IP 地址的有效范围</p>\n</blockquote>\n<h3 id=\"MCI（Media-Control-Interface\"><a href=\"#MCI（Media-Control-Interface\" class=\"headerlink\" title=\"MCI（Media Control Interface)\"></a>MCI（Media Control Interface)</h3><blockquote>\n<p>MM_MCINOTIFY           该 MM_MCINOTIFY 消息通知应用程序，一个 MCI 设备已完成操作。只有设置了<br>MCI_NOTIFY 标志时，MCI 设备才发送此消息。</p>\n</blockquote>\n<h3 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h3><blockquote>\n<p>WM_COMMAND     当用户选择菜单中的项目后,将向窗体发送此消息. 窗体收到此消息后,再决定下一个行为。 WM_INITMENU<br>当菜单准备显示前,向窗体发送此消息, 窗体将初始化菜单项。  WM_SYSCOMMAND  向窗体发送用户点击系统菜单消息.<br>窗体将响应这个消息 ,决定下个行为。</p>\n</blockquote>\n<h3 id=\"列表框\"><a href=\"#列表框\" class=\"headerlink\" title=\"列表框\"></a>列表框</h3><blockquote>\n<p>LB_ADDSTRING        在条目中添加字符串  LB_DELETESTRING     删除一个条目. 条目序号是从 0<br>开始的.  LB_GETCOUNT         得到条目总数.  LB_GETCURSEL        得到单选的列表框选项条目的序号<br>LB_GETSEL           判断列表框的条目是否被选上, 如果选上了,则返回 &gt;0 的值。否则返回 0 ,表示用户没选择条目<br>LB_GETSELCOUNT      获得可多选的列表框中被选择的条目数  LB_GETSELITEMS<br>返回可多选的列表框中被选条目的序号，可返回数组 LB_GETTEXT          得到列表框中的一个条目的文本<br>LB_GETTEXTLEN       得到列表框中的一个条目的文本的长度  LB_INSERTSTRING<br>在列表框中插入一个条目。如果成功，将返回插入后此条目的序号。  LB_SETCURSEL<br>对单选的列表框，设定用户选择条目的具体值  LB_SETSEL           对多选的列表框，设定用户选择条目的具体值<br>LB_RESETCONTENT     从列表框删除所有项目，wParam 和 lParam 参数均不使用（为 0）<br>LB_SETHORIZONTALEXTENT<br>设定列表框水平滚动范围。如果列表框宽度小于此值，则水平滚动条显现；如果列表框宽度大于等于此值，则水平滚动条是隐藏的。wParam<br>为所设的水平滚动范围（像素），lParam 不使用，为 0。没有返回值 注意：LB_SETHORIZONTALEXTENT<br>消息要起作用，列表框必须定义 WS_HSCROLL 样式 LB_SETTABSTOPS<br>在列表框中设置制表位位置（即每列间距）为了应对 LB_SETTABSTOPS 消息，列表框必须已经拥有 LBS_USETABSTOPS<br>样式。 wParam 指定制表位数量，lParam 为制表位整数数组（各列之间间隔，不必相等）如果 wParam 是 0，lParam 为<br>NULL，默认制表位是 2 个对话框模板单位。如果 wParam 是 1，制表位为 lParam 指定的距离。如果超过 1，制表位将被设置为<br>lParam 中的每个值（wParam 指定数量）</p>\n</blockquote>\n<h3 id=\"鼠标\"><a href=\"#鼠标\" class=\"headerlink\" title=\"鼠标\"></a>鼠标</h3><blockquote>\n<p>WM_LBUTTONDBLCLK  当鼠标在一个窗体范围内时，告诉此窗体鼠标左键已双击，返回值 0  WM_LBUTTONDOWN<br>当鼠标在一个窗体范围内时，告诉此窗体鼠标左键已点击，返回值 0  WM_LBUTTONUP<br>当鼠标在一个窗体范围内时，告诉此窗体鼠标左键已释放，返回值 0   WM_MBUTTONDBLCLK<br>当鼠标在一个窗体范围内时，告诉此窗体鼠标中键已双击，返回值 0  WM_MBUTTONDOWN<br>当鼠标在一个窗体范围内时，告诉此窗体鼠标中键已点击，返回值 0  WM_MBUTTONUP<br>当鼠标在一个窗体范围内时，告诉此窗体鼠标中键已释放，返回值 0</p>\n</blockquote>\n<h3 id=\"项目源码可以访问我的码云\"><a href=\"#项目源码可以访问我的码云\" class=\"headerlink\" title=\"项目源码可以访问我的码云\"></a><a href=\"https://gitee.com/AmuUncle/MFC_CSDN.git\">项目源码可以访问我的码云</a></h3><h3 id=\"我的私人博客\"><a href=\"#我的私人博客\" class=\"headerlink\" title=\"&gt;&gt;&gt;我的私人博客&lt;&lt;&lt;\"></a><a href=\"http://amuuncle.site/\">&gt;&gt;&gt;我的私人博客&lt;&lt;&lt;</a></h3>","text":" 1、PostMessage会将消息压入窗口所在线程的消息队列，然后返回；而SendMessage则不经过消息队列，SendMessage可认为是直接调用了该窗...","permalink":"/post/MFC/第16节-MFC之SendMessage和PostMessage","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1. 新建项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%96%B0%E5%BB%BA%E7%B1%BBCday18Dlg%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2. 新建类Cday18Dlg成员变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%8A%A0%E8%BD%BD%E9%BC%A0%E6%A0%87%E6%8C%87%E9%92%88%E5%8F%8A%E8%8E%B7%E5%8F%96%E5%9B%BE%E6%A0%87%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">3.加载鼠标指针及获取图标大小</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%88%9B%E5%BB%BA%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E7%82%B9%E5%87%BB%E5%8F%8A%E9%87%8A%E6%94%BE%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">4.创建鼠标右键点击及释放消息</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%AE%9E%E7%8E%B0%E4%BF%AE%E6%94%B9%E7%9B%AE%E6%A0%87%E7%AA%97%E5%8F%A3%E6%A0%87%E9%A2%98\"><span class=\"toc-text\">5.实现修改目标窗口标题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%AE%9E%E7%8E%B0%E5%85%B3%E9%97%AD%E7%9B%AE%E6%A0%87%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">6.实现关闭目标窗口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E6%95%88%E6%9E%9C%E5%9B%BE%EF%BC%9A\"><span class=\"toc-text\">动态效果图：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AA%97%E5%8F%A3%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">窗口消息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E9%92%AE\"><span class=\"toc-text\">按钮</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E6%A1%86\"><span class=\"toc-text\">组合框</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E6%A1%86\"><span class=\"toc-text\">编辑框</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IP-%E5%9C%B0%E5%9D%80%E6%8E%A7%E4%BB%B6\"><span class=\"toc-text\">IP 地址控件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MCI%EF%BC%88Media-Control-Interface\"><span class=\"toc-text\">MCI（Media Control Interface)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8F%9C%E5%8D%95\"><span class=\"toc-text\">菜单</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8%E6%A1%86\"><span class=\"toc-text\">列表框</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BC%A0%E6%A0%87\"><span class=\"toc-text\">鼠标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E6%88%91%E7%9A%84%E7%A0%81%E4%BA%91\"><span class=\"toc-text\">项目源码可以访问我的码云</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2\"><span class=\"toc-text\">&gt;&gt;&gt;我的私人博客&lt;&lt;&lt;</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"C++中变量和对象可以存放在内存中的位置","uid":"3faf2e95846c995629df56586598456a","slug":"C++/C++中变量和对象可以存放在内存中的位置","date":"2018-05-12T05:52:41.000Z","updated":"2023-06-05T07:41:06.629Z","comments":true,"path":"api/articles/C++/C++中变量和对象可以存放在内存中的位置.json","keywords":null,"cover":null,"text":"在 C++ 中，变量和对象可以存放在各种不同的内存位置，具体取决于它们的定义方式、生命周期及其类型等因素。以下是常见的 C++ 变量和对象所存放的位置： 自动变...","permalink":"/post/C++/C++中变量和对象可以存放在内存中的位置","photos":[],"count_time":{"symbolsCount":969,"symbolsTime":"1 mins."},"categories":[{"name":"C++基础","slug":"C-基础","count":2,"path":"api/categories/C-基础.json"}],"tags":[{"name":"C++","slug":"C","count":3,"path":"api/tags/C.json"},{"name":"网络通信","slug":"网络通信","count":2,"path":"api/tags/网络通信.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"第15节 MFC之复选框及单选按钮","uid":"4cba1917e258f58a831088a0ecbb4f93","slug":"MFC/第15节-MFC之复选框及单选按钮","date":"2017-11-02T15:00:09.000Z","updated":"2023-05-19T05:34:20.889Z","comments":true,"path":"api/articles/MFC/第15节-MFC之复选框及单选按钮.json","keywords":null,"cover":[],"text":"Windows编程基础–第15节 MFC之复选框及单选按钮1. 新建项目新建一个基于对话框项目“day17”，布局如下，自行处理： 拖动三个check box和...","permalink":"/post/MFC/第15节-MFC之复选框及单选按钮","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"MFC从入门到放弃","slug":"MFC从入门到放弃","count":15,"path":"api/categories/MFC从入门到放弃.json"}],"tags":[{"name":"MFC","slug":"MFC","count":15,"path":"api/tags/MFC.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}