{"title":"TCP四次挥手","uid":"cb8a46bc06540e3038f7697e934b72dc","slug":"其他/TCP四次挥手","date":"2022-11-01T06:59:51.000Z","updated":"2024-11-11T08:35:33.984Z","comments":true,"path":"api/articles/其他/TCP四次挥手.json","keywords":null,"cover":[],"content":"<blockquote>\n<p>四次挥手是断开连接的过程，需要双向断开，关于由哪一端先断开连接是没有要求的。通信的两端如果想要断开连接就需要调用 close() 函数，当两端都调用了该函数，四次挥手也就完成了。</p>\n</blockquote>\n<ul>\n<li>客户端和服务器断开连接 -&gt; 单向断开</li>\n<li>服务器和客户端断开连接 -&gt; 单向断开<blockquote>\n<p>进行了两次单向断开，双向断开就完成了，每进行一次单向断开，就会完成两次挥手的动作。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/tcp.png\" alt=\"TCP头部\"></p>\n<h3 id=\"在-Tcp-协议中，比较重要的字段有：\"><a href=\"#在-Tcp-协议中，比较重要的字段有：\" class=\"headerlink\" title=\"在 Tcp 协议中，比较重要的字段有：\"></a>在 Tcp 协议中，比较重要的字段有：</h3><ul>\n<li><p>源端口：表示发送端端口号，字段长 16 位，2 个字节</p>\n</li>\n<li><p>目的端口：表示接收端端口号，字段长 16 位，2 个字节</p>\n</li>\n<li><p>序号（sequence number）：字段长 32 位，占 4 个字节，序号的范围为 [0，4284967296]。</p>\n<blockquote>\n<p>由于 TCP 是面向字节流的，在一个 TCP 连接中传送的字节流中的每一个字节都按顺序编号<br>  首部中的序号字段则是指本报文段所发送的数据的第一个字节的序号，这是随机生成的。<br>  序号是循环使用的，当序号增加到最大值时，下一个序号就又回到了 0<br>  确认序号（acknowledgement number）：占 32 位（4 字节），表示收到的下一个报文段的第一个数据字节的序号，如果确认序号为 N，序号为 S，则表明到序号 N-S 为止的所有数据字节都已经被正确地接收到了。</p>\n</blockquote>\n</li>\n<li><p>8 个标志位（Flag）:</p>\n<ul>\n<li>CWR：CWR 标志与后面的 ECE 标志都用于 IP 首部的 ECN 字段，ECE 标志为 1 时，则通知对方已将拥塞窗口缩小；</li>\n<li>ECE：若其值为 1 则会通知对方，从对方到这边的网络有阻塞。在收到数据包的 IP 首部中 ECN 为 1 时将 TCP 首部中的 ECE 设为 1.；</li>\n<li>URG：该位设为 1，表示包中有需要紧急处理的数据，对于需要紧急处理的数据，与后面的紧急指针有关；</li>\n<li>ACK：该位设为 1，确认应答的字段有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设为 1；</li>\n<li>PSH：该位设为 1，表示需要将收到的数据立刻传给上层应用协议，若设为 0，则先将数据进行缓存；</li>\n<li>RST：该位设为 1，表示 TCP 连接出现异常必须强制断开连接；</li>\n<li>SYN：用于建立连接，该位设为 1，表示希望建立连接，并在其序列号的字段进行序列号初值设定；</li>\n<li>FIN：该位设为 1，表示今后不再有数据发送，希望断开连接。</li>\n</ul>\n</li>\n<li><p>窗口大小：该字段长 16 位，表示从确认序号所指位置开始能够接收的数据大小，TCP 不允许发送超过该窗口大小的数据。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标志位</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>synchronous建立联机</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>acknowledgement 确认</td>\n</tr>\n<tr>\n<td>PSH</td>\n<td>push传送</td>\n</tr>\n<tr>\n<td>PSH</td>\n<td>push传送</td>\n</tr>\n<tr>\n<td>URG</td>\n<td>urgent紧急</td>\n</tr>\n<tr>\n<td>RST</td>\n<td>reset重置</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>finish结束</td>\n</tr>\n<tr>\n<td>seq</td>\n<td>Sequence number(顺序号码)</td>\n</tr>\n<tr>\n<td>ack</td>\n<td>Acknowledge number(确认号码)</td>\n</tr>\n</tbody></table>\n<h3 id=\"TCP四次挥手具体过程如下：\"><a href=\"#TCP四次挥手具体过程如下：\" class=\"headerlink\" title=\"TCP四次挥手具体过程如下：\"></a>TCP四次挥手具体过程如下：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    participant Client</span><br><span class=\"line\">    participant Server</span><br><span class=\"line\">    Client-&gt;&gt;Server: FIN,Seq=x,Ack=y</span><br><span class=\"line\">    Server--&gt;&gt;Client: ACK,Ack=y+1,Seq=z</span><br><span class=\"line\">    Server-&gt;&gt;Client: FIN,Seq=w,Ack=y+1</span><br><span class=\"line\">    Client--&gt;&gt;Server: ACK,Ack=w+1,Seq=x+1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第一次握手：\"><a href=\"#第一次握手：\" class=\"headerlink\" title=\"第一次握手：\"></a>第一次握手：</h4><ul>\n<li>客户端：客户端向服务器端发起连接请求将报文中的 SYN 字段置为 1，生成随机序号 x，seq&#x3D;x</li>\n<li>服务器端：接收客户端发送的请求数据，解析 tcp 协议，校验 SYN 标志位是否为 1，并得到序号 x</li>\n</ul>\n<h4 id=\"第一次挥手\"><a href=\"#第一次挥手\" class=\"headerlink\" title=\"第一次挥手:\"></a>第一次挥手:</h4><ul>\n<li>主动断开连接的一方：发送断开连接的请求<ul>\n<li>将 tcp 协议中 FIN 标志位设置为 1，表示请求断开连接</li>\n<li>发送序号 x 给对端，seq&#x3D;x，基于这个序号用于客户端数据校验的计算</li>\n</ul>\n</li>\n<li>被动断开连接的一方：接收请求数据，并解析 TCP 协议<ul>\n<li>校验 FIN 标志位是否为 1</li>\n<li>收到了序号 x，基于这个数据计算回复的确认序号 ack 的值</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第二次挥手\"><a href=\"#第二次挥手\" class=\"headerlink\" title=\"第二次挥手:\"></a>第二次挥手:</h4><ul>\n<li>被动断开连接的一方：回复数据<ul>\n<li>同意了对方断开连接的请求，将 ACK 标志位设置为 1</li>\n<li>回复 ack&#x3D;x+1，表示成功接受了客户端发送的一个字节数据</li>\n<li>向客户端发送序号 seq&#x3D;y，基于这个序号用于服务器端数据校验的计算</li>\n</ul>\n</li>\n<li>主动断开连接的一方：接收回复数据，并解析 TCP 协议<ul>\n<li>校验 ACK 标志位，如果为 1 表示断开连接的请求对方已经同意了</li>\n<li>校验 ack 确认发送的数据服务器是否收到了，发送的数据 &#x3D; ack - x &#x3D; x + 1 -x &#x3D; 1</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第三次挥手\"><a href=\"#第三次挥手\" class=\"headerlink\" title=\"第三次挥手:\"></a>第三次挥手:</h4><ul>\n<li>被动断开连接的一方：将 tcp 协议中 FIN 标志位设置为 1，表示请求断开连接</li>\n<li>主动断开连接的一方：接收请求数据，并解析 TCP 协议，校验 FIN 标志位是否为 1</li>\n</ul>\n<h4 id=\"第四次挥手\"><a href=\"#第四次挥手\" class=\"headerlink\" title=\"第四次挥手:\"></a>第四次挥手:</h4><ul>\n<li>主动断开连接的一方：回复数据<ul>\n<li>将 tcp 协议中 ACK 对应的标志位设置为 1，表示同意了断开连接的请求</li>\n<li>ack&#x3D;y+1，表示服务器发送给客户端的一个字节客户端接收到了</li>\n<li>序号 seq&#x3D;h，此时的 h 应该等于 x+1，也就是第三次挥手时服务器回复的确认序号 ack 的值</li>\n</ul>\n</li>\n<li>被动断开连接的一方：收到回复的 ACK, 此时双向连接双向断开，通信的两端没有任何关系了</li>\n</ul>\n<h3 id=\"wirshark抓包分析\"><a href=\"#wirshark抓包分析\" class=\"headerlink\" title=\"wirshark抓包分析\"></a>wirshark抓包分析</h3><p>TCP四次挥手过程，此抓包为服务端主动断开连接</p>\n<ul>\n<li><p>第一次挥手</p>\n<ul>\n<li>FIN请求，即服务端请求断开连接，可以看到seq&#x3D;1， 这里的ASK标志，及ask&#x3D;1说明断开的时候对之前收到的报文段进行确认<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"第一次挥手\"></li>\n</ul>\n</li>\n<li><p>第二次挥手</p>\n<ul>\n<li>[ACK]请求，即客户端同意断开连接，ACK说明客户端已经同意了服务端的请求<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"第二次挥手\"></li>\n</ul>\n</li>\n<li><p>第三次挥手</p>\n<ul>\n<li>FIN请求，即客户端请求断开连接，可以看到seq&#x3D;1， 这里的ASK标志，及ask&#x3D;2说明断开的时候对之前收到的报文段进行确认过来的seq+1)<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"第三次挥手\"></li>\n</ul>\n</li>\n<li><p>第四次挥手</p>\n<ul>\n<li>[ACK]请求，即服务端同意断开连接，ACK说明服务端已经同意了客户端的请求<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"第四次挥手\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>TCP四次挥手可以由任意一方发起</p>\n<ul>\n<li>发起方先发送FIN标志来请求断开连接，然后接收方回复ASK来确认关闭连接</li>\n<li>接着接收方发送FIN来请求断开连接，然后发起方回复ASK来确认关闭连接</li>\n</ul>\n</blockquote>\n","text":" 四次挥手是断开连接的过程，需要双向断开，关于由哪一端先断开连接是没有要求的。通信的两端如果想要断开连接就需要调用 close() 函数，当两端都调用了该函数，...","permalink":"/post/其他/TCP四次挥手","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"网络相关","slug":"网络相关","count":2,"path":"api/categories/网络相关.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"},{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-Tcp-%E5%8D%8F%E8%AE%AE%E4%B8%AD%EF%BC%8C%E6%AF%94%E8%BE%83%E9%87%8D%E8%A6%81%E7%9A%84%E5%AD%97%E6%AE%B5%E6%9C%89%EF%BC%9A\"><span class=\"toc-text\">在 Tcp 协议中，比较重要的字段有：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">TCP四次挥手具体过程如下：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9A\"><span class=\"toc-text\">第一次握手：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8C%A5%E6%89%8B\"><span class=\"toc-text\">第一次挥手:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8C%A5%E6%89%8B\"><span class=\"toc-text\">第二次挥手:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B\"><span class=\"toc-text\">第三次挥手:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B\"><span class=\"toc-text\">第四次挥手:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#wirshark%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90\"><span class=\"toc-text\">wirshark抓包分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"VUE前端解决web升级后需要手动刷新浏览器问题","uid":"a6c3990ea6d4db0cb6f4530662b613f2","slug":"WEB/VUE前端解决web升级后需要手动刷新浏览器问题","date":"2022-11-01T08:52:25.000Z","updated":"2023-05-19T05:34:20.565Z","comments":true,"path":"api/articles/WEB/VUE前端解决web升级后需要手动刷新浏览器问题.json","keywords":null,"cover":[],"text":"问题描述 vue项目后端升级新的index.html及相应js/css后，前端已打开web是不感知的，所以在不刷新浏览器的情况下，前端的index.html是不...","permalink":"/post/WEB/VUE前端解决web升级后需要手动刷新浏览器问题","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"前端框架","slug":"前端框架","count":2,"path":"api/categories/前端框架.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TCP三次握手","uid":"178906d428a0d6cc1b23477e81172dad","slug":"其他/TCP三次握手","date":"2022-11-01T02:29:52.000Z","updated":"2024-11-11T08:35:34.052Z","comments":true,"path":"api/articles/其他/TCP三次握手.json","keywords":null,"cover":[],"text":" TCP 协议是一个安全的、面向连接的、流式传输协议，所谓的面向连接就是三次握手，对于程序猿来说只需要在客户端调用 connect() 函数，三次握手就自动进行...","permalink":"/post/其他/TCP三次握手","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"网络相关","slug":"网络相关","count":2,"path":"api/categories/网络相关.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"},{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}