{"title":"TCP三次握手","uid":"178906d428a0d6cc1b23477e81172dad","slug":"其他/TCP三次握手","date":"2022-11-01T02:29:52.000Z","updated":"2024-11-11T08:35:34.052Z","comments":true,"path":"api/articles/其他/TCP三次握手.json","keywords":null,"cover":[],"content":"<blockquote>\n<p>TCP 协议是一个安全的、面向连接的、流式传输协议，所谓的面向连接就是三次握手，对于程序猿来说只需要在客户端调用 connect() 函数，三次握手就自动进行了。先通过下图看一下 TCP 协议的格式，然后再介绍三次握手的具体流程。</p>\n</blockquote>\n<p><img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/tcp.png\" alt=\"TCP头部\"></p>\n<h3 id=\"在-Tcp-协议中，比较重要的字段有：\"><a href=\"#在-Tcp-协议中，比较重要的字段有：\" class=\"headerlink\" title=\"在 Tcp 协议中，比较重要的字段有：\"></a>在 Tcp 协议中，比较重要的字段有：</h3><ul>\n<li><p>源端口：表示发送端端口号，字段长 16 位，2 个字节</p>\n</li>\n<li><p>目的端口：表示接收端端口号，字段长 16 位，2 个字节</p>\n</li>\n<li><p>序号（sequence number）：字段长 32 位，占 4 个字节，序号的范围为 [0，4284967296]。</p>\n<blockquote>\n<p>由于 TCP 是面向字节流的，在一个 TCP 连接中传送的字节流中的每一个字节都按顺序编号<br>  首部中的序号字段则是指本报文段所发送的数据的第一个字节的序号，这是随机生成的。<br>  序号是循环使用的，当序号增加到最大值时，下一个序号就又回到了 0<br>  确认序号（acknowledgement number）：占 32 位（4 字节），表示收到的下一个报文段的第一个数据字节的序号，如果确认序号为 N，序号为 S，则表明到序号 N-S 为止的所有数据字节都已经被正确地接收到了。</p>\n</blockquote>\n</li>\n<li><p>8 个标志位（Flag）:</p>\n<ul>\n<li>CWR：CWR 标志与后面的 ECE 标志都用于 IP 首部的 ECN 字段，ECE 标志为 1 时，则通知对方已将拥塞窗口缩小；</li>\n<li>ECE：若其值为 1 则会通知对方，从对方到这边的网络有阻塞。在收到数据包的 IP 首部中 ECN 为 1 时将 TCP 首部中的 ECE 设为 1.；</li>\n<li>URG：该位设为 1，表示包中有需要紧急处理的数据，对于需要紧急处理的数据，与后面的紧急指针有关；</li>\n<li>ACK：该位设为 1，确认应答的字段有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设为 1；</li>\n<li>PSH：该位设为 1，表示需要将收到的数据立刻传给上层应用协议，若设为 0，则先将数据进行缓存；</li>\n<li>RST：该位设为 1，表示 TCP 连接出现异常必须强制断开连接；</li>\n<li>SYN：用于建立连接，该位设为 1，表示希望建立连接，并在其序列号的字段进行序列号初值设定；</li>\n<li>FIN：该位设为 1，表示今后不再有数据发送，希望断开连接。</li>\n</ul>\n</li>\n<li><p>窗口大小：该字段长 16 位，表示从确认序号所指位置开始能够接收的数据大小，TCP 不允许发送超过该窗口大小的数据。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标志位</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>synchronous建立联机</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>acknowledgement 确认</td>\n</tr>\n<tr>\n<td>PSH</td>\n<td>push传送</td>\n</tr>\n<tr>\n<td>PSH</td>\n<td>push传送</td>\n</tr>\n<tr>\n<td>URG</td>\n<td>urgent紧急</td>\n</tr>\n<tr>\n<td>RST</td>\n<td>reset重置</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>finish结束</td>\n</tr>\n<tr>\n<td>seq</td>\n<td>Sequence number(顺序号码)</td>\n</tr>\n<tr>\n<td>ack</td>\n<td>Acknowledge number(确认号码)</td>\n</tr>\n</tbody></table>\n<h3 id=\"三次握手具体过程如下：\"><a href=\"#三次握手具体过程如下：\" class=\"headerlink\" title=\"三次握手具体过程如下：\"></a>三次握手具体过程如下：</h3><p><img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"TCP头部\"></p>\n<h4 id=\"第一次握手：\"><a href=\"#第一次握手：\" class=\"headerlink\" title=\"第一次握手：\"></a>第一次握手：</h4><ul>\n<li>客户端：客户端向服务器端发起连接请求将报文中的 SYN 字段置为 1，生成随机序号 x，seq&#x3D;x</li>\n<li>服务器端：接收客户端发送的请求数据，解析 tcp 协议，校验 SYN 标志位是否为 1，并得到序号 x</li>\n</ul>\n<h4 id=\"第二次握手：\"><a href=\"#第二次握手：\" class=\"headerlink\" title=\"第二次握手：\"></a>第二次握手：</h4><ul>\n<li>服务器端：给客户端回复数据<ul>\n<li>回复 ACK, 将 tcp 协议 ACK 对应的标志位设置为 1，表示同意了客户端建立连接的请求</li>\n<li>回复了 ack&#x3D;x+1, 这是确认序号<ul>\n<li>x: 客户端生成的随机序号</li>\n<li>1: 客户端给服务器发送的数据的量，SYN 标志位存储到某一个字节中，因此按照一个字节计算，表示客户端给服务器发送的 1 个字节服务器收到了。</li>\n</ul>\n</li>\n<li>将 tcp 协议中的 SYN 对应的标志位设置为 1, 服务器向客户端发起了连接请求</li>\n<li>服务器端生成了一个随机序号 y, 发送给了客户端</li>\n</ul>\n</li>\n<li>客户端：接收回复的数据，并解析 tcp 协议<ul>\n<li>校验 ACK 标志位，为 1 表示服务器接收了客户端的连接请求</li>\n<li>数据校验，确认发送给服务器的数据服务器收到了没有，计算公式如下：</li>\n<li>发送的数据的量 &#x3D; 使用服务器回复的确认序号 - 客户端生成的随机序号 &#x3D;&#x3D;&#x3D;&gt; 1&#x3D;x+1-x</li>\n<li>校验 SYN 标志位，为 1 表示服务器请求和客户端建立连接</li>\n<li>得到服务器生成的随机序号: y</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"第三次握手：\"><a href=\"#第三次握手：\" class=\"headerlink\" title=\"第三次握手：\"></a>第三次握手：</h4><ul>\n<li>客户端：发送数据给服务器<ul>\n<li>将 tcp 协议中 ACK 标志位设置为 1，表示同意了服务器的连接请求</li>\n<li>给服务器回复了一个确认序号 ack &#x3D; y+1<ul>\n<li>y：服务器端生成的随机序号</li>\n<li>1：服务器给客户端发送的数据量，服务器给客户端发送了 ACK 和 SYN, 都存储在这一个字节中</li>\n</ul>\n</li>\n<li>发送给服务器的序号就是上一次从服务器端收的确认序号因此 seq &#x3D; x+1</li>\n</ul>\n</li>\n<li>服务器端：接收数据，并解析 tcp 协议<ul>\n<li>查看 ACK 对应的标志位是否为 1, 如果是 1 代表，客户端同意了服务器的连接请求</li>\n<li>数据校验，确认发送给客户端的数据客户端收到了没有，计算公式如下：</li>\n<li>给客户端发送的数据量 &#x3D; 确认序号 - 服务器生成的随机序号 &#x3D;&#x3D;&#x3D;&gt; 1&#x3D;y+1-y</li>\n<li>得到客户端发送的序号：x+1</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"wirshark抓包分析\"><a href=\"#wirshark抓包分析\" class=\"headerlink\" title=\"wirshark抓包分析\"></a>wirshark抓包分析</h3><ul>\n<li>服务端监听9999<br><img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90.png\" alt=\"TCP头部\"></li>\n</ul>\n<p>上图为TCP三次握手过程</p>\n<ul>\n<li><p>第一次握手</p>\n<ul>\n<li>SYN请求，即客户端请求建立连接，可以看到SYN&#x3D;1,seq&#x3D;0<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"TCP头部\"></li>\n</ul>\n</li>\n<li><p>第二次握手</p>\n<ul>\n<li>[SYN,ACK]请求，ACK说明服务端已经同意了客户端的请求，SYN说明服务端请求建立连接，可以看到ACK&#x3D;1,SYN&#x3D;1,seq&#x3D;0,ack&#x3D;1 (ack为确认序号，值为客户端发送过来的seq+1；这里的seq为服务端随机生成的序号)<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"TCP头部\"></li>\n</ul>\n</li>\n<li><p>第三次握手</p>\n<ul>\n<li>[ACK]请求，ACK说明客户端已经同意了服务端的请求，可以看到ACK&#x3D;1,seq&#x3D;0,ack&#x3D;1 (ack为确认序号，值为服务端户端发送过来的seq+1)<br>  <img src=\"/images/posts/%E5%85%B6%E4%BB%96/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90-%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"TCP头部\"></li>\n</ul>\n</li>\n</ul>\n","text":" TCP 协议是一个安全的、面向连接的、流式传输协议，所谓的面向连接就是三次握手，对于程序猿来说只需要在客户端调用 connect() 函数，三次握手就自动进行...","permalink":"/post/其他/TCP三次握手","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"网络相关","slug":"网络相关","count":2,"path":"api/categories/网络相关.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"},{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-Tcp-%E5%8D%8F%E8%AE%AE%E4%B8%AD%EF%BC%8C%E6%AF%94%E8%BE%83%E9%87%8D%E8%A6%81%E7%9A%84%E5%AD%97%E6%AE%B5%E6%9C%89%EF%BC%9A\"><span class=\"toc-text\">在 Tcp 协议中，比较重要的字段有：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">三次握手具体过程如下：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9A\"><span class=\"toc-text\">第一次握手：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9A\"><span class=\"toc-text\">第二次握手：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%9A\"><span class=\"toc-text\">第三次握手：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#wirshark%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90\"><span class=\"toc-text\">wirshark抓包分析</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"TCP四次挥手","uid":"cb8a46bc06540e3038f7697e934b72dc","slug":"其他/TCP四次挥手","date":"2022-11-01T06:59:51.000Z","updated":"2024-11-11T08:35:33.984Z","comments":true,"path":"api/articles/其他/TCP四次挥手.json","keywords":null,"cover":[],"text":" 四次挥手是断开连接的过程，需要双向断开，关于由哪一端先断开连接是没有要求的。通信的两端如果想要断开连接就需要调用 close() 函数，当两端都调用了该函数，...","permalink":"/post/其他/TCP四次挥手","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"网络相关","slug":"网络相关","count":2,"path":"api/categories/网络相关.json"}],"tags":[{"name":"tcp","slug":"tcp","count":2,"path":"api/tags/tcp.json"},{"name":"socket","slug":"socket","count":2,"path":"api/tags/socket.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"第一个Qt项目","uid":"3fa7b6b4e7b63ef887d3676dae872298","slug":"Qt/基础教程/第一个Qt项目","date":"2022-10-28T08:09:33.000Z","updated":"2024-11-11T08:26:50.896Z","comments":true,"path":"api/articles/Qt/基础教程/第一个Qt项目.json","keywords":null,"cover":[],"text":" 写在前面 相关博文 个人博客首页 注：学习交流使用！ 正文 Qt [1] 是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架...","permalink":"/post/Qt/基础教程/第一个Qt项目","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"Qt入门指南","slug":"Qt入门指南","count":3,"path":"api/categories/Qt入门指南.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}