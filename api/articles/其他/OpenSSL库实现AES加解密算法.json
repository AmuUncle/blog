{"title":"OpenSSL库实现AES加解密算法","uid":"5ad5ce4ee7b2f8c117390804baa8feb4","slug":"其他/OpenSSL库实现AES加解密算法","date":"2023-05-23T05:29:48.000Z","updated":"2023-06-05T07:20:56.114Z","comments":true,"path":"api/articles/其他/OpenSSL库实现AES加解密算法.json","keywords":null,"cover":null,"content":"<p>下面是使用OpenSSL库进行AES-128-CBC加密和解密，支持PKCS7Padding、PKCS5Padding、ZEROPadding三种填充方式的示例代码。在实现中，我们使用了EVP接口和CryptoPP库。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;openssl/evp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;crypto++/modes.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;crypto++/aes.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> AES_BLOCK_SIZE 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PKCS7Padding填充方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pkcs7_padding</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> padded_len = AES_BLOCK_SIZE - (in_len % AES_BLOCK_SIZE);</span><br><span class=\"line\">    out_len = in_len + padded_len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(out, in, in_len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = in_len; i &lt; out_len; ++i) &#123;</span><br><span class=\"line\">        out[i] = padded_len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">pkcs7_unpadding</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> padding_byte = in[in_len - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (padding_byte &gt; AES_BLOCK_SIZE || padding_byte &gt; in_len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> in_len - padding_byte;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PKCS5Padding填充方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pkcs5_padding</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> padded_len = (in_len / AES_BLOCK_SIZE + <span class=\"number\">1</span>) * AES_BLOCK_SIZE;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> padding_len = padded_len - in_len;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> padding_byte = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span>)padding_len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(out, in, in_len);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = in_len; i &lt; padded_len; ++i) &#123;</span><br><span class=\"line\">        out[i] = padding_byte;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    out_len = padded_len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">pkcs5_unpadding</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> unpadded_len = in_len;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> padding_byte = in[in_len - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (padding_byte &gt; AES_BLOCK_SIZE || unpadded_len &lt; padding_byte) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unpadded_len -= padding_byte;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unpadded_len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ZEROPadding填充方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">zero_padding</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> padded_len = ((in_len / AES_BLOCK_SIZE) + <span class=\"number\">1</span>) * AES_BLOCK_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(out, in, in_len);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(out + in_len, <span class=\"number\">0</span>, padded_len - in_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    out_len = padded_len;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">zero_unpadding</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> unpadded_len = in_len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (in[unpadded_len - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        --unpadded_len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> unpadded_len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用EVP接口进行AES-128-CBC加解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">aes_encrypt_evp</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *key, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *iv, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len, <span class=\"type\">int</span> padding_mode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    EVP_CIPHER_CTX *ctx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> len, outlen;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(ctx = <span class=\"built_in\">EVP_CIPHER_CTX_new</span>())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> EVP_CIPHER *cipher;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (padding_mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            cipher = <span class=\"built_in\">EVP_aes_128_cbc</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            cipher = <span class=\"built_in\">EVP_aes_128_cbc</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            cipher = <span class=\"built_in\">EVP_aes_128_cbc</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">EVP_EncryptInit_ex</span>(ctx, cipher, <span class=\"literal\">NULL</span>, key, iv) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *padded_in = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[in_len + AES_BLOCK_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (padding_mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">memcpy</span>(padded_in, in, in_len);</span><br><span class=\"line\">            out_len = in_len;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"built_in\">pkcs5_padding</span>(in, in_len, padded_in, out_len);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"built_in\">zero_padding</span>(in, in_len, padded_in, out_len);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">EVP_EncryptUpdate</span>(ctx, out, &amp;len, padded_in, out_len) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outlen = len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">EVP_EncryptFinal_ex</span>(ctx, out + len, &amp;len) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outlen += len;</span><br><span class=\"line\"></span><br><span class=\"line\">    out_len = outlen;</span><br><span class=\"line\">    ret = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">clean_up:</span><br><span class=\"line\">    <span class=\"built_in\">EVP_CIPHER_CTX_free</span>(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] padded_in;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">aes_decrypt_evp</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *key, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *iv, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len, <span class=\"type\">int</span> padding_mode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    EVP_CIPHER_CTX *ctx = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> len, outlen;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(ctx = <span class=\"built_in\">EVP_CIPHER_CTX_new</span>())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">const</span> EVP_CIPHER *cipher;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (padding_mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            cipher = <span class=\"built_in\">EVP_aes_128_cbc</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            cipher = <span class=\"built_in\">EVP_aes_128_cbc</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            cipher = <span class=\"built_in\">EVP_aes_128_cbc</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">EVP_DecryptInit_ex</span>(ctx, cipher, <span class=\"literal\">NULL</span>, key, iv) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">EVP_DecryptUpdate</span>(ctx, out, &amp;len, in, in_len) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outlen = len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">EVP_DecryptFinal_ex</span>(ctx, out + len, &amp;len) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outlen += len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *unpadded_out = <span class=\"keyword\">new</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span>[outlen];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (padding_mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            out_len = outlen;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            out_len = <span class=\"built_in\">pkcs5_unpadding</span>(out, outlen);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            out_len = <span class=\"built_in\">zero_unpadding</span>(out, outlen);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out_len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] unpadded_out;</span><br><span class=\"line\">        ret = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> clean_up;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(unpadded_out, out, out_len);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(out, unpadded_out, out_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    out_len = outlen;</span><br><span class=\"line\">    ret = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">clean_up:</span><br><span class=\"line\">    <span class=\"built_in\">EVP_CIPHER_CTX_free</span>(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] unpadded_out;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用CryptoPP库进行AES-128-CBC加解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">aes_encrypt_cryptopp</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *key, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *iv, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len, <span class=\"type\">int</span> padding_mode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    CryptoPP::<span class=\"function\">AES::Encryption <span class=\"title\">aes</span><span class=\"params\">(key, AES_BLOCK_SIZE)</span></span>;</span><br><span class=\"line\">    std::string cipher;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (padding_mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            CryptoPP::<span class=\"function\">CBC_Mode_ExternalCipher::Encryption <span class=\"title\">cbc</span><span class=\"params\">(aes, iv)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">CryptoPP::StreamTransformationFilter <span class=\"title\">filter</span><span class=\"params\">(cbc, <span class=\"keyword\">new</span> CryptoPP::StringSink(cipher))</span></span>;</span><br><span class=\"line\">            filter.<span class=\"built_in\">Put</span>(in, in_len);</span><br><span class=\"line\">            filter.<span class=\"built_in\">MessageEnd</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            CryptoPP::PKCS_PADDING::<span class=\"built_in\">Pad</span>(padded_in, in, in_len, in_len + AES_BLOCK_SIZE);</span><br><span class=\"line\">            CryptoPP::<span class=\"function\">CBC_Mode_ExternalCipher::Encryption <span class=\"title\">cbc</span><span class=\"params\">(aes, iv)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">CryptoPP::StreamTransformationFilter <span class=\"title\">filter</span><span class=\"params\">(cbc, <span class=\"keyword\">new</span> CryptoPP::StringSink(cipher))</span></span>;</span><br><span class=\"line\">            filter.<span class=\"built_in\">Put</span>(padded_in, in_len + AES_BLOCK_SIZE);</span><br><span class=\"line\">            filter.<span class=\"built_in\">MessageEnd</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            CryptoPP::<span class=\"built_in\">ZeroPadding</span>().<span class=\"built_in\">Pad</span>(in, in_len, in_len + AES_BLOCK_SIZE);</span><br><span class=\"line\">            CryptoPP::<span class=\"function\">CBC_Mode_ExternalCipher::Encryption <span class=\"title\">cbc</span><span class=\"params\">(aes, iv)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">CryptoPP::StreamTransformationFilter <span class=\"title\">filter</span><span class=\"params\">(cbc, <span class=\"keyword\">new</span> CryptoPP::StringSink(cipher))</span></span>;</span><br><span class=\"line\">            filter.<span class=\"built_in\">Put</span>(in, in_len + AES_BLOCK_SIZE);</span><br><span class=\"line\">            filter.<span class=\"built_in\">MessageEnd</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    out_len = cipher.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(out, cipher.<span class=\"built_in\">data</span>(), out_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">aes_decrypt_cryptopp</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *key, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *iv, <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *in, <span class=\"type\">size_t</span> in_len, <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *out, <span class=\"type\">size_t</span> &amp;out_len, <span class=\"type\">int</span> padding_mode)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (in_len % AES_BLOCK_SIZE != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CryptoPP::<span class=\"function\">AES::Decryption <span class=\"title\">aes</span><span class=\"params\">(key, AES_BLOCK_SIZE)</span></span>;</span><br><span class=\"line\">    std::string plain;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (padding_mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            CryptoPP::<span class=\"function\">CBC_Mode_ExternalCipher::Decryption <span class=\"title\">cbc</span><span class=\"params\">(aes, iv)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">CryptoPP::StreamTransformationFilter <span class=\"title\">filter</span><span class=\"params\">(cbc, <span class=\"keyword\">new</span> CryptoPP::StringSink(plain))</span></span>;</span><br><span class=\"line\">            filter.<span class=\"built_in\">Put</span>(in, in_len);</span><br><span class=\"line\">            filter.<span class=\"built_in\">MessageEnd</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            CryptoPP::<span class=\"function\">CBC_Mode_ExternalCipher::Decryption <span class=\"title\">cbc</span><span class=\"params\">(aes, iv)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">CryptoPP::StreamTransformationFilter <span class=\"title\">filter</span><span class=\"params\">(cbc, <span class=\"keyword\">new</span> CryptoPP::StringSink(plain))</span></span>;</span><br><span class=\"line\">            filter.<span class=\"built_in\">Put</span>(in, in_len);</span><br><span class=\"line\">            filter.<span class=\"built_in\">MessageEnd</span>();</span><br><span class=\"line\">            CryptoPP::PKCS_PADDING::<span class=\"built_in\">Unpad</span>(out, plain.<span class=\"built_in\">data</span>(), plain.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">            out_len = plain.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            CryptoPP::<span class=\"function\">CBC_Mode_ExternalCipher::Decryption <span class=\"title\">cbc</span><span class=\"params\">(aes, iv)</span></span>;</span><br><span class=\"line\">            <span class=\"function\">CryptoPP::StreamTransformationFilter <span class=\"title\">filter</span><span class=\"params\">(cbc, <span class=\"keyword\">new</span> CryptoPP::StringSink(plain))</span></span>;</span><br><span class=\"line\">            filter.<span class=\"built_in\">Put</span>(in, in_len);</span><br><span class=\"line\">            filter.<span class=\"built_in\">MessageEnd</span>();</span><br><span class=\"line\">            CryptoPP::<span class=\"built_in\">ZeroPadding</span>().<span class=\"built_in\">Unpad</span>(out, plain.<span class=\"built_in\">data</span>(), plain.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">            out_len = plain.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> key[] = <span class=\"string\">&quot;0123456789abcdef&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> iv[] = <span class=\"string\">&quot;0123456789abcdef&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> in[<span class=\"number\">128</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> out[<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> outlen = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试PKCS7Padding填充方式</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;使用PKCS7Padding填充方式进行加解密&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>((<span class=\"type\">char</span> *)in, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">aes_encrypt_evp</span>(key, iv, in, <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span> *)in), out, outlen, <span class=\"number\">1</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;加密后的结果为：&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; outlen; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02x &quot;</span>, out[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(in, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(in));</span><br><span class=\"line\">    <span class=\"built_in\">aes_decrypt_evp</span>(key, iv, out, outlen, in, outlen, <span class=\"number\">1</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;解密后的结果为：&quot;</span> &lt;&lt; (<span class=\"type\">char</span> *)in &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试PKCS5Padding填充方式</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;使用PKCS5Padding填充方式进行加解密&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>((<span class=\"type\">char</span> *)in, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">aes_encrypt_evp</span>(key, iv, in, <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span> *)in), out, outlen, <span class=\"number\">2</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;加密后的结果为：&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; outlen; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02x &quot;</span>, out[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(in, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(in));</span><br><span class=\"line\">    <span class=\"built_in\">aes_decrypt_evp</span>(key, iv, out, outlen, in, outlen, <span class=\"number\">2</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;解密后的结果为：&quot;</span> &lt;&lt; (<span class=\"type\">char</span> *)in &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 测试ZEROPadding填充方式</span></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;使用ZEROPadding填充方式进行加解密&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>((<span class=\"type\">char</span> *)in, <span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">aes_encrypt_evp</span>(key, iv, in, <span class=\"built_in\">strlen</span>((<span class=\"type\">char</span> *)in), out, outlen, <span class=\"number\">3</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;加密后的结果为：&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; outlen; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02x &quot;</span>, out[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(in, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(in));</span><br><span class=\"line\">    <span class=\"built_in\">aes_decrypt_evp</span>(key, iv, out, outlen, in, outlen, <span class=\"number\">3</span>);</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;解密后的结果为：&quot;</span> &lt;&lt; (<span class=\"type\">char</span> *)in &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码中，我们首先定义了三种填充方式的对应函数：pkcs7_padding、pkcs5_padding、zero_padding，以及它们的反向操作函数：pkcs7_unpadding、pkcs5_unpadding、zero_unpadding。接着，我们使用EVP接口和CryptoPP库分别实现了AES-128-CBC加密和解密。在实现过程中，我们根据填充方式的不同，在加密之前对原始数据进行了填充，而在解密之后则进行了反向操作去除填充。最后，我们在main函数中分别测试了这三种填充方式的加解密效果，并打印了结果。这段代码的主要功能是进行AES-128-CBC加解密，支持三种填充方式：PKCS7Padding、PKCS5Padding和ZEROPadding。主函数中对这些填充方式进行了测试，验证了它们的正确性。</p>\n<p>此外，在代码实现中，我们使用了EVP接口和CryptoPP库两种不同的方式进行加解密。在实际应用中，我们可以根据自己的具体需求选择不同的方式。EVP接口是OpenSSL库提供的一个高层次的加密接口，使用简单，但速度相对较慢；而CryptoPP库则是一个开源的密码学库，提供了许多高效的加密算法实现，速度比EVP更快。不过需要注意的是，无论使用哪种方式进行加解密，都应该严格遵循密码学安全的最佳实践。以下是一些建议：</p>\n<ul>\n<li>密钥管理：密钥应该定期更换，并且应该在系统中存储和传输时进行加密。密钥应该仅限于授权用户访问。</li>\n<li>填充方式：应该始终使用填充方式对数据进行处理，以避免明文长度泄露信息。常见的填充方式包括PKCS7Padding、PKCS5Padding和ZEROPadding。</li>\n<li>随机性：初始化向量应该具有强随机性，并且不能重复使用。每次使用一个新的随机的初始化向量来保证安全性。</li>\n<li>加密模式：除了ECB模式外，其他加密模式都应该得到优先考虑。CBC、CTR和GCM模式被认为是最安全和最常见的模式。</li>\n</ul>\n<p>总之，AES-128-CBC是一种流行的对称加密算法，应用广泛。但是，在使用它进行加解密时必须要注意安全性问题，采取相应的措施来防止攻击。同时也需要注意选择合适的库或者接口，确保程序正确且高效地完成加解密操作。</p>\n","text":"下面是使用OpenSSL库进行AES-128-CBC加密和解密，支持PKCS7Padding、PKCS5Padding、ZEROPadding三种填充方式的示例...","permalink":"/post/其他/OpenSSL库实现AES加解密算法","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"其他教程","slug":"其他教程","count":4,"path":"api/categories/其他教程.json"}],"tags":[{"name":"openssl","slug":"openssl","count":1,"path":"api/tags/openssl.json"}],"toc":"","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"HTTPS工作原理","uid":"fbaaa363297ea0ad24d687796af4340f","slug":"其他/HTTPS工作原理","date":"2023-05-23T05:29:48.000Z","updated":"2023-05-23T05:46:16.703Z","comments":true,"path":"api/articles/其他/HTTPS工作原理.json","keywords":null,"cover":null,"text":"HTTPS工作原理HTTPS（HyperText Transfer Protocol Secure）是一种基于SSL/TLS协议的安全加密通信协议，用于保证网络...","permalink":"/post/其他/HTTPS工作原理","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"其他教程","slug":"其他教程","count":4,"path":"api/categories/其他教程.json"}],"tags":[{"name":"https","slug":"https","count":1,"path":"api/tags/https.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"客户端通信安全设计","uid":"47c166aa1551adcab409a420e5d0d7ce","slug":"其他/客户端通信安全设计","date":"2023-05-23T05:29:48.000Z","updated":"2023-06-05T07:26:20.328Z","comments":true,"path":"api/articles/其他/客户端通信安全设计.json","keywords":null,"cover":null,"text":"消息传输方案方案一 公钥加密，私钥解密 握手后，采用对称加密1234567891011sequenceDiagram participant A as 客户端A...","permalink":"/post/其他/客户端通信安全设计","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"其他教程","slug":"其他教程","count":4,"path":"api/categories/其他教程.json"}],"tags":[{"name":"加密","slug":"加密","count":1,"path":"api/tags/加密.json"},{"name":"aes","slug":"aes","count":1,"path":"api/tags/aes.json"},{"name":"rsa","slug":"rsa","count":1,"path":"api/tags/rsa.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}