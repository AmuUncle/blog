{"title":"QAnimation的介绍","uid":"57a39664d5dfca7343351ad94bd0279c","slug":"Qt/进阶教程/QAnimation的介绍","date":"2021-10-04T03:34:06.000Z","updated":"2023-05-19T05:34:19.710Z","comments":true,"path":"api/articles/Qt/进阶教程/QAnimation的介绍.json","keywords":null,"cover":null,"content":"<h1 id=\"QAnimation的介绍\"><a href=\"#QAnimation的介绍\" class=\"headerlink\" title=\"QAnimation的介绍\"></a>QAnimation的介绍</h1><p>QAnimation是Qt框架中提供的一个动画类，用于实现GUI控件的各种动画效果。可以通过QAnimation实现如平移、旋转、缩放等动态效果，同时还支持动态添加或删除控件等操作。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"创建和启动动画\"><a href=\"#创建和启动动画\" class=\"headerlink\" title=\"创建和启动动画\"></a>创建和启动动画</h3><p>通过继承QPropertyAnimation、QSequentialAnimationGroup或QParallelAnimationGroup等类，用户可以轻松地创建自己需要的动画。</p>\n<p>以下示例展示了如何创建一个简单的位移动画，并在之后启动：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QWidget* widget = <span class=\"keyword\">new</span> <span class=\"built_in\">QWidget</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">widget-&gt;<span class=\"built_in\">setGeometry</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">QPropertyAnimation *animation = <span class=\"keyword\">new</span> <span class=\"built_in\">QPropertyAnimation</span>(widget, <span class=\"string\">&quot;geometry&quot;</span>);</span><br><span class=\"line\">animation-&gt;<span class=\"built_in\">setDuration</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">animation-&gt;<span class=\"built_in\">setStartValue</span>(<span class=\"built_in\">QRect</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\">animation-&gt;<span class=\"built_in\">setEndValue</span>(<span class=\"built_in\">QRect</span>(<span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\">animation-&gt;<span class=\"built_in\">setEasingCurve</span>(QEasingCurve::OutQuad);</span><br><span class=\"line\">animation-&gt;<span class=\"built_in\">start</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>QAnimation提供了一些常见的方法以便对动画进行设置和管理：</p>\n<ul>\n<li><code>setDuration()</code>：设置动画执行时间。</li>\n<li><code>setStartValue()</code> 和 <code>setEndValue()</code>：设置动画开始和结束状态。</li>\n<li><code>setEasingCurve()</code>：设置动画的缓动曲线（用于控制动画速度变化的曲线）。</li>\n<li><code>setLoopCount()</code>：设置动画循环次数，默认为1次（-1表示无限循环）。</li>\n<li><code>setDirection()</code>：设置动画的前进方向。</li>\n<li><code>stop()</code> 和 <code>pause()</code>：停止或暂停动画。</li>\n<li><code>start()</code>：启动动画。</li>\n</ul>\n<h3 id=\"动画组合\"><a href=\"#动画组合\" class=\"headerlink\" title=\"动画组合\"></a>动画组合</h3><p>QAnimation还提供了多种动画组合方式，例如：</p>\n<ul>\n<li>QSequentialAnimationGroup：顺序播放一系列动画。</li>\n<li>QParallelAnimationGroup：同时播放一组动画。</li>\n<li>QPauseAnimation：插入一个暂停时间段。</li>\n<li>QAnimationGroup：以任意顺序播放一组不同类型的动画。</li>\n</ul>\n<p>以下是一个简单的QSequentialAnimationGroup例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QWidget* widget = <span class=\"keyword\">new</span> <span class=\"built_in\">QWidget</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">widget-&gt;<span class=\"built_in\">setGeometry</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">QPropertyAnimation *animation1 = <span class=\"keyword\">new</span> <span class=\"built_in\">QPropertyAnimation</span>(widget, <span class=\"string\">&quot;geometry&quot;</span>);</span><br><span class=\"line\">animation1-&gt;<span class=\"built_in\">setDuration</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">animation1-&gt;<span class=\"built_in\">setStartValue</span>(<span class=\"built_in\">QRect</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\">animation1-&gt;<span class=\"built_in\">setEndValue</span>(<span class=\"built_in\">QRect</span>(<span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">QPropertyAnimation *animation2 = <span class=\"keyword\">new</span> <span class=\"built_in\">QPropertyAnimation</span>(widget, <span class=\"string\">&quot;geometry&quot;</span>);</span><br><span class=\"line\">animation2-&gt;<span class=\"built_in\">setDuration</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">animation2-&gt;<span class=\"built_in\">setStartValue</span>(<span class=\"built_in\">QRect</span>(<span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\">animation2-&gt;<span class=\"built_in\">setEndValue</span>(<span class=\"built_in\">QRect</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">QSequentialAnimationGroup *group = <span class=\"keyword\">new</span> QSequentialAnimationGroup;</span><br><span class=\"line\">group-&gt;<span class=\"built_in\">addAnimation</span>(animation1);</span><br><span class=\"line\">group-&gt;<span class=\"built_in\">addAnimation</span>(animation2);</span><br><span class=\"line\">group-&gt;<span class=\"built_in\">start</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h2><p>QAnimation能够实现流畅的动画效果，但也需要注意一些性能上的问题。特别是在操作的控件数量较多或者动画较为复杂时，可能会导致性能问题。</p>\n<p>建议减少系统资源消耗，可以采用下列方法：</p>\n<ul>\n<li>通过调整<code>setDuration()</code>之类的参数来改变动画执行效率。</li>\n<li>对于无需操作（或者不可见）的控件，对其停用或暂停对应动画。</li>\n<li>优化界面控件布局和显示，使用缓存等手段来加速动画渲染过程。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>总之，QAnimation提供了丰富的功能，可以源源不断地为Qt应用开发人员带来无限可能。在实际应用中，需要结合具体业务需求选择各种不同的QPropertyAnimation、QSequentialAnimationGroup或其他动画组合方式，以及设置合理的参数和执行策略来达到最佳的动画效果和性能表现。</p>\n","text":"QAnimation的介绍QAnimation是Qt框架中提供的一个动画类，用于实现GUI控件的各种动画效果。可以通过QAnimation实现如平移、旋转、缩放...","permalink":"/post/Qt/进阶教程/QAnimation的介绍","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QAnimation%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">QAnimation的介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">基本用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB\"><span class=\"toc-text\">创建和启动动画</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E7%94%BB%E7%BB%84%E5%90%88\"><span class=\"toc-text\">动画组合</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E8%80%83%E8%99%91\"><span class=\"toc-text\">性能考虑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"QGraphicsDropShadowEffect的介绍","uid":"3c79f2443ad6c8142d688bf19c36b2ad","slug":"Qt/进阶教程/QGraphicsDropShadowEffect的介绍","date":"2021-10-04T03:34:06.000Z","updated":"2023-05-19T05:34:19.747Z","comments":true,"path":"api/articles/Qt/进阶教程/QGraphicsDropShadowEffect的介绍.json","keywords":null,"cover":null,"text":"QGraphicsDropShadowEffect的介绍QGraphicsDropShadowEffect是Qt中一个用于添加阴影效果的图形特效类，可以在图形或...","permalink":"/post/Qt/进阶教程/QGraphicsDropShadowEffect的介绍","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Q_D指针：Qt中的私有指针","uid":"4ffa61e24f1f48ce78e535f52d6a978c","slug":"Qt/进阶教程/Q_D指针：Qt中的私有指针","date":"2021-10-04T03:34:06.000Z","updated":"2023-05-19T05:34:19.748Z","comments":true,"path":"api/articles/Qt/进阶教程/Q_D指针：Qt中的私有指针.json","keywords":null,"cover":null,"text":"Q_D指针：Qt中的私有指针在开发Qt应用程序时，为了保护对象的私有数据并提高代码健壮性，经常会使用QObject和QSharedData等。然而，Q_D指针是...","permalink":"/post/Qt/进阶教程/Q_D指针：Qt中的私有指针","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}