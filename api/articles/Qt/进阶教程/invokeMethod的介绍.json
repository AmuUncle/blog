{"title":"QMetaObject::invokeMethod()的介绍","uid":"9e97b4c65e3bc73c141685e2a659e85b","slug":"Qt/进阶教程/invokeMethod的介绍","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.753Z","comments":true,"path":"api/articles/Qt/进阶教程/invokeMethod的介绍.json","keywords":null,"cover":null,"content":"<h1 id=\"QMetaObject-invokeMethod-的介绍\"><a href=\"#QMetaObject-invokeMethod-的介绍\" class=\"headerlink\" title=\"QMetaObject::invokeMethod()的介绍\"></a>QMetaObject::invokeMethod()的介绍</h1><p>在Qt框架中，QMetaObject类提供了一些反射机制可以实现类似于Java反射机制的功能。其中一个函数就是QMetaObject::invokeMethod()，它可以通过字符串调用对象的方法，同时支持异步执行和跨线程操作等特性。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>QMetaObject::invokeMethod()方法有多个重载，最常用的格式如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">QMetaObject::invokeMethod</span><span class=\"params\">(QObject *obj, <span class=\"type\">const</span> <span class=\"type\">char</span> *method,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Qt::ConnectionType type = Qt::AutoConnection,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericReturnArgument ret = QGenericReturnArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val0 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val1 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val2 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val3 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val4 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val5 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val6 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val7 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val8 = QGenericArgument(),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        QGenericArgument val9 = QGenericArgument())</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>obj</code>：要调用方法的QObject对象指针。</li>\n<li><code>method</code>：需要调用的方法名字符串。</li>\n<li><code>type</code>：连接类型，决定调用方法的线程以及调用形式。其值可以是Qt::DirectConnection（同步直接调用）、Qt::QueuedConnection（异步排队调用）和Qt::AutoConnection（根据线程自动选择同步直接调用或异步排队调用）。</li>\n<li><code>ret</code>：返回值类型。可以使用QGenericReturnArgument分别传入不同的返回类型，通常为void。</li>\n<li><code>val0～val9</code>：可选的十个参数值，根据需要传递。</li>\n</ul>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><p>下面是一个使用QMetaObject::invokeMethod()来调用另一个对象函数的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QThread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWorker</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyWorker</span><span class=\"params\">(QObject *parent = <span class=\"literal\">nullptr</span>)</span> : QObject(parent) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">finished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">progressMade</span><span class=\"params\">(<span class=\"type\">int</span> value)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">doWork</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"function\">emit <span class=\"title\">progressMade</span><span class=\"params\">(i)</span></span>;</span><br><span class=\"line\">            QThread::<span class=\"built_in\">msleep</span>(<span class=\"number\">50</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">emit <span class=\"title\">finished</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> : <span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyObject</span><span class=\"params\">(QObject *parent = <span class=\"literal\">nullptr</span>)</span> : QObject(parent) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onWorkerFinished</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Worker finished.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">onWorkerProgressMade</span><span class=\"params\">(<span class=\"type\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Progress made:&quot;</span> &lt;&lt; value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QCoreApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyWorker worker;</span><br><span class=\"line\">    MyObject obj;</span><br><span class=\"line\"></span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(&amp;worker, &amp;MyWorker::finished,</span><br><span class=\"line\">                     &amp;a, &amp;QCoreApplication::quit);</span><br><span class=\"line\">    QObject::<span class=\"built_in\">connect</span>(&amp;worker, &amp;MyWorker::progressMade,</span><br><span class=\"line\">                     &amp;obj, <span class=\"string\">&quot;onWorkerProgressMade&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QMetaObject::<span class=\"built_in\">invokeMethod</span>(&amp;worker, <span class=\"string\">&quot;doWork&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个MyWorker类和一个MyObject类。其中MyWorker类是一个计时器类，通过发射信号告诉外部工作进度情况。另一方面，MyObject类提供了两个槽函数onWorkerFinished()和onWorkerProgressMade()，用于处理MyWorker类的信号。</p>\n<p>在main函数中，我们首先创建了worker和obj对象，然后使用<code>&amp;worker, &quot;doWork&quot;</code>这种方式（即字符串调用）来调用MyWorker类中的doWork()方法，实现异步操作并执行worker对象的计时器操作。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>方法名字符串必须与槽函数名或者信号名字匹配。</li>\n<li>只有公共槽函数才能使用该方法调用，无法调用私有、保护槽函数及任何静态函数。</li>\n<li>参数根据调用的函数需要自行配置，使用过程中需要注意参数顺序和数据类型。</li>\n<li>调用时需要保证目标对象已经完成构造，并且处于合法状态。</li>\n</ul>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>总之，QMetaObject::invokeMethod()函数是一个非常方便的反射调用方法，可以让我们避免在跨线程信号连接中频繁考虑线程安全问题，简化代码流程，带来更好的编程体验。</p>\n","text":"QMetaObject::invokeMethod()的介绍在Qt框架中，QMetaObject类提供了一些反射机制可以实现类似于Java反射机制的功能。其中一...","permalink":"/post/Qt/进阶教程/invokeMethod的介绍","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QMetaObject-invokeMethod-%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">QMetaObject::invokeMethod()的介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">使用方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">使用示例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"QStyle的介绍","uid":"e00bfb303760f43313b1eb86fecbfba9","slug":"Qt/进阶教程/QStyle的介绍","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.748Z","comments":true,"path":"api/articles/Qt/进阶教程/QStyle的介绍.json","keywords":null,"cover":null,"text":"QStyle的介绍QStyle是Qt中一个用于自定义GUI外观的类，可以通过重写实现各种控件的显示效果。不同的Widget类有不同的默认样式，而通过QStyle...","permalink":"/post/Qt/进阶教程/QStyle的介绍","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用Qt实现HTTP中GET、POST、PUT、DELETE","uid":"ce4d369535f0325ae64c13ca955fe4c5","slug":"Qt/进阶教程/使用Qt实现HTTP中GET、POST、PUT、DELETE","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.754Z","comments":true,"path":"api/articles/Qt/进阶教程/使用Qt实现HTTP中GET、POST、PUT、DELETE.json","keywords":null,"cover":null,"text":"使用Qt实现HTTP中GET、POST、PUT、DELETE在现代的应用程序中，网络连接已成为不可或缺的一部分。这就意味着您必须编写代码来执行各种请求和响应操作...","permalink":"/post/Qt/进阶教程/使用Qt实现HTTP中GET、POST、PUT、DELETE","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}