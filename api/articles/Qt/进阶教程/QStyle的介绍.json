{"title":"QStyle的介绍","uid":"e00bfb303760f43313b1eb86fecbfba9","slug":"Qt/进阶教程/QStyle的介绍","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.748Z","comments":true,"path":"api/articles/Qt/进阶教程/QStyle的介绍.json","keywords":null,"cover":null,"content":"<h1 id=\"QStyle的介绍\"><a href=\"#QStyle的介绍\" class=\"headerlink\" title=\"QStyle的介绍\"></a>QStyle的介绍</h1><p>QStyle是Qt中一个用于自定义GUI外观的类，可以通过重写实现各种控件的显示效果。不同的Widget类有不同的默认样式，而通过QStyle，开发人员可以自定义整个应用程序，包括大小、颜色、字体和各种原始矢量图标。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"样式设置\"><a href=\"#样式设置\" class=\"headerlink\" title=\"样式设置\"></a>样式设置</h3><p>通过调用QWidget或QApplication上的setStyle()函数选择特定的样式。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">QStyle* myStyle = <span class=\"keyword\">new</span> <span class=\"built_in\">MyCustomStyle</span>();</span><br><span class=\"line\">a.<span class=\"built_in\">setStyle</span>(myStyle);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h3><p>通过继承QStyle并实现其中的虚函数来实现GUI控件和窗口部件的自定义渲染样式。</p>\n<p>以下是一个简单的样式子类定义示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomStyle</span> : <span class=\"keyword\">public</span> QStyle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawPrimitive</span><span class=\"params\">(PrimitiveElement element, <span class=\"type\">const</span> QStyleOption *option,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                        QPainter *painter, <span class=\"type\">const</span> QWidget *widget)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CustomStyle::drawPrimitive</span><span class=\"params\">(PrimitiveElement element, <span class=\"type\">const</span> QStyleOption *option,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                QPainter *painter, <span class=\"type\">const</span> QWidget *widget)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (element) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> PE_FrameFocusRect: &#123;</span><br><span class=\"line\">            <span class=\"function\">QPen <span class=\"title\">pen</span><span class=\"params\">(Qt::blue, <span class=\"number\">2</span>, Qt::SolidLine, Qt::SquareCap, Qt::MiterJoin)</span></span>;</span><br><span class=\"line\">            painter-&gt;<span class=\"built_in\">setPen</span>(pen);</span><br><span class=\"line\">            painter-&gt;<span class=\"built_in\">drawRect</span>(option-&gt;rect.<span class=\"built_in\">adjusted</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            QStyle::<span class=\"built_in\">drawPrimitive</span>(element, option, painter, widget);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>QStyle提供了许多常见的方法以便对GUI控件进行设置和管理，例如：</p>\n<ul>\n<li><code>polish()</code>：初始化QStyle对象（根据主题文件等优化样式）。</li>\n<li><code>unpolish()</code>：撤销QStyle对象的初始化。</li>\n<li><code>drawControl()</code>：为指定的GUI控件绘制样式。</li>\n<li><code>styleHint()</code>：检索指定GUI样式的提示信息。</li>\n<li><code>pixelMetric()</code>：检查特定的像素度量值。</li>\n</ul>\n<p>例如，以下代码演示如何将原生风格的按钮改成红色背景：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RedButtonStyle</span> : <span class=\"keyword\">public</span> QProxyStyle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">QRect <span class=\"title\">subElementRect</span><span class=\"params\">(SubElement element, <span class=\"type\">const</span> QStyleOption *option, <span class=\"type\">const</span> QWidget *widget)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element == SE_PushButtonContents)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> option-&gt;rect;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> QProxyStyle::<span class=\"built_in\">subElementRect</span>(element, option, widget);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">drawPrimitive</span><span class=\"params\">(PrimitiveElement element, <span class=\"type\">const</span> QStyleOption *option, QPainter *painter, <span class=\"type\">const</span> QWidget *widget)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element == PE_PanelButtonCommand) &#123;</span><br><span class=\"line\">            <span class=\"function\">QBrush <span class=\"title\">brush</span><span class=\"params\">(QColor(Qt::red))</span></span>;</span><br><span class=\"line\">            painter-&gt;<span class=\"built_in\">fillRect</span>(option-&gt;rect, brush);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            QProxyStyle::<span class=\"built_in\">drawPrimitive</span>(element, option, painter, widget);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">QPushButton* redButton = <span class=\"keyword\">new</span> <span class=\"built_in\">QPushButton</span>(<span class=\"string\">&quot;Red Button&quot;</span>);</span><br><span class=\"line\">redButton-&gt;<span class=\"built_in\">setStyle</span>(<span class=\"keyword\">new</span> RedButtonStyle);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>总之，QStyle可以帮助Qt应用程序自定义外观风格并实现各种控件的渲染效果。QStyle允许开发人员自定义窗口部件和控件的样式以及大小、颜色、字体和矢量图标等属性。在实际应用中，需要根据具体的需求选择合适的方法继承并重写对应的函数，自定义Qt应用程序的外观和视觉效果。</p>\n","text":"QStyle的介绍QStyle是Qt中一个用于自定义GUI外观的类，可以通过重写实现各种控件的显示效果。不同的Widget类有不同的默认样式，而通过QStyle...","permalink":"/post/Qt/进阶教程/QStyle的介绍","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QStyle%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">QStyle的介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">基本用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">样式设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">自定义样式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用Qt开发自定义委托的表格控件","uid":"5c952a910652e5178fb110ec12dbdb02","slug":"Qt/进阶教程/使用Qt开发自定义委托的表格控件","date":"2021-10-20T03:34:06.000Z","updated":"2023-05-19T05:34:19.755Z","comments":true,"path":"api/articles/Qt/进阶教程/使用Qt开发自定义委托的表格控件.json","keywords":null,"cover":null,"text":"使用Qt开发自定义委托的表格控件在Qt中，可以使用自定义委托（QStyledItemDelegate）来实现自定义的表格控件，这个机制可以让开发者完全掌握表格单...","permalink":"/post/Qt/进阶教程/使用Qt开发自定义委托的表格控件","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"QMetaObject::invokeMethod()的介绍","uid":"9e97b4c65e3bc73c141685e2a659e85b","slug":"Qt/进阶教程/invokeMethod的介绍","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.753Z","comments":true,"path":"api/articles/Qt/进阶教程/invokeMethod的介绍.json","keywords":null,"cover":null,"text":"QMetaObject::invokeMethod()的介绍在Qt框架中，QMetaObject类提供了一些反射机制可以实现类似于Java反射机制的功能。其中一...","permalink":"/post/Qt/进阶教程/invokeMethod的介绍","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}