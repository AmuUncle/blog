{"title":"使用Qt实现HTTP中GET、POST、PUT、DELETE","uid":"ce4d369535f0325ae64c13ca955fe4c5","slug":"Qt/进阶教程/使用Qt实现HTTP中GET、POST、PUT、DELETE","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.754Z","comments":true,"path":"api/articles/Qt/进阶教程/使用Qt实现HTTP中GET、POST、PUT、DELETE.json","keywords":null,"cover":null,"content":"<h1 id=\"使用Qt实现HTTP中GET、POST、PUT、DELETE\"><a href=\"#使用Qt实现HTTP中GET、POST、PUT、DELETE\" class=\"headerlink\" title=\"使用Qt实现HTTP中GET、POST、PUT、DELETE\"></a>使用Qt实现HTTP中GET、POST、PUT、DELETE</h1><p>在现代的应用程序中，网络连接已成为不可或缺的一部分。这就意味着您必须编写代码来执行各种请求和响应操作。本文将向您展示如何使用Qt库来实现HTTP中GET、POST、PUT、DELETE等基本请求，并解释每个请求行动背后的重要细节和选项。</p>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>首先，确保您的项目已正确链接Qt网络模块并包含它所需的头文件：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QNetworkAccessManager&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QNetworkRequest&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QNetworkReply&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><p>GET请求是最常见的HTTP请求类型之一。此请求类型从服务器请求指定的资源，没有请求正文，仅有URL和请求头。</p>\n<p>以下是一个简单的使用Qt的GET请求的示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">performGetRequest</span><span class=\"params\">(QUrl url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QNetworkAccessManager manager;</span><br><span class=\"line\">    <span class=\"function\">QNetworkRequest <span class=\"title\">request</span><span class=\"params\">(url)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QNetworkReply* reply = manager.<span class=\"built_in\">get</span>(request);</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(reply, &amp;QNetworkReply::finished, [reply]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reply-&gt;<span class=\"built_in\">error</span>() != QNetworkReply::NoError) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Error in performing get request: &quot;</span> &lt;&lt; reply-&gt;<span class=\"built_in\">errorString</span>();</span><br><span class=\"line\">            reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QByteArray data = reply-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received data: &quot;</span> &lt;&lt; data;</span><br><span class=\"line\">        reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们首先创建一个QNetworkAccessManager对象，然后创建一个QNetworkRequest，然后使用get()函数执行GET请求。我们使用finished()信号和一个lambda表达式来读取响应数据并清理资源。</p>\n<h2 id=\"POST请求\"><a href=\"#POST请求\" class=\"headerlink\" title=\"POST请求\"></a>POST请求</h2><p>POST请求是向Web服务器提交信息的常见方法。与GET请求不同，POST包含请求正文，并且通常用于将表单数据提交到服务器。下面是一个简单使用Qt中POST请求的示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">performPostRequest</span><span class=\"params\">(QUrl url, QVariantMap data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QNetworkAccessManager manager;</span><br><span class=\"line\">    <span class=\"function\">QNetworkRequest <span class=\"title\">request</span><span class=\"params\">(url)</span></span>;</span><br><span class=\"line\">    request.<span class=\"built_in\">setHeader</span>(QNetworkRequest::ContentTypeHeader, <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QByteArray postData;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> key : data.<span class=\"built_in\">keys</span>()) &#123;</span><br><span class=\"line\">        postData.<span class=\"built_in\">append</span>(key.<span class=\"built_in\">toLatin1</span>()).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;=&quot;</span>).<span class=\"built_in\">append</span>(data[key].<span class=\"built_in\">toByteArray</span>()).<span class=\"built_in\">append</span>(<span class=\"string\">&quot;&amp;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (postData.<span class=\"built_in\">endsWith</span>(<span class=\"string\">&quot;&amp;&quot;</span>)) &#123;</span><br><span class=\"line\">        postData.<span class=\"built_in\">chop</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    QNetworkReply* reply = manager.<span class=\"built_in\">post</span>(request, postData);</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(reply, &amp;QNetworkReply::finished, [reply]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reply-&gt;<span class=\"built_in\">error</span>() != QNetworkReply::NoError) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Error in performing post request: &quot;</span> &lt;&lt; reply-&gt;<span class=\"built_in\">errorString</span>();</span><br><span class=\"line\">            reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QByteArray data = reply-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received data: &quot;</span> &lt;&lt; data;</span><br><span class=\"line\">        reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们创建了一个QNetworkRequest并为其设置一些HTTP标头，然后将数据映射到post请求正文中，最后使用post()函数执行POST请求。同样，使用finished()信号和一个lambda表达式来处理响应数据。</p>\n<h2 id=\"PUT请求\"><a href=\"#PUT请求\" class=\"headerlink\" title=\"PUT请求\"></a>PUT请求</h2><p>PUT请求主要用于更新服务器上的资源，可以用于创建新资源。与POST类似，PUT请求包含一个请求正文。下面是如何在Qt中执行PUT请求的示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">performPutRequest</span><span class=\"params\">(QUrl url, QByteArray data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QNetworkAccessManager manager;</span><br><span class=\"line\">    <span class=\"function\">QNetworkRequest <span class=\"title\">request</span><span class=\"params\">(url)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QBuffer *buffer = <span class=\"keyword\">new</span> QBuffer;</span><br><span class=\"line\">    buffer-&gt;<span class=\"built_in\">setData</span>(data);</span><br><span class=\"line\">    request.<span class=\"built_in\">setHeader</span>(QNetworkRequest::ContentTypeHeader, <span class=\"string\">&quot;application/octet-stream&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QNetworkReply* reply = manager.<span class=\"built_in\">put</span>(request, buffer);</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(reply, &amp;QNetworkReply::finished, [reply, buffer]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reply-&gt;<span class=\"built_in\">error</span>() != QNetworkReply::NoError) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Error in performing put request: &quot;</span> &lt;&lt; reply-&gt;<span class=\"built_in\">errorString</span>();</span><br><span class=\"line\">            reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">            buffer-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QByteArray responseData = reply-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Received data: &quot;</span> &lt;&lt; responseData;</span><br><span class=\"line\">        reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">        buffer-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们创建了一个指向QBuffer对象的指针，它用于传递数据主体和管理内存。可选地，我们可以设置一些HTTP标头。</p>\n<h2 id=\"DELETE请求\"><a href=\"#DELETE请求\" class=\"headerlink\" title=\"DELETE请求\"></a>DELETE请求</h2><p>DELETE请求用于删除服务器上的资源，通常用于删除文件或恢复从数据库删除的条目。以下是如何使用Qt执行DELETE请求的示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">performDeleteRequest</span><span class=\"params\">(QUrl url)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QNetworkAccessManager manager;</span><br><span class=\"line\">    <span class=\"function\">QNetworkRequest <span class=\"title\">request</span><span class=\"params\">(url)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QNetworkReply* reply = manager.<span class=\"built_in\">deleteResource</span>(request);</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(reply, &amp;QNetworkReply::finished, [reply]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reply-&gt;<span class=\"built_in\">error</span>() != QNetworkReply::NoError) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Error in performing delete request: &quot;</span> &lt;&lt; reply-&gt;<span class=\"built_in\">errorString</span>();</span><br><span class=\"line\">            reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QByteArray responseData = reply-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Deleted data: &quot;</span> &lt;&lt; responseData;</span><br><span class=\"line\">        reply-&gt;<span class=\"built_in\">deleteLater</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们首先创建一个QNetworkAccessManager对象，然后创建一个QNetworkRequest，然后使用deleteResource()函数执行GET请求。我们使用finished()信号和一个lambda表达式来读取响应数据并清理资源。</p>\n","text":"使用Qt实现HTTP中GET、POST、PUT、DELETE在现代的应用程序中，网络连接已成为不可或缺的一部分。这就意味着您必须编写代码来执行各种请求和响应操作...","permalink":"/post/Qt/进阶教程/使用Qt实现HTTP中GET、POST、PUT、DELETE","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Qt%E5%AE%9E%E7%8E%B0HTTP%E4%B8%ADGET%E3%80%81POST%E3%80%81PUT%E3%80%81DELETE\"><span class=\"toc-text\">使用Qt实现HTTP中GET、POST、PUT、DELETE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">前置条件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GET%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">GET请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#POST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">POST请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PUT%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">PUT请求</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DELETE%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">DELETE请求</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"QMetaObject::invokeMethod()的介绍","uid":"9e97b4c65e3bc73c141685e2a659e85b","slug":"Qt/进阶教程/invokeMethod的介绍","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.753Z","comments":true,"path":"api/articles/Qt/进阶教程/invokeMethod的介绍.json","keywords":null,"cover":null,"text":"QMetaObject::invokeMethod()的介绍在Qt框架中，QMetaObject类提供了一些反射机制可以实现类似于Java反射机制的功能。其中一...","permalink":"/post/Qt/进阶教程/invokeMethod的介绍","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用Qt进行文件读写操作","uid":"ff14916e39f6b95778b03aff03b57cd4","slug":"Qt/进阶教程/使用Qt进行文件读写操作","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.755Z","comments":true,"path":"api/articles/Qt/进阶教程/使用Qt进行文件读写操作.json","keywords":null,"cover":null,"text":"使用Qt进行文件读写操作在现代应用程序中，处理文件读写操作是一项非常常见的任务。Qt提供了许多工具来轻松地读写文件。在本文中，我们将介绍如何使用Qt编写文件读写...","permalink":"/post/Qt/进阶教程/使用Qt进行文件读写操作","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}