{"title":"使用Qt开发自定义委托的表格控件","uid":"5c952a910652e5178fb110ec12dbdb02","slug":"Qt/进阶教程/使用Qt开发自定义委托的表格控件","date":"2021-10-20T03:34:06.000Z","updated":"2023-05-19T05:34:19.755Z","comments":true,"path":"api/articles/Qt/进阶教程/使用Qt开发自定义委托的表格控件.json","keywords":null,"cover":null,"content":"<h1 id=\"使用Qt开发自定义委托的表格控件\"><a href=\"#使用Qt开发自定义委托的表格控件\" class=\"headerlink\" title=\"使用Qt开发自定义委托的表格控件\"></a>使用Qt开发自定义委托的表格控件</h1><p>在Qt中，可以使用自定义委托（QStyledItemDelegate）来实现自定义的表格控件，这个机制可以让开发者完全掌握表格单元格UI的显示方式和用户交互方式。</p>\n<h2 id=\"步骤一：设置表格模型\"><a href=\"#步骤一：设置表格模型\" class=\"headerlink\" title=\"步骤一：设置表格模型\"></a>步骤一：设置表格模型</h2><p>在创建表格前，需要先创建一个表格模型来存储数据。Qt中提供了QAbstractTableModel对象，其派生类可用于创建各种类型的表格模型，如列表、树状等，这里我们以一个简单的列表为例。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomTableModel</span> : <span class=\"keyword\">public</span> QAbstractTableModel &#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">CustomTableModel</span><span class=\"params\">(QObject *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rowCount</span><span class=\"params\">(<span class=\"type\">const</span> QModelIndex &amp;parent)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">columnCount</span><span class=\"params\">(<span class=\"type\">const</span> QModelIndex &amp;parent)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">    <span class=\"function\">QVariant <span class=\"title\">data</span><span class=\"params\">(<span class=\"type\">const</span> QModelIndex &amp;index, <span class=\"type\">int</span> role)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">setData</span><span class=\"params\">(<span class=\"type\">const</span> QModelIndex &amp;index, <span class=\"type\">const</span> QVariant &amp;value, <span class=\"type\">int</span> role)</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    QList&lt;QString&gt; m_dataList;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码定义了一个<code>CustomTableModel</code>类，为了展示文章重点在委托上，具体实现略去。</p>\n<h2 id=\"步骤二：自定义委托\"><a href=\"#步骤二：自定义委托\" class=\"headerlink\" title=\"步骤二：自定义委托\"></a>步骤二：自定义委托</h2><p>自定义委托是实现表格控件的核心，而Qt中提供了QStyledItemDelegate对象作为实现基类，开发者通过继承直接派生此类并实现其中的四个虚函数以完成自定义：<code>paint()</code>、<code>createEditor()</code>、<code>setEditorData()</code> 和 <code>setModelData()</code>。</p>\n<p>例如，以绘制自定义委托为例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorDelegate</span> : <span class=\"keyword\">public</span> QStyledItemDelegate &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">ColorDelegate</span><span class=\"params\">(QObject *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">paint</span><span class=\"params\">(QPainter *painter, <span class=\"type\">const</span> QStyleOptionViewItem &amp;option, <span class=\"type\">const</span> QModelIndex &amp;index)</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>paint()</code>方法，可以实现对单元格的绘制方式，以下是一个简单的例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ColorDelegate::paint</span><span class=\"params\">(QPainter *painter, <span class=\"type\">const</span> QStyleOptionViewItem &amp;option, <span class=\"type\">const</span> QModelIndex &amp;index)</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    painter-&gt;<span class=\"built_in\">save</span>();</span><br><span class=\"line\">    painter-&gt;<span class=\"built_in\">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class=\"line\">    painter-&gt;<span class=\"built_in\">setPen</span>(Qt::NoPen);</span><br><span class=\"line\">    painter-&gt;<span class=\"built_in\">setBrush</span>(<span class=\"built_in\">QColor</span>(<span class=\"string\">&quot;#FF0000&quot;</span>));</span><br><span class=\"line\">    painter-&gt;<span class=\"built_in\">drawRect</span>(option.rect);</span><br><span class=\"line\"></span><br><span class=\"line\">    painter-&gt;<span class=\"built_in\">restore</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码的作用是：将单元格绘制成红色矩形。</p>\n<h2 id=\"步骤三：设置委托\"><a href=\"#步骤三：设置委托\" class=\"headerlink\" title=\"步骤三：设置委托\"></a>步骤三：设置委托</h2><p>一旦创建了自定义委托对象以后，需要将委托对象设置到表格控件中，从而绑定自定义单元格的显示方式和用户交互方式。</p>\n<p>在Qt中，通过表格模型的setItemDelegate()方法即可将自定义委托设置到表格中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ui-&gt;tableView-&gt;<span class=\"built_in\">setItemDelegate</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">ColorDelegate</span>(<span class=\"keyword\">this</span>));</span><br></pre></td></tr></table></figure>\n\n<p>以上代码将刚刚创建的红色单元格样式代理設置给表格。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用自定义委托来实现表格控件可以让开发者完全掌握单元格UI的显示方式和用户交互方式。在具体实现过程中，需要了解表格模型和委托类的具体用法，并重载QStyledItemDelegate的四个虚函数。</p>\n","text":"使用Qt开发自定义委托的表格控件在Qt中，可以使用自定义委托（QStyledItemDelegate）来实现自定义的表格控件，这个机制可以让开发者完全掌握表格单...","permalink":"/post/Qt/进阶教程/使用Qt开发自定义委托的表格控件","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Qt%E5%BC%80%E5%8F%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A7%94%E6%89%98%E7%9A%84%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6\"><span class=\"toc-text\">使用Qt开发自定义委托的表格控件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">步骤一：设置表格模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A7%94%E6%89%98\"><span class=\"toc-text\">步骤二：自定义委托</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A%E8%AE%BE%E7%BD%AE%E5%A7%94%E6%89%98\"><span class=\"toc-text\">步骤三：设置委托</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"在Qt中使用渐变色","uid":"b5f40241243dd23db9b5a3b73e4d29d8","slug":"Qt/进阶教程/在Qt中使用渐变色","date":"2021-10-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.755Z","comments":true,"path":"api/articles/Qt/进阶教程/在Qt中使用渐变色.json","keywords":null,"cover":null,"text":"在Qt中使用渐变色Qt是一个跨平台开发框架，在图形用户界面（GUI）设计中非常常用。渐变色能够为GUI添加视觉效果并提高用户体验。本文将介绍在Qt中如何使用渐变...","permalink":"/post/Qt/进阶教程/在Qt中使用渐变色","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"QStyle的介绍","uid":"e00bfb303760f43313b1eb86fecbfba9","slug":"Qt/进阶教程/QStyle的介绍","date":"2021-10-18T03:34:06.000Z","updated":"2023-05-19T05:34:19.748Z","comments":true,"path":"api/articles/Qt/进阶教程/QStyle的介绍.json","keywords":null,"cover":null,"text":"QStyle的介绍QStyle是Qt中一个用于自定义GUI外观的类，可以通过重写实现各种控件的显示效果。不同的Widget类有不同的默认样式，而通过QStyle...","permalink":"/post/Qt/进阶教程/QStyle的介绍","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}