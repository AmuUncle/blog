{"title":"QGraphicsView图形视图框架详解","uid":"ab15d9005aa078928d65bb1db59a3d04","slug":"Qt/进阶教程/QGraphicsView图形视图框架详解","date":"2023-05-13T03:00:12.000Z","updated":"2023-05-19T05:34:19.747Z","comments":true,"path":"api/articles/Qt/进阶教程/QGraphicsView图形视图框架详解.json","keywords":null,"cover":null,"content":"<h1 id=\"QGraphicsView图形视图框架详解\"><a href=\"#QGraphicsView图形视图框架详解\" class=\"headerlink\" title=\"QGraphicsView图形视图框架详解\"></a>QGraphicsView图形视图框架详解</h1><h2 id=\"什么是QGraphicsView？\"><a href=\"#什么是QGraphicsView？\" class=\"headerlink\" title=\"什么是QGraphicsView？\"></a>什么是QGraphicsView？</h2><p>QGraphicsView是Qt中的一个图形视图框架，它提供了一种方便的方式来显示和编辑大量的2D图形元素。QGraphicsView可以与QGraphicsScene一起使用，QGraphicsScene是一个2D图形场景，它包含了一组图形项，可以在其中添加、删除、移动和变换图形项。QGraphicsView提供了一种交互式的方式来显示和编辑QGraphicsScene中的图形项，包括平移、缩放、旋转、选择、拖拽等操作。</p>\n<h2 id=\"QGraphicsView的基本用法\"><a href=\"#QGraphicsView的基本用法\" class=\"headerlink\" title=\"QGraphicsView的基本用法\"></a>QGraphicsView的基本用法</h2><p>使用QGraphicsView需要以下几个步骤：</p>\n<ol>\n<li>创建一个QGraphicsScene对象，并在其中添加图形项。</li>\n<li>创建一个QGraphicsView对象，并将其设置为QGraphicsScene的视图。</li>\n<li>将QGraphicsView添加到窗口中，并显示出来。</li>\n</ol>\n<p>下面是一个简单的示例代码，演示了如何使用QGraphicsView显示一个矩形和一个文本项：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QGraphicsScene scene;</span><br><span class=\"line\">    QGraphicsRectItem *rectItem = scene.<span class=\"built_in\">addRect</span>(<span class=\"built_in\">QRectF</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"built_in\">QPen</span>(Qt::black), <span class=\"built_in\">QBrush</span>(Qt::red));</span><br><span class=\"line\">    QGraphicsTextItem *textItem = scene.<span class=\"built_in\">addText</span>(<span class=\"string\">&quot;Hello, QGraphicsView!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QGraphicsView <span class=\"title\">view</span><span class=\"params\">(&amp;scene)</span></span>;</span><br><span class=\"line\">    view.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们首先创建了一个QGraphicsScene对象，并在其中添加了一个矩形和一个文本项。然后，我们创建了一个QGraphicsView对象，并将其设置为QGraphicsScene的视图。最后，我们将QGraphicsView添加到窗口中，并显示出来。</p>\n<h2 id=\"QGraphicsView的交互操作\"><a href=\"#QGraphicsView的交互操作\" class=\"headerlink\" title=\"QGraphicsView的交互操作\"></a>QGraphicsView的交互操作</h2><p>QGraphicsView提供了一系列交互操作，可以方便地对QGraphicsScene中的图形项进行操作。下面是一些常用的交互操作：</p>\n<ul>\n<li>平移：按住鼠标左键并拖动视图，可以平移视图。</li>\n<li>缩放：使用鼠标滚轮可以缩放视图。</li>\n<li>旋转：按住鼠标右键并拖动视图，可以旋转视图。</li>\n<li>选择：单击图形项可以选择它，按住Ctrl键可以多选图形项。</li>\n<li>拖拽：按住鼠标左键并拖动图形项，可以拖拽它。</li>\n</ul>\n<p>下面是一个示例代码，演示了如何使用QGraphicsView的交互操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QGraphicsScene scene;</span><br><span class=\"line\">    QGraphicsRectItem *rectItem = scene.<span class=\"built_in\">addRect</span>(<span class=\"built_in\">QRectF</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>), <span class=\"built_in\">QPen</span>(Qt::black), <span class=\"built_in\">QBrush</span>(Qt::red));</span><br><span class=\"line\">    QGraphicsTextItem *textItem = scene.<span class=\"built_in\">addText</span>(<span class=\"string\">&quot;Hello, QGraphicsView!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QGraphicsView <span class=\"title\">view</span><span class=\"params\">(&amp;scene)</span></span>;</span><br><span class=\"line\">    view.<span class=\"built_in\">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class=\"line\">    view.<span class=\"built_in\">setDragMode</span>(QGraphicsView::ScrollHandDrag);</span><br><span class=\"line\">    view.<span class=\"built_in\">setInteractive</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    view.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们设置了QGraphicsView的渲染选项为抗锯齿，设置了拖拽模式为滚动手柄拖拽，并将交互模式设置为可交互。这样，我们就可以使用QGraphicsView的交互操作来操作QGraphicsScene中的图形项了。</p>\n<h2 id=\"QGraphicsView的高级用法\"><a href=\"#QGraphicsView的高级用法\" class=\"headerlink\" title=\"QGraphicsView的高级用法\"></a>QGraphicsView的高级用法</h2><p>除了基本用法和交互操作外，QGraphicsView还提供了一些高级用法，包括：</p>\n<ul>\n<li>自定义视图：可以继承QGraphicsView类，并重写它的一些函数来实现自定义的视图。</li>\n<li>自定义图形项：可以继承QGraphicsItem类，并重写它的一些函数来实现自定义的图形项。</li>\n<li>图形项组合：可以将多个图形项组合成一个组，并对组进行操作。</li>\n<li>图形项动画：可以使用QPropertyAnimation类来实现图形项的动画效果。</li>\n</ul>\n<p>下面是一个示例代码，演示了如何使用QGraphicsView的高级用法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QtWidgets&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomView</span> : <span class=\"keyword\">public</span> QGraphicsView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CustomView</span>(QGraphicsScene *scene, QWidget *parent = <span class=\"literal\">nullptr</span>) : <span class=\"built_in\">QGraphicsView</span>(scene, parent)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class=\"line\">        <span class=\"built_in\">setDragMode</span>(QGraphicsView::ScrollHandDrag);</span><br><span class=\"line\">        <span class=\"built_in\">setInteractive</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">wheelEvent</span><span class=\"params\">(QWheelEvent *event)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (event-&gt;<span class=\"built_in\">modifiers</span>() &amp; Qt::ControlModifier) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> scaleFactor = <span class=\"number\">1.15</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (event-&gt;<span class=\"built_in\">delta</span>() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">scale</span>(scaleFactor, scaleFactor);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">scale</span>(<span class=\"number\">1</span> / scaleFactor, <span class=\"number\">1</span> / scaleFactor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            event-&gt;<span class=\"built_in\">accept</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            QGraphicsView::<span class=\"built_in\">wheelEvent</span>(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomItem</span> : <span class=\"keyword\">public</span> QGraphicsItem</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CustomItem</span>(QGraphicsItem *parent = <span class=\"literal\">nullptr</span>) : <span class=\"built_in\">QGraphicsItem</span>(parent)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setFlag</span>(QGraphicsItem::ItemIsMovable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QRectF <span class=\"title\">boundingRect</span><span class=\"params\">()</span> <span class=\"type\">const</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">QRectF</span>(<span class=\"number\">-50</span>, <span class=\"number\">-50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">paint</span><span class=\"params\">(QPainter *painter, <span class=\"type\">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class=\"literal\">nullptr</span>)</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        painter-&gt;<span class=\"built_in\">setPen</span>(Qt::black);</span><br><span class=\"line\">        painter-&gt;<span class=\"built_in\">setBrush</span>(Qt::yellow);</span><br><span class=\"line\">        painter-&gt;<span class=\"built_in\">drawEllipse</span>(<span class=\"number\">-50</span>, <span class=\"number\">-50</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QGraphicsScene scene;</span><br><span class=\"line\">    CustomItem *item = <span class=\"keyword\">new</span> CustomItem;</span><br><span class=\"line\">    scene.<span class=\"built_in\">addItem</span>(item);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">CustomView <span class=\"title\">view</span><span class=\"params\">(&amp;scene)</span></span>;</span><br><span class=\"line\">    view.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们首先创建了一个CustomView类，继承自QGraphicsView类，并重写了它的wheelEvent函数，实现了缩放视图的功能。然后，我们创建了一个CustomItem类，继承自QGraphicsItem类，并重写了它的boundingRect和paint函数，实现了一个自定义的图形项。最后，我们将CustomItem添加到QGraphicsScene中，并使用CustomView来显示QGraphicsScene。</p>\n<p>通过上面的示例代码，我们可以看到QGraphicsView的高级用法非常灵活，可以根据需要进行自定义和扩展。如果您想要进一步了解QGraphicsView的高级用法，可以参考Qt官方文档或者相关书籍。</p>\n","text":"QGraphicsView图形视图框架详解什么是QGraphicsView？QGraphicsView是Qt中的一个图形视图框架，它提供了一种方便的方式来显示和...","permalink":"/post/Qt/进阶教程/QGraphicsView图形视图框架详解","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QGraphicsView%E5%9B%BE%E5%BD%A2%E8%A7%86%E5%9B%BE%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">QGraphicsView图形视图框架详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFQGraphicsView%EF%BC%9F\"><span class=\"toc-text\">什么是QGraphicsView？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QGraphicsView%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">QGraphicsView的基本用法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QGraphicsView%E7%9A%84%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">QGraphicsView的交互操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QGraphicsView%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">QGraphicsView的高级用法</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Qt状态机与Qt动画的结合使用","uid":"71fd0f421f976303f8841082c0a437ed","slug":"Qt/进阶教程/Qt状态机与Qt动画的结合使用","date":"2023-05-13T05:46:53.000Z","updated":"2023-05-19T05:34:19.752Z","comments":true,"path":"api/articles/Qt/进阶教程/Qt状态机与Qt动画的结合使用.json","keywords":null,"cover":null,"text":"Qt状态机与Qt动画的结合使用Qt是一个流行的跨平台应用程序框架，它可以帮助开发者轻松地创建面向对象的GUI应用程序。Qt框架提供了许多有用的工具和库，其中包括...","permalink":"/post/Qt/进阶教程/Qt状态机与Qt动画的结合使用","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Qt多进程通信","uid":"dc668aa3f9d7827fe3cbf73af04ed4c5","slug":"Qt/进阶教程/Qt多进程通信","date":"2023-05-13T03:00:12.000Z","updated":"2023-05-19T05:34:19.751Z","comments":true,"path":"api/articles/Qt/进阶教程/Qt多进程通信.json","keywords":null,"cover":null,"text":"Qt多进程通信在许多应用程序中，多进程通信（IPC）是必不可少的。例如，一个应用程序可能需要将数据从一个进程传递到另一个进程，或者需要在两个进程之间同步信息。Q...","permalink":"/post/Qt/进阶教程/Qt多进程通信","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}