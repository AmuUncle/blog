{"title":"Qt内置宏及其含义","uid":"5b703c364468afe9449fdcd6becdc305","slug":"Qt/进阶教程/Qt内置宏及其含义","date":"2021-11-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.750Z","comments":true,"path":"api/articles/Qt/进阶教程/Qt内置宏及其含义.json","keywords":null,"cover":null,"content":"<h1 id=\"Qt内置宏及其含义\"><a href=\"#Qt内置宏及其含义\" class=\"headerlink\" title=\"Qt内置宏及其含义\"></a>Qt内置宏及其含义</h1><p>当您开始使用Qt编程时，会发现在Qt代码中频繁出现了各种奇怪的宏定义。它们是用于执行不同功能的特殊指令。在Qt中有许多这样的宏定义。在本篇教程中，我们将深入探讨这些宏的含义和用法。</p>\n<h2 id=\"Q-OBJECT\"><a href=\"#Q-OBJECT\" class=\"headerlink\" title=\"Q_OBJECT\"></a>Q_OBJECT</h2><p><code>Q_OBJECT</code> 是一个非常重要的宏。它必须出现在 Qt 类声明的私有部分中。该宏告诉 Qt 元对象编译器在 MOC (Meta-Object Compiler) 中为该类生成元对象。这使得信号和槽、元数据等特性得以使用。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyWidget</span><span class=\"params\">(QWidget *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">buttonClicked</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> slots:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleButton</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果您使用的 IDE 不支持自动运行 MOC，您需要确保在每次更改包含 <code>Q_OBJECT</code> 的头文件之后手动运行 MOC。</p>\n<h2 id=\"Q-PROPERTY\"><a href=\"#Q-PROPERTY\" class=\"headerlink\" title=\"Q_PROPERTY\"></a>Q_PROPERTY</h2><p><code>Q_PROPERTY</code> 宏用于声明属性。它与访问器方法一起使用，以便更方便地查询和设置属性值。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Q_OBJECT</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">Q_PROPERTY</span><span class=\"params\">(QString text READ text WRITE setText NOTIFY textChanged)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span>:</span></span><br><span class=\"line\"><span class=\"function\">    explicit MyWidget(QWidget *parent =</span> <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">QString <span class=\"title\">text</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setText</span><span class=\"params\">(<span class=\"type\">const</span> QString &amp;text)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">textChanged</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    QString m_text;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">QString <span class=\"title\">MyWidget::text</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::setText</span><span class=\"params\">(<span class=\"type\">const</span> QString &amp;text)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text != m_text) &#123;</span><br><span class=\"line\">        m_text = text;</span><br><span class=\"line\">        <span class=\"function\">emit <span class=\"title\">textChanged</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此示例中声明了一个具有 <code>text</code> 属性的 <code>MyWidget</code> 类。使用 <code>Q_PROPERTY</code> 声明为只读或读&#x2F;写属性。设置器方法应该在修改属性时发出对应的信号。</p>\n<h2 id=\"Q-SIGNALS-和-Q-SLOTS\"><a href=\"#Q-SIGNALS-和-Q-SLOTS\" class=\"headerlink\" title=\"Q_SIGNALS 和 Q_SLOTS\"></a>Q_SIGNALS 和 Q_SLOTS</h2><p><code>Q_SIGNALS</code> 和 <code>Q_SLOTS</code> 宏分别用于声明信号和槽。这使得编译器能够在元对象中注册它们以进行运行时调用。例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyWidget</span><span class=\"params\">(QWidget *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">buttonClicked</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> slots:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">handleButton</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在此示例中，<code>MyWidget</code> 的 <code>buttonClicked()</code> 信号和 <code>handleButton()</code> 槽被声明为 <code>Q_SIGNALS</code> 和 <code>Q_SLOTS</code>。</p>\n<h2 id=\"Q-EMIT\"><a href=\"#Q-EMIT\" class=\"headerlink\" title=\"Q_EMIT\"></a>Q_EMIT</h2><p><code>Q_EMIT</code> 宏用于发射信号。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyWidget::handleButton</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"function\">Q_EMIT <span class=\"title\">buttonClicked</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"QT-VERSION-CHECK\"><a href=\"#QT-VERSION-CHECK\" class=\"headerlink\" title=\"QT_VERSION_CHECK\"></a>QT_VERSION_CHECK</h2><p><code>QT_VERSION_CHECK(major, minor, patch)</code> 用于在预处理期间检查 Qt 库版本。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> QT_VERSION_CHECK(5, 14, 0)</span></span><br><span class=\"line\"><span class=\"comment\">// code for Qt 5.14.0 and later</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"comment\">// code for earlier versions of Qt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Q-DECL-OVERRIDE-和-Q-DECL-FINAL\"><a href=\"#Q-DECL-OVERRIDE-和-Q-DECL-FINAL\" class=\"headerlink\" title=\"Q_DECL_OVERRIDE 和 Q_DECL_FINAL\"></a>Q_DECL_OVERRIDE 和 Q_DECL_FINAL</h2><p><code>Q_DECL_OVERRIDE</code> 和 <code>Q_DECL_FINAL</code> 宏分别用于覆盖和禁止覆盖虚函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyWidget</span><span class=\"params\">(QWidget *parent = <span class=\"literal\">nullptr</span>)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">paintEvent</span><span class=\"params\">(QPaintEvent *event)</span> Q_DECL_OVERRIDE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">mousePressEvent</span><span class=\"params\">(QMouseEvent *event)</span> Q_DECL_FINAL</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Q-DISABLE-COPY-和-Q-DISABLE-MOVE\"><a href=\"#Q-DISABLE-COPY-和-Q-DISABLE-MOVE\" class=\"headerlink\" title=\"Q_DISABLE_COPY 和 Q_DISABLE_MOVE\"></a>Q_DISABLE_COPY 和 Q_DISABLE_MOVE</h2><p><code>Q_DISABLE_COPY</code> 和 <code>Q_DISABLE_MOVE</code> 宏用于禁用类的默认拷贝构造函数和移动构造函数。这是为了防止代码复制和意外使用不安全的拷贝和移动函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Q_DISABLE_COPY</span>(MyWidget)</span><br><span class=\"line\">    <span class=\"built_in\">Q_DISABLE_MOVE</span>(MyWidget)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyWidget</span><span class=\"params\">(QWidget *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上是常用的 Qt 内置宏，它们可以使 Qt 编程更加简洁和高效。希望本篇教程能够对您有所帮助！</p>\n","text":"Qt内置宏及其含义当您开始使用Qt编程时，会发现在Qt代码中频繁出现了各种奇怪的宏定义。它们是用于执行不同功能的特殊指令。在Qt中有许多这样的宏定义。在本篇教程...","permalink":"/post/Qt/进阶教程/Qt内置宏及其含义","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qt%E5%86%85%E7%BD%AE%E5%AE%8F%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">Qt内置宏及其含义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-OBJECT\"><span class=\"toc-text\">Q_OBJECT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-PROPERTY\"><span class=\"toc-text\">Q_PROPERTY</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-SIGNALS-%E5%92%8C-Q-SLOTS\"><span class=\"toc-text\">Q_SIGNALS 和 Q_SLOTS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-EMIT\"><span class=\"toc-text\">Q_EMIT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QT-VERSION-CHECK\"><span class=\"toc-text\">QT_VERSION_CHECK</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-DECL-OVERRIDE-%E5%92%8C-Q-DECL-FINAL\"><span class=\"toc-text\">Q_DECL_OVERRIDE 和 Q_DECL_FINAL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Q-DISABLE-COPY-%E5%92%8C-Q-DISABLE-MOVE\"><span class=\"toc-text\">Q_DISABLE_COPY 和 Q_DISABLE_MOVE</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Qt事件处理机制流程","uid":"de5d17019a62106c24ae84eccced9caf","slug":"Qt/进阶教程/Qt事件处理机制流程","date":"2021-11-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.750Z","comments":true,"path":"api/articles/Qt/进阶教程/Qt事件处理机制流程.json","keywords":null,"cover":null,"text":"Qt事件处理机制流程Qt事件处理机制是实现GUI程序的重要组成部分。在Qt中，所有的用户操作（例如鼠标点击、键盘输入等）都会被转换为事件，然后交给相应的对象进行...","permalink":"/post/Qt/进阶教程/Qt事件处理机制流程","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"什么是Qt pro文件？","uid":"cb41401ee69235767505fab37433a483","slug":"Qt/进阶教程/什么是Qt pro文件？","date":"2021-10-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.754Z","comments":true,"path":"api/articles/Qt/进阶教程/什么是Qt pro文件？.json","keywords":null,"cover":null,"text":"什么是Qt pro文件？Qt pro文件是QT项目管理器使用的配置文件。它们在Qt创建时自动生成，并且包含有关工程的信息，如源文件、库和编译选项等。 如何创建Q...","permalink":"/post/Qt/进阶教程/什么是Qt pro文件？","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}