{"title":"在Qt中使用渐变色","uid":"b5f40241243dd23db9b5a3b73e4d29d8","slug":"Qt/进阶教程/在Qt中使用渐变色","date":"2021-10-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.755Z","comments":true,"path":"api/articles/Qt/进阶教程/在Qt中使用渐变色.json","keywords":null,"cover":null,"content":"<h1 id=\"在Qt中使用渐变色\"><a href=\"#在Qt中使用渐变色\" class=\"headerlink\" title=\"在Qt中使用渐变色\"></a>在Qt中使用渐变色</h1><p>Qt是一个跨平台开发框架，在图形用户界面（GUI）设计中非常常用。渐变色能够为GUI添加视觉效果并提高用户体验。本文将介绍在Qt中如何使用渐变色。</p>\n<h2 id=\"安装和设置\"><a href=\"#安装和设置\" class=\"headerlink\" title=\"安装和设置\"></a>安装和设置</h2><p>在Qt中使用渐变色需要在项目文件中添加 <code>QT += widgets</code>，这样才能使用QPainter等相关API绘制渐变色。</p>\n<h2 id=\"垂直渐变\"><a href=\"#垂直渐变\" class=\"headerlink\" title=\"垂直渐变\"></a>垂直渐变</h2><p>首先，让我们看看如何绘制一条垂直的渐变色。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QLinearGradient <span class=\"title\">gradient</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, height())</span></span>;</span><br><span class=\"line\">gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">0</span>, Qt::white);</span><br><span class=\"line\">gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">1</span>, Qt::black);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">painter.<span class=\"built_in\">setBrush</span>(gradient);</span><br><span class=\"line\">painter.<span class=\"built_in\">drawRect</span>(<span class=\"built_in\">rect</span>());</span><br></pre></td></tr></table></figure>\n\n<p>上述代码创建了一个从顶部到底部渐变的<code>QLinearGradient</code>对象，然后通过<code>setColorAt()</code>函数设置颜色。最后，将该渐变对象设为画刷(<code>setBrush()</code>)并用<code>drawRect()</code>函数绘制出来。</p>\n<h2 id=\"水平渐变\"><a href=\"#水平渐变\" class=\"headerlink\" title=\"水平渐变\"></a>水平渐变</h2><p>下面，我们来看看如何绘制水平方向上的渐变色：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QLinearGradient <span class=\"title\">gradient</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">0</span>, Qt::white);</span><br><span class=\"line\">gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">1</span>, Qt::black);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">painter.<span class=\"built_in\">setBrush</span>(gradient);</span><br><span class=\"line\">painter.<span class=\"built_in\">drawRect</span>(<span class=\"built_in\">rect</span>());</span><br></pre></td></tr></table></figure>\n\n<p>与垂直渐变相似，只需要将<code>QLinearGradient</code>对象中的起点和终点改为<code>(0, 0)</code>和<code>(width(), 0)</code>即可。</p>\n<h2 id=\"辐射渐变\"><a href=\"#辐射渐变\" class=\"headerlink\" title=\"辐射渐变\"></a>辐射渐变</h2><p>除了线性渐变外，Qt还支持辐射渐变。相对于线性渐变，辐射渐变通常用于绘制圆形的渐变色填充效果。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QRadialGradient <span class=\"title\">gradient</span><span class=\"params\">(QPointF(width()/<span class=\"number\">2</span>, height()/<span class=\"number\">2</span>), qMax(width(), height())/<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">0</span>, Qt::white);</span><br><span class=\"line\">gradient.<span class=\"built_in\">setColorAt</span>(<span class=\"number\">1</span>, Qt::black);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">QPainter <span class=\"title\">painter</span><span class=\"params\">(<span class=\"keyword\">this</span>)</span></span>;</span><br><span class=\"line\">painter.<span class=\"built_in\">setBrush</span>(gradient);</span><br><span class=\"line\">painter.<span class=\"built_in\">drawEllipse</span>(<span class=\"built_in\">rect</span>());</span><br></pre></td></tr></table></figure>\n\n<p>上述代码创建了一个从中心到各个角的渐变的<code>QRadialGradient</code>对象，并使用<code>setColorAt()</code>函数设置颜色。最后，将该渐变对象设为画刷并在屏幕上用<code>drawEllipse()</code>函数绘制出来。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在Qt中使用渐变色非常简单。通过上述示例代码，您可以快速了解如何在Qt中使用垂直、水平和辐射渐变。使用渐变色不仅能够很好地提升用户体验，还可以为GUI设计增添一些华丽的动态效果。</p>\n","text":"在Qt中使用渐变色Qt是一个跨平台开发框架，在图形用户界面（GUI）设计中非常常用。渐变色能够为GUI添加视觉效果并提高用户体验。本文将介绍在Qt中如何使用渐变...","permalink":"/post/Qt/进阶教程/在Qt中使用渐变色","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B8%90%E5%8F%98%E8%89%B2\"><span class=\"toc-text\">在Qt中使用渐变色</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E5%92%8C%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">安装和设置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%82%E7%9B%B4%E6%B8%90%E5%8F%98\"><span class=\"toc-text\">垂直渐变</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B0%B4%E5%B9%B3%E6%B8%90%E5%8F%98\"><span class=\"toc-text\">水平渐变</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%90%E5%B0%84%E6%B8%90%E5%8F%98\"><span class=\"toc-text\">辐射渐变</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"什么是Qt pro文件？","uid":"cb41401ee69235767505fab37433a483","slug":"Qt/进阶教程/什么是Qt pro文件？","date":"2021-10-22T03:34:06.000Z","updated":"2023-05-19T05:34:19.754Z","comments":true,"path":"api/articles/Qt/进阶教程/什么是Qt pro文件？.json","keywords":null,"cover":null,"text":"什么是Qt pro文件？Qt pro文件是QT项目管理器使用的配置文件。它们在Qt创建时自动生成，并且包含有关工程的信息，如源文件、库和编译选项等。 如何创建Q...","permalink":"/post/Qt/进阶教程/什么是Qt pro文件？","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"使用Qt开发自定义委托的表格控件","uid":"5c952a910652e5178fb110ec12dbdb02","slug":"Qt/进阶教程/使用Qt开发自定义委托的表格控件","date":"2021-10-20T03:34:06.000Z","updated":"2023-05-19T05:34:19.755Z","comments":true,"path":"api/articles/Qt/进阶教程/使用Qt开发自定义委托的表格控件.json","keywords":null,"cover":null,"text":"使用Qt开发自定义委托的表格控件在Qt中，可以使用自定义委托（QStyledItemDelegate）来实现自定义的表格控件，这个机制可以让开发者完全掌握表格单...","permalink":"/post/Qt/进阶教程/使用Qt开发自定义委托的表格控件","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Qt进阶教程","slug":"Qt进阶教程","count":23,"path":"api/categories/Qt进阶教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}