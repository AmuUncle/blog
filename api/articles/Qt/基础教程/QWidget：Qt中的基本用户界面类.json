{"title":"QWidget：Qt中的基本用户界面类","uid":"8c7d4356d8bda200c9e956adb3733402","slug":"Qt/基础教程/QWidget：Qt中的基本用户界面类","date":"2021-10-03T02:34:06.000Z","updated":"2023-05-19T05:34:19.703Z","comments":true,"path":"api/articles/Qt/基础教程/QWidget：Qt中的基本用户界面类.json","keywords":null,"cover":null,"content":"<h1 id=\"QWidget：Qt中的基本用户界面类\"><a href=\"#QWidget：Qt中的基本用户界面类\" class=\"headerlink\" title=\"QWidget：Qt中的基本用户界面类\"></a>QWidget：Qt中的基本用户界面类</h1><p>QString类是Qt中非常重要的一个类，用于表示基本用户界面构件。它是其他用户界面(<code>Widget</code>)类的基类，例如QMainWindow、QDialog和QPushButton等。在本文中，我们将详细介绍QWidget类的功能和应用场景。</p>\n<h2 id=\"创建QWidget对象\"><a href=\"#创建QWidget对象\" class=\"headerlink\" title=\"创建QWidget对象\"></a>创建QWidget对象</h2><p>为了创建QWidget对象，我们可以使用QWidget的默认构造函数或指定其父对象、名称和其他属性的构造函数。在这里，我们来看一下如何使用默认构造函数创建一个简单的QWidget对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QWidget widget;                <span class=\"comment\">// 默认的QWidget实例</span></span><br><span class=\"line\">    widget.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们使用QWidget的默认构造函数创建了一个新的名为“widget”的QWidget实例，并通过调用其show()方法使其在屏幕上可见。</p>\n<h2 id=\"QWidget属性和方法\"><a href=\"#QWidget属性和方法\" class=\"headerlink\" title=\"QWidget属性和方法\"></a>QWidget属性和方法</h2><p>QWidget有许多属性和方法，在这里我们列出了其中的一些最常用和最重要的:</p>\n<ul>\n<li>resize(): 设置QWidget的大小。</li>\n<li>move(): 将QWidget移动到给定窗口坐标。</li>\n<li>show(): 显示QWidget。</li>\n<li>hide(): 隐藏QWidget。</li>\n<li>setWindowTitle(): 设置窗口标题。</li>\n<li>setWindowIcon(): 设置窗口图标。</li>\n<li>setLayout(): 设置QWidget的布局管理器。</li>\n</ul>\n<p>例如，在以下代码中，我们展示了如何使用创建一个QWidget界面和设置标题、大小和布局：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QHBoxLayout&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    QWidget widget;</span><br><span class=\"line\">    widget.<span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;My Widget&quot;</span>);</span><br><span class=\"line\">    widget.<span class=\"built_in\">resize</span>(<span class=\"number\">400</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QHBoxLayout* layout = <span class=\"keyword\">new</span> QHBoxLayout;</span><br><span class=\"line\">    QLabel* label = <span class=\"keyword\">new</span> <span class=\"built_in\">QLabel</span>(<span class=\"string\">&quot;Hello World&quot;</span>, &amp;widget);</span><br><span class=\"line\">    layout-&gt;<span class=\"built_in\">addWidget</span>(label);</span><br><span class=\"line\">    widget.<span class=\"built_in\">setLayout</span>(layout);</span><br><span class=\"line\"></span><br><span class=\"line\">    widget.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们首先创建了一个新的QWidget实例“widget”，并设置其标题为“My Widget”和大小为400x300。然后，我们创建了一个水平布局并向其中添加了一个包含“Hello World”文本的标签。最后，我们将该布局设置为QWidget的布局管理器，并使QWidget在屏幕上可见。</p>\n<h2 id=\"QWidget事件处理\"><a href=\"#QWidget事件处理\" class=\"headerlink\" title=\"QWidget事件处理\"></a>QWidget事件处理</h2><p>所有QWidget都有事件处理方法。我们可以使用这些方法来响应来自系统和用户界面的事件，例如窗口重绘、鼠标单击等事件。这些方法允许我们编写自定义事件处理程序以控制用户界面的行为。</p>\n<p>常用的QWidget事件处理方法有：</p>\n<ul>\n<li>mousePressEvent(QMouseEvent *event): 鼠标按下事件。</li>\n<li>mouseMoveEvent(QMouseEvent *event): 鼠标移动事件。</li>\n<li>keyPressEvent(QKeyEvent *event): 键盘按下事件。</li>\n<li>resizeEvent(QResizeEvent *event): 窗口大小调整事件。</li>\n</ul>\n<p>例如，在以下代码中，我们展示了如何实现QWidget的事件处理：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QMouseEvent&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyWidget</span> : <span class=\"keyword\">public</span> QWidget &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">MyWidget</span>() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mousePressEvent</span><span class=\"params\">(QMouseEvent *event)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Mouse pressed at:&quot;</span> &lt;&lt; event-&gt;<span class=\"built_in\">pos</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">app</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyWidget widget;</span><br><span class=\"line\">    widget.<span class=\"built_in\">resize</span>(<span class=\"number\">400</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\">    widget.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> app.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们首先创建了一个新的“MyWidget”类派生自QWidget，并重写了其mousePressEvent()方法，以处理鼠标按下事件，并通过qDebug()输出点击位置的坐标。最后，我们创建了一个名为“widget”的MyWidget对象，并使它可见。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>在Qt应用程序中，QWidget是所有用户界面基础的类和父类。它提供了许多属性和方法，可以帮助我们轻松地创建、设置并响应用户界面。除此之外，QWidget还提供了一个强大的事件处理系统，使我们能够编写自定义事件处理程序来控制应用程序的行为。</p>\n","text":"QWidget：Qt中的基本用户界面类QString类是Qt中非常重要的一个类，用于表示基本用户界面构件。它是其他用户界面(Widget)类的基类，例如QMai...","permalink":"/post/Qt/基础教程/QWidget：Qt中的基本用户界面类","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QWidget%EF%BC%9AQt%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%B1%BB\"><span class=\"toc-text\">QWidget：Qt中的基本用户界面类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAQWidget%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">创建QWidget对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QWidget%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">QWidget属性和方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QWidget%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">QWidget事件处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Qt中创建雷达扫描界面","uid":"4d9fef62ec588fa571ad0698797e052d","slug":"Qt/基础教程/Qt中创建雷达扫描界面","date":"2021-10-03T05:34:06.000Z","updated":"2023-05-19T05:34:19.704Z","comments":true,"path":"api/articles/Qt/基础教程/Qt中创建雷达扫描界面.json","keywords":null,"cover":null,"text":"Qt中创建雷达扫描界面步骤1：添加QPainter显示区域在Qt工程中打开要处理的UI视图文件。将“QPainter”放入核心窗口中，并设置其大小和位置。下面是...","permalink":"/post/Qt/基础教程/Qt中创建雷达扫描界面","photos":[],"count_time":{"symbolsCount":805,"symbolsTime":"1 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Qt使用布局","uid":"ef385d6b305945df4f94b44ac9927f7a","slug":"Qt/基础教程/Qt使用布局","date":"2021-10-03T02:34:06.000Z","updated":"2023-05-19T05:34:19.705Z","comments":true,"path":"api/articles/Qt/基础教程/Qt使用布局.json","keywords":null,"cover":null,"text":"Qt使用布局在这篇文章中，我们将会介绍Qt中的各种布局方式，以及如何使用它们来管理控件的位置和大小。在Qt中有很多种布局，我们可以根据不同的需求选择不同的布局方...","permalink":"/post/Qt/基础教程/Qt使用布局","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}