{"title":"Qt使用QSS设置控件样式","uid":"b7a3f67da58560c80fad50efc08e725d","slug":"Qt/基础教程/Qt使用QSS设置控件样式","date":"2021-10-02T02:34:06.000Z","updated":"2023-05-19T05:34:19.705Z","comments":true,"path":"api/articles/Qt/基础教程/Qt使用QSS设置控件样式.json","keywords":null,"cover":null,"content":"<h1 id=\"Qt使用QSS设置控件样式\"><a href=\"#Qt使用QSS设置控件样式\" class=\"headerlink\" title=\"Qt使用QSS设置控件样式\"></a>Qt使用QSS设置控件样式</h1><p>在这篇文章中，我们将会学习如何使用QSS（Qt样式表）来自定义QPushButton、QLabel、QLineEdit和QComboBox控件的样式。在Qt中，我们可以使用QSS来定制控件的外观，并且能够方便地整合到我们的应用程序中。</p>\n<h2 id=\"设置QPushButton的样式\"><a href=\"#设置QPushButton的样式\" class=\"headerlink\" title=\"设置QPushButton的样式\"></a>设置QPushButton的样式</h2><p>我们可以通过以下方式设置QPushButton的样式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPushButton &#123;</span><br><span class=\"line\">    background-color: <span class=\"built_in\">qlineargradient</span>(x1:<span class=\"number\">0</span>, y1:<span class=\"number\">0</span>, x2:<span class=\"number\">1</span>, y2:<span class=\"number\">1</span>, stop:<span class=\"number\">0</span> #<span class=\"number\">3</span>b<span class=\"number\">78e6</span>, stop:<span class=\"number\">1</span> #<span class=\"number\">0</span>f5fd7);</span><br><span class=\"line\">    border-radius: <span class=\"number\">5</span>px;</span><br><span class=\"line\">    color: white;</span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\">    padding: <span class=\"number\">5</span>px <span class=\"number\">15</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QPushButton:hover &#123;</span><br><span class=\"line\">    background-color: <span class=\"built_in\">qlineargradient</span>(x1:<span class=\"number\">0</span>, y1:<span class=\"number\">0</span>, x2:<span class=\"number\">1</span>, y2:<span class=\"number\">1</span>, stop:<span class=\"number\">0</span> #<span class=\"number\">60</span>a3f7, stop:<span class=\"number\">1</span> #<span class=\"number\">3</span>b<span class=\"number\">78e6</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QPushButton:pressed &#123;</span><br><span class=\"line\">    background-color: <span class=\"built_in\">qlineargradient</span>(x1:<span class=\"number\">0</span>, y1:<span class=\"number\">0</span>, x2:<span class=\"number\">1</span>, y2:<span class=\"number\">1</span>, stop:<span class=\"number\">0</span> #<span class=\"number\">0</span>f5fd7, stop:<span class=\"number\">1</span> #<span class=\"number\">3</span>b<span class=\"number\">78e6</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们将QPushButton控件的背景设置为颜色渐变，使用了border-radius属性添加圆角边框。我们还改变了字体加粗程度和颜色，并且为按钮设置了padding属性。同时，我们还在:hover和:pressed状态下分别修改按钮的渐变背景色。</p>\n<h2 id=\"设置QLabel的样式\"><a href=\"#设置QLabel的样式\" class=\"headerlink\" title=\"设置QLabel的样式\"></a>设置QLabel的样式</h2><p>与QPushButton的设置方式相似，我们可以使用以下代码来设置QLabel的样式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QLabel &#123;</span><br><span class=\"line\">    background-color: #d<span class=\"number\">8e5f</span>4;</span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid #c7d9ea;</span><br><span class=\"line\">    color: #<span class=\"number\">333333</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">2</span>px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于QLabel控件，我们将其背景设置为固定的颜色，在边界中添加了细的灰色边框，并为文本设置了适当的内边距。</p>\n<h2 id=\"设置QLineEdit的样式\"><a href=\"#设置QLineEdit的样式\" class=\"headerlink\" title=\"设置QLineEdit的样式\"></a>设置QLineEdit的样式</h2><p>我们可以使用以下代码来设置QLineEdit的样式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QLineEdit &#123;</span><br><span class=\"line\">    background-color: <span class=\"meta\">#ffffff;</span></span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid #c7d9ea;</span><br><span class=\"line\">    color: #<span class=\"number\">444444</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">2</span>px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QLineEdit:focus &#123;</span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid #<span class=\"number\">3</span>b<span class=\"number\">79e6</span>;</span><br><span class=\"line\">    outline: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们设置了QLineEdit控件的背景色和边框颜色，使其看起来更加干净。对于焦点情况，我们添加了一个以蓝色突出表示的边框线，并禁用了默认的外观字体样式应用。</p>\n<h2 id=\"设置QComboBox的样式\"><a href=\"#设置QComboBox的样式\" class=\"headerlink\" title=\"设置QComboBox的样式\"></a>设置QComboBox的样式</h2><p>最后，我们使用以下代码来设置QComboBox的样式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QComboBox &#123;</span><br><span class=\"line\">    background-color: <span class=\"meta\">#ffffff;</span></span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid #c7d9ea;</span><br><span class=\"line\">    color: #<span class=\"number\">444444</span>;</span><br><span class=\"line\">    padding: <span class=\"number\">2</span>px;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QComboBox:editable &#123;</span><br><span class=\"line\">    background-color: <span class=\"meta\">#ffffff;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">QComboBox QAbstractItemView &#123;</span><br><span class=\"line\">    border: <span class=\"number\">1</span>px solid #c7d9ea;</span><br><span class=\"line\">    selection-background-color: #<span class=\"number\">3</span>b<span class=\"number\">78e6</span>;</span><br><span class=\"line\">    selection-color: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们设置了QComboBox控件的背景色和边框颜色，以及它的文本颜色并添加了适当的内边距。对于可编辑的QComboBox，我们还单独为其设置了背景色。最后，我们修改QComboBox中项目视图的边框线，并为选中的项提供了更明显的文本和渐变背景颜色。</p>\n<p>在本篇文章中，我们学习了如何使用QSS来自定义QPushButton、QLabel、QLineEdit和QComboBox控件的外观样式。Qt提供了很多的属性可以帮助我们改变控件的外观，并且使得我们可以创建具有自定义外观的应用程序。</p>\n","text":"Qt使用QSS设置控件样式在这篇文章中，我们将会学习如何使用QSS（Qt样式表）来自定义QPushButton、QLabel、QLineEdit和QComboB...","permalink":"/post/Qt/基础教程/Qt使用QSS设置控件样式","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qt%E4%BD%BF%E7%94%A8QSS%E8%AE%BE%E7%BD%AE%E6%8E%A7%E4%BB%B6%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">Qt使用QSS设置控件样式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEQPushButton%E7%9A%84%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">设置QPushButton的样式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEQLabel%E7%9A%84%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">设置QLabel的样式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEQLineEdit%E7%9A%84%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">设置QLineEdit的样式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AEQComboBox%E7%9A%84%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">设置QComboBox的样式</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Qt高级绘图","uid":"340d1df588bee8247e70f61a451b98ba","slug":"Qt/基础教程/Qt高级绘图","date":"2021-10-03T02:34:06.000Z","updated":"2023-05-19T05:34:19.708Z","comments":true,"path":"api/articles/Qt/基础教程/Qt高级绘图.json","keywords":null,"cover":null,"text":"Qt高级绘图在这篇文章中，我们将会介绍Qt中的高级绘制技术，并了解如何使用它们来实现自定义的绘制和渲染。Qt提供了一些专业级别的API来进行绘图操作，可以创建矢...","permalink":"/post/Qt/基础教程/Qt高级绘图","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Qt绘制指针时钟","uid":"1175242b1cb2123c73e3f30548ab2dd7","slug":"Qt/基础教程/Qt绘制指针时钟","date":"2021-09-29T04:34:06.000Z","updated":"2023-05-19T05:34:19.708Z","comments":true,"path":"api/articles/Qt/基础教程/Qt绘制指针时钟.json","keywords":null,"cover":null,"text":"Qt绘制指针时钟什么是Qt？Qt是一款跨平台的C++应用程序开发框架，它提供了一套完整的工具和库，可以帮助开发者快速构建高质量的应用程序。Qt支持多种操作系统和...","permalink":"/post/Qt/基础教程/Qt绘制指针时钟","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}