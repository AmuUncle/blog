{"title":"QFont中setPointSize和setPixelSize的作用和区别","uid":"84bd6b5d625d0beb31de3b6ad48960fe","slug":"Qt/基础教程/QFont中setPointSize和setPixelSize的作用和区别","date":"2021-10-05T08:34:06.000Z","updated":"2023-05-19T05:34:19.702Z","comments":true,"path":"api/articles/Qt/基础教程/QFont中setPointSize和setPixelSize的作用和区别.json","keywords":null,"cover":null,"content":"<h1 id=\"QFont中setPointSize和setPixelSize的作用和区别\"><a href=\"#QFont中setPointSize和setPixelSize的作用和区别\" class=\"headerlink\" title=\"QFont中setPointSize和setPixelSize的作用和区别\"></a>QFont中setPointSize和setPixelSize的作用和区别</h1><p>在Qt应用程序中，字体往往是UI设计中非常重要的一个因素。QFont类是Qt框架中表示字体的核心类，它提供了许多方法来指定字体外观和大小等属性。其中，setPointSize()和setPixelSize()是QFont中我们最常见也非常实用的两个方法之一，本文将给出它们的作用和区别。</p>\n<h2 id=\"setPointSize\"><a href=\"#setPointSize\" class=\"headerlink\" title=\"setPointSize()\"></a>setPointSize()</h2><p>setPointSize()方法是QFont类的方法之一，它可以设置字体的点数大小。字号通常参数是数字(N)，其默认值为（11）。</p>\n<p>当我们调用setPointSize()方法时，QFont将点数大小与每英寸点数分辨率结合计算出每个字符的高度。 在这种情况下，如果QFontMetrics返回像素数，则会将该字段转换为点数大小。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QFont <span class=\"title\">font</span><span class=\"params\">(<span class=\"string\">&quot;Times&quot;</span>, <span class=\"number\">11</span>)</span></span>;</span><br><span class=\"line\">font.<span class=\"built_in\">setPointSize</span>(<span class=\"number\">14</span>);       <span class=\"comment\">// 将字体点数大小设置为 14</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，我们创建了一个名为“font”的新字体对象，并使用它的setPointSize()方法将点数大小设置为14。这就意味着此字体的所有字符都将具有14个点的高度。</p>\n<h2 id=\"setPixelSize\"><a href=\"#setPixelSize\" class=\"headerlink\" title=\"setPixelSize()\"></a>setPixelSize()</h2><p>setPixelSize()方法是QFont类的另一个方法，它可以设置字体的像素大小。</p>\n<p>当使用setPixelSize()方法时，字体的大小将以像素为单位而不是点数来测量。注意：大小实际上仍然被视为点值——QFontMetrics基于其当前分辨率将其转换为像素。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QFont <span class=\"title\">font</span><span class=\"params\">(<span class=\"string\">&quot;Times&quot;</span>, <span class=\"number\">11</span>)</span></span>;</span><br><span class=\"line\">font.<span class=\"built_in\">setPixelSize</span>(<span class=\"number\">18</span>);       <span class=\"comment\">// 将字体像素大小设置为 18</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述示例中，我们创建了一个名为“font”的新字体对象，并使用它的setPixelSize()方法将像素大小设置为18。这意味着，在至少可能的QFontMetrics（即与屏幕分辨率相同的值），此字体对象的每个字符将具有18个像素高度。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>我们可以看到，setPointSize()和setPixelSize()都提供了一种设置字体大小的方法。主要区别在于它们使用的单位不同：setPointSize()方法使用点数作为单位，而setPixelSize()方法使用像素作为单位。因此，不同分辨率下的字体实际显示效果也会有所不同。</p>\n<p>通常情况下，为了更好的UI效果，建议优先考虑使用setPixelSize()方法来设置字体大小，以确保字体在不同设备上显示效果的一致性。但是需要注意的是，使用像素单位设置字体大小可能导致文字在高分辨率设备上显示得过小或过大，因此我们需要根据具体需求进行选择。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>在Qt应用程序中，字体往往是UI设计中非常重要的一个因素。setPointSize()和setPixelSize()方法是QFont类中最基本、实用的设置字体大小的方法之一。它们的区别在于使用的单位和实际显示效果会有所不同，因此在选择时需要结合具体需求进行选择。</p>\n","text":"QFont中setPointSize和setPixelSize的作用和区别在Qt应用程序中，字体往往是UI设计中非常重要的一个因素。QFont类是Qt框架中表示...","permalink":"/post/Qt/基础教程/QFont中setPointSize和setPixelSize的作用和区别","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QFont%E4%B8%ADsetPointSize%E5%92%8CsetPixelSize%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">QFont中setPointSize和setPixelSize的作用和区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#setPointSize\"><span class=\"toc-text\">setPointSize()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#setPixelSize\"><span class=\"toc-text\">setPixelSize()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"QDebug：Qt中的调试工具","uid":"6be795b38460ae66925a200f50747cea","slug":"Qt/基础教程/QDebug：Qt中的调试工具","date":"2021-10-12T03:34:06.000Z","updated":"2023-05-19T05:34:19.702Z","comments":true,"path":"api/articles/Qt/基础教程/QDebug：Qt中的调试工具.json","keywords":null,"cover":null,"text":"QDebug：Qt中的调试工具在开发Qt应用程序时，我们需要一种可靠的方法来检查代码和排除错误。QPlainTextEdit是一个用于输出调试信息的基本方法，但...","permalink":"/post/Qt/基础教程/QDebug：Qt中的调试工具","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Qt中使用TCP服务端及客户端","uid":"41f212302bde8d9f69f32b4fddb39ad0","slug":"Qt/基础教程/Qt中使用TCP服务端及客户端","date":"2021-10-05T08:34:06.000Z","updated":"2023-05-19T05:34:19.703Z","comments":true,"path":"api/articles/Qt/基础教程/Qt中使用TCP服务端及客户端.json","keywords":null,"cover":null,"text":"Qt中使用TCP服务端及客户端TCP（Transmission Control Protocol）是一种可靠、高度优化的互联网通信协议，广泛用于各类网络应用程序...","permalink":"/post/Qt/基础教程/Qt中使用TCP服务端及客户端","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}