{"title":"QString的介绍","uid":"c0af7e63ff6c9262bf89de2022bf6b45","slug":"Qt/基础教程/QString的介绍","date":"2021-10-04T06:34:06.000Z","updated":"2023-05-19T05:34:19.703Z","comments":true,"path":"api/articles/Qt/基础教程/QString的介绍.json","keywords":null,"cover":null,"content":"<h1 id=\"QString的介绍\"><a href=\"#QString的介绍\" class=\"headerlink\" title=\"QString的介绍\"></a>QString的介绍</h1><p>QString是Qt中处理字符串最常用的类之一，提供了丰富的字符串操作和转换方法。相比原生C++中的std::string，QString可以方便地处理Unicode字符，支持动态长度和自动内存管理等功能。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"创建和赋值\"><a href=\"#创建和赋值\" class=\"headerlink\" title=\"创建和赋值\"></a>创建和赋值</h3><p>通过直接传入字符串或者字符串指针来创建一个QString对象：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString str1 = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *str2 = <span class=\"string\">&quot;hello qt&quot;</span>;</span><br><span class=\"line\"><span class=\"function\">QString <span class=\"title\">str3</span><span class=\"params\">(str2)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过复制构造函数或者赋值操作来创建新的字符串：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QString <span class=\"title\">str4</span><span class=\"params\">(str1)</span></span>;</span><br><span class=\"line\">QString str5 = str2;</span><br><span class=\"line\">str4 = str5;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>QString提供了很多常见的字符串操作函数。</p>\n<ul>\n<li><code>size()</code> 或 <code>length()</code>：获取字符串长度</li>\n<li><code>toUpper()</code> 和 <code>toLower()</code>：转换大小写</li>\n<li><code>trimmed()</code>：去掉前后空格</li>\n<li><code>split()</code>：切割字符串为列表</li>\n<li><code>replace()</code>：替换字符串中的子串</li>\n<li><code>startsWith()</code>, <code>contains()</code> 和 <code>endsWith()</code>：在字符串中查找子串</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QString <span class=\"title\">myString</span><span class=\"params\">(<span class=\"string\">&quot;  Hello, world!   &quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;String length: &quot;</span> &lt;&lt; myString.<span class=\"built_in\">length</span>(); <span class=\"comment\">// 输出 &quot;String length: 16&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Trimmed string: &quot;</span> &lt;&lt; myString.<span class=\"built_in\">trimmed</span>(); <span class=\"comment\">// 输出 &quot;Trimmed string: Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换函数\"><a href=\"#转换函数\" class=\"headerlink\" title=\"转换函数\"></a>转换函数</h3><p>QString也提供了一些便于字符串转换的函数。比如，如果需要将QString对象转换成字符数组或者字符串指针，可以使用toUtf8()、toLatin1()和toLocal8Bit()等函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QString <span class=\"title\">myString</span><span class=\"params\">(<span class=\"string\">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">qDebug</span>() &lt;&lt; myString.<span class=\"built_in\">toUtf8</span>().<span class=\"built_in\">constData</span>(); <span class=\"comment\">// 输出 &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>同样，也可以通过fromUtf8()、fromLatin1()和fromLocal8Bit()等函数将std::string转换成QString对象。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::string myStdString = <span class=\"string\">&quot;Hello, Qt!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">QString myString = QString::<span class=\"built_in\">fromUtf8</span>(myStdString.<span class=\"built_in\">c_str</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">qDebug</span>() &lt;&lt; myString; <span class=\"comment\">// 输出 &quot;Hello, Qt!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，如果在进行跨平台开发时，需要谨慎选择字符编码方式来确保与目标平台的兼容性。</p>\n<h2 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h2><p>由于QString类似于动态数组，它可以自动分配所需大小的内存。这种自动管理的特点会导致每次修改字符串都需要分配和释放内存，从而影响了其性能表现。</p>\n<p>为了减少频繁的内存分配和释放，可以尽量避免使用toUpper()、toLower()等函数，因为它们会改变字符串内容并创建新的QString对象。</p>\n<p>另外，当只需要读取字符串时，可以使用QStringView类，这个类不会创建新的字符串对象，而是直接引用原始的QString对象，提高了程序的性能。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>总之，QString是Qt框架中强大且易于使用的字符串类之一，提供了许多方便实用的方法和操作。在适当的情况下，可以使用QStringView类来优化程序性能。对于涉及到字符编码的情况需要特别注意。在实际应用中，根据具体需求选择各种不同的QString函数和转换策略来满足开发需求。</p>\n","text":"QString的介绍QString是Qt中处理字符串最常用的类之一，提供了丰富的字符串操作和转换方法。相比原生C++中的std::string，QString可...","permalink":"/post/Qt/基础教程/QString的介绍","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QString%E7%9A%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">QString的介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">基本用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%92%8C%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">创建和赋值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">转换函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E8%80%83%E8%99%91\"><span class=\"toc-text\">性能考虑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Qt多线程详解","uid":"d22eb85de16f2f58ec69f569b2b4a75b","slug":"Qt/基础教程/Qt多线程详解","date":"2021-10-04T08:34:06.000Z","updated":"2023-05-19T05:34:19.707Z","comments":true,"path":"api/articles/Qt/基础教程/Qt多线程详解.json","keywords":null,"cover":null,"text":"Qt多线程详解Qt是一个支持多线程、跨平台的C++框架，旨在帮助开发人员以安全和简单的方式处理并发任务。在这篇博客中，我们将介绍Qt中的多线程概念及其用法。 什...","permalink":"/post/Qt/基础教程/Qt多线程详解","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Qt信号槽机制详解","uid":"0e349ef346a818a9b65cc579b534d135","slug":"Qt/基础教程/Qt信号槽机制详解","date":"2021-10-04T06:34:06.000Z","updated":"2023-05-19T05:34:19.706Z","comments":true,"path":"api/articles/Qt/基础教程/Qt信号槽机制详解.json","keywords":null,"cover":null,"text":"Qt信号槽机制详解Qt信号槽机制是一种用于处理应用程序中事件与方法交互的解决方案。通过这个机制，一个对象的行为可以影响到另外一个对象，从而促进事件流的自动化管理...","permalink":"/post/Qt/基础教程/Qt信号槽机制详解","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}