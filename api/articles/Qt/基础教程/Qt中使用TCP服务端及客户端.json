{"title":"Qt中使用TCP服务端及客户端","uid":"41f212302bde8d9f69f32b4fddb39ad0","slug":"Qt/基础教程/Qt中使用TCP服务端及客户端","date":"2021-10-05T08:34:06.000Z","updated":"2023-05-19T05:34:19.703Z","comments":true,"path":"api/articles/Qt/基础教程/Qt中使用TCP服务端及客户端.json","keywords":null,"cover":null,"content":"<h1 id=\"Qt中使用TCP服务端及客户端\"><a href=\"#Qt中使用TCP服务端及客户端\" class=\"headerlink\" title=\"Qt中使用TCP服务端及客户端\"></a>Qt中使用TCP服务端及客户端</h1><p>TCP（Transmission Control Protocol）是一种可靠、高度优化的互联网通信协议，广泛用于各类网络应用程序中。在这篇博客中，我们将介绍如何在Qt中使用TCP服务端及客户端。</p>\n<h2 id=\"使用Qt创建TCP服务器\"><a href=\"#使用Qt创建TCP服务器\" class=\"headerlink\" title=\"使用Qt创建TCP服务器\"></a>使用Qt创建TCP服务器</h2><p>要使用Qt创建TCP服务器，需要完成以下步骤：</p>\n<h3 id=\"步骤1：创建QTcpServer对象\"><a href=\"#步骤1：创建QTcpServer对象\" class=\"headerlink\" title=\"步骤1：创建QTcpServer对象\"></a>步骤1：创建QTcpServer对象</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QTcpServer *server = <span class=\"keyword\">new</span> <span class=\"built_in\">QTcpServer</span>(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤2：监听连接请求\"><a href=\"#步骤2：监听连接请求\" class=\"headerlink\" title=\"步骤2：监听连接请求\"></a>步骤2：监听连接请求</h3><p>在开始监听之前，您需要使用listen()方法指定服务端口号并监听来自特定IP地址的连接请求。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!server-&gt;<span class=\"built_in\">listen</span>(QHostAddress::Any, <span class=\"number\">12345</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">qDebug</span>() &lt;&lt; <span class=\"string\">&quot;Failed to start server&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤3：处理新连接请求\"><a href=\"#步骤3：处理新连接请求\" class=\"headerlink\" title=\"步骤3：处理新连接请求\"></a>步骤3：处理新连接请求</h3><p>每当一个新连接请求到达服务器时，QTcpServer将通过发射newConnection()信号来提示您。您可以使用accept()方法来接受该连接，并创建一个新的QTcpSocket对象以进行收发消息。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyTcpServer::newConnection</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QTcpSocket *socket = server-&gt;<span class=\"built_in\">nextPendingConnection</span>();</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(socket, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">readyRead</span>()), <span class=\"keyword\">this</span>, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">readData</span>()));</span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(socket, <span class=\"built_in\">SIGNAL</span>(<span class=\"built_in\">disconnected</span>()), socket, <span class=\"built_in\">SLOT</span>(<span class=\"built_in\">deleteLater</span>()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyTcpServer::readData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QTcpSocket *socket = <span class=\"built_in\">static_cast</span>&lt;QTcpSocket *&gt;(<span class=\"built_in\">sender</span>());</span><br><span class=\"line\">    QByteArray data = socket-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 处理接收到的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤4：发送数据\"><a href=\"#步骤4：发送数据\" class=\"headerlink\" title=\"步骤4：发送数据\"></a>步骤4：发送数据</h3><p>使用QTcpSocket的write()方法将您的数据发送到连接的客户端。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket-&gt;<span class=\"built_in\">write</span>(<span class=\"string\">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Qt创建TCP客户端\"><a href=\"#使用Qt创建TCP客户端\" class=\"headerlink\" title=\"使用Qt创建TCP客户端\"></a>使用Qt创建TCP客户端</h2><p>要使用Qt创建TCP客户端，需要完成以下步骤：</p>\n<h3 id=\"步骤1：创建QTcpSocket对象\"><a href=\"#步骤1：创建QTcpSocket对象\" class=\"headerlink\" title=\"步骤1：创建QTcpSocket对象\"></a>步骤1：创建QTcpSocket对象</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QTcpSocket *m_socket = <span class=\"keyword\">new</span> <span class=\"built_in\">QTcpSocket</span>(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤2：连接到服务器\"><a href=\"#步骤2：连接到服务器\" class=\"headerlink\" title=\"步骤2：连接到服务器\"></a>步骤2：连接到服务器</h3><p>使用connectToHost()方法将socket连接到目标主机和端口。连接成功后，QTcpSocket将发送connected()信号。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_socket-&gt;<span class=\"built_in\">connectToHost</span>(<span class=\"built_in\">QHostAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>), <span class=\"number\">12345</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤3：发送和接收数据\"><a href=\"#步骤3：发送和接收数据\" class=\"headerlink\" title=\"步骤3：发送和接收数据\"></a>步骤3：发送和接收数据</h3><p>使用write()方法向服务器发送数据，并通过readyRead()信号处理接收到的数据。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyTcpClient::sendData</span><span class=\"params\">(QString data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    m_socket-&gt;<span class=\"built_in\">write</span>(data.<span class=\"built_in\">toUtf8</span>().<span class=\"built_in\">constData</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">MyTcpClient::readData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QString data = m_socket-&gt;<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 处理接收到的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在Qt中使用TCP服务端及客户端是一种可靠、高效的方法来进行网络通信。QTcpServer和QTcpSocket类提供了一个面向对象的解决方案，使得您能够轻松地开发出各种类型的网络应用程序。</p>\n<p>然而，请注意因多种原因（例如网络中断、远程主机关闭连接等）导致的时延和异常情况，并确保在代码中处理这些情况以确保应用程序的稳定性。</p>\n","text":"Qt中使用TCP服务端及客户端TCP（Transmission Control Protocol）是一种可靠、高度优化的互联网通信协议，广泛用于各类网络应用程序...","permalink":"/post/Qt/基础教程/Qt中使用TCP服务端及客户端","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Qt%E4%B8%AD%E4%BD%BF%E7%94%A8TCP%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">Qt中使用TCP服务端及客户端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Qt%E5%88%9B%E5%BB%BATCP%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">使用Qt创建TCP服务器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41%EF%BC%9A%E5%88%9B%E5%BB%BAQTcpServer%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">步骤1：创建QTcpServer对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42%EF%BC%9A%E7%9B%91%E5%90%AC%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">步骤2：监听连接请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A43%EF%BC%9A%E5%A4%84%E7%90%86%E6%96%B0%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">步骤3：处理新连接请求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A44%EF%BC%9A%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">步骤4：发送数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Qt%E5%88%9B%E5%BB%BATCP%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">使用Qt创建TCP客户端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41%EF%BC%9A%E5%88%9B%E5%BB%BAQTcpSocket%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">步骤1：创建QTcpSocket对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42%EF%BC%9A%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">步骤2：连接到服务器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A43%EF%BC%9A%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">步骤3：发送和接收数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"QFont中setPointSize和setPixelSize的作用和区别","uid":"84bd6b5d625d0beb31de3b6ad48960fe","slug":"Qt/基础教程/QFont中setPointSize和setPixelSize的作用和区别","date":"2021-10-05T08:34:06.000Z","updated":"2023-05-19T05:34:19.702Z","comments":true,"path":"api/articles/Qt/基础教程/QFont中setPointSize和setPixelSize的作用和区别.json","keywords":null,"cover":null,"text":"QFont中setPointSize和setPixelSize的作用和区别在Qt应用程序中，字体往往是UI设计中非常重要的一个因素。QFont类是Qt框架中表示...","permalink":"/post/Qt/基础教程/QFont中setPointSize和setPixelSize的作用和区别","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Qt中的时区","uid":"5b80ee9c26ef869c27c39383e381d5b4","slug":"Qt/基础教程/Qt中的时区","date":"2021-10-05T08:34:06.000Z","updated":"2023-05-19T05:34:19.704Z","comments":true,"path":"api/articles/Qt/基础教程/Qt中的时区.json","keywords":null,"cover":null,"text":"Qt中的时区在处理日期和时间的应用程序中，时区相关的问题一直是一个重要的问题。在Qt中，提供了一套完善的时区支持，能够轻松地处理时区相关的功能。 Qt中的时区概...","permalink":"/post/Qt/基础教程/Qt中的时区","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"Qt基础教程","slug":"Qt基础教程","count":19,"path":"api/categories/Qt基础教程.json"}],"tags":[{"name":"Qt","slug":"Qt","count":59,"path":"api/tags/Qt.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}