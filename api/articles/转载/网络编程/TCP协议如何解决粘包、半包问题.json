{"title":"【转载】TCP协议如何解决粘包、半包问题","uid":"2a3c3c9ace4b4758d78bedda5e2402e0","slug":"转载/网络编程/TCP协议如何解决粘包、半包问题","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.397Z","comments":true,"path":"api/articles/转载/网络编程/TCP协议如何解决粘包、半包问题.json","keywords":null,"cover":[],"content":"<h1 id=\"TCP-协议如何解决粘包、半包问题\"><a href=\"#TCP-协议如何解决粘包、半包问题\" class=\"headerlink\" title=\"TCP 协议如何解决粘包、半包问题\"></a>TCP 协议如何解决粘包、半包问题</h1><h2 id=\"一-TCP-协议是流式协议\"><a href=\"#一-TCP-协议是流式协议\" class=\"headerlink\" title=\"一  TCP 协议是流式协议\"></a>一  TCP 协议是流式协议</h2><p>很多读者从接触网络知识以来，应该听说过这句话：TCP 协议是流式协议。那么这句话到底是什么意思呢？所谓流式协议，即协议的内容是像流水一样的字节流，内容与内容之间没有明确的分界标志，需要我们人为地去给这些协议划分边界。</p>\n<p>举个例子，A 与 B 进行 TCP 通信，A 先后给 B 发送了一个 100 字节和 200 字节的数据包，那么 B 是如何收到呢？B 可能先收到 100 字节，再收到 200 字节；也可能先收到 50 字节，再收到 250 字节；或者先收到 100 字节，再收到 100 字节，再收到 200 字节；或者先收到 20 字节，再收到 20 字节，再收到 60 字节，再收到 100 字节，再收到 50 字节，再收到 50 字节……</p>\n<p>不知道读者看出规律没有？规律就是 A 一共给 B 发送了 300 字节，B 可能以一次或者多次任意形式的总数为 300 字节收到。假设 A 给 B 发送的 100 字节和 200 字节分别都是一个数据包，对于发送端 A 来说，这个是可以区分的，但是对于 B 来说，如果不人为规定多长为一个数据包，B 每次是不知道应该把收到的数据中多少字节作为一个有效的数据包的。而规定每次把多少数据当成一个包就是协议格式规范的内容之一。</p>\n<p>经常会有新手写出类似下面这样的代码：</p>\n<p><strong>发送端：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//...省略创建socket，建立连接等部分不相关的逻辑...</span><br><span class=\"line\">char buf[] = &quot;the quick brown fox jumps over a lazy dog.&quot;;</span><br><span class=\"line\">int n = send(socket, buf, strlen(buf), 0);</span><br><span class=\"line\">//...省略出错处理逻辑...</span><br></pre></td></tr></table></figure>\n\n<p><strong>接收端：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//省略创建socket，建立连接等部分不相关的逻辑...</span><br><span class=\"line\">char recvBuf[50] = &#123; 0 &#125;;</span><br><span class=\"line\">int n = recv(socket, recvBuf, 50, 0);</span><br><span class=\"line\">//省略出错处理逻辑...</span><br><span class=\"line\">printf(&quot;recvBuf: %s&quot;, recvBuf);</span><br></pre></td></tr></table></figure>\n\n<p>为了专注问题本身的讨论，我这里省略掉了建立连接和部分错误处理的逻辑。上述代码中发送端给接收端发送了一串字符”the quick brown fox jumps over a lazy dog.“，接收端收到后将其打印出来。</p>\n<p>类似这样的代码在本机一般会工作的很好，接收端也如期打印出来预料的字符串，但是一放到局域网或者公网环境就出问题了，即接收端可能打印出来字符串并不完整；如果发送端连续多次发送字符串，接收端会打印出来的字符串不完整或出现乱码。不完整的原因很好理解，即对端某次收到的数据小于完整字符串的长度，recvBuf 数组开始被清空成 0，收到部分字符串后，该字符串的末尾仍然是 0，printf 函数寻找以 0 为结束标志的字符结束输出；乱码的原因是如果某次收入的数据不仅包含一个完整的字符串，还包含下一个字符串部分内容，那么 recvBuf 数组将会被填满，printf 函数输出时仍然会寻找以 0 为结束标志的字符结束输出，这样读取的内存就越界了，一直找到为止，而越界后的内存可能是一些不可读字符，显示出来后就乱码了。</p>\n<p>我举这个例子希望你明白 能对TCP 协议是流式协议有一个直观的认识。正因为如此，所以我们需要人为地在发送端和接收端规定每一次的字节流边界，以便接收端知道从什么位置取出多少字节来当成一个数据包去解析，这就是我们设计网络通信协议格式的要做的工作之一。</p>\n<h2 id=\"二-如何解决粘包问题\"><a href=\"#二-如何解决粘包问题\" class=\"headerlink\" title=\"二 如何解决粘包问题\"></a>二 如何解决粘包问题</h2><p>网络通信程序实际开发中，或者技术面试时，面试官通常会问的比较多的一个问题是：网络通信时，如何解决粘包？</p>\n<blockquote>\n<p>有的面试官可能会这么问：网络通信时，如何解决粘包、丢包或者包乱序问题？这个问题其实是面试官在考察面试者的网络基础知识，如果是 TCP 协议，在大多数场景下，是不存在丢包和包乱序问题的，TCP 通信是可靠通信方式，TCP 协议栈通过序列号和包重传确认机制保证数据包的有序和一定被正确发到目的地；如果是 UDP 协议，如果不能接受少量丢包，那就要自己在 UDP 的基础上实现类似 TCP 这种有序和可靠传输机制了（例如 RTP协议、RUDP 协议）。所以，问题拆解后，只剩下如何解决粘包的问题。</p>\n</blockquote>\n<p>先来解释一下什么是<strong>粘包</strong>，所谓粘包就是连续给对端发送两个或者两个以上的数据包，对端在一次收取中可能收到的数据包大于 1 个，大于 1 个，可能是几个（包括一个）包加上某个包的部分，或者干脆就是几个完整的包在一起。当然，也可能收到的数据只是一个包的部分，这种情况一般也叫<strong>半包</strong>。</p>\n<p>无论是半包还是粘包问题，其根源是上文介绍中 TCP 协议是流式数据格式。解决问题的思路还是想办法从收到的数据中把包与包的边界给区分出来。那么如何区分呢？目前主要有三种方法：</p>\n<p><strong>固定包长的数据包</strong></p>\n<p>顾名思义，即每个协议包的长度都是固定的。举个例子，例如我们可以规定每个协议包的大小是 64 个字节，每次收满 64 个字节，就取出来解析（如果不够，就先存起来）。</p>\n<p>这种通信协议的格式简单但灵活性差。如果包内容不足指定的字节数，剩余的空间需要填充特殊的信息，如 \\0（如果不填充特殊内容，如何区分包里面的正常内容与填充信息呢？）；如果包内容超过指定字节数，又得分包分片，需要增加额外处理逻辑——在发送端进行分包分片，在接收端重新组装包片（分包和分片内容在接下来会详细介绍）。</p>\n<p><strong>以指定字符（串）为包的结束标志</strong></p>\n<p>这种协议包比较常见，即字节流中遇到特殊的符号值时就认为到一个包的末尾了。例如，我们熟悉的 FTP协议，发邮件的 SMTP 协议，一个命令或者一段数据后面加上”\\r\\n”（即所谓的 <strong>CRLF</strong>）表示一个包的结束。对端收到后，每遇到一个”\\r\\n“就把之前的数据当做一个数据包。</p>\n<p>这种协议一般用于一些包含各种命令控制的应用中，其不足之处就是如果协议数据包内容部分需要使用包结束标志字符，就需要对这些字符做转码或者转义操作，以免被接收方错误地当成包结束标志而误解析。</p>\n<p><strong>包头 + 包体格式</strong></p>\n<p>这种格式的包一般分为两部分，即包头和包体，包头是固定大小的，且包头中必须含有一个字段来说明接下来的包体有多大。</p>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct msg_header</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  int32_t bodySize;</span><br><span class=\"line\">  int32_t cmd;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这就是一个典型的包头格式，bodySize 指定了这个包的包体是多大。由于包头大小是固定的（这里是 size(int32_t) + sizeof(int32_t) &#x3D; 8 字节），对端先收取包头大小字节数目（当然，如果不够还是先缓存起来，直到收够为止），然后解析包头，根据包头中指定的包体大小来收取包体，等包体收够了，就组装成一个完整的包来处理。在有些实现中，包头中的 bodySize可能被另外一个叫 packageSize 的字段代替，这个字段的含义是整个包的大小，这个时候，我们只要用 packageSize 减去包头大小（这里是 sizeof(msg_header)）就能算出包体的大小，原理同上。</p>\n<blockquote>\n<p>在使用大多数网络库时，通常你需要根据协议格式自己给数据包分界和解析，一般的网络库不提供这种功能是出于需要支持不同的协议，由于协议的不确定性，因此没法预先提供具体解包代码。当然，这不是绝对的，也有一些网络库提供了这种功能。在 Java Netty 网络框架中，提供了FixedLengthFrameDecoder 类去处理长度是定长的协议包，提供了 DelimiterBasedFrameDecoder 类去处理按特殊字符作为结束符的协议包，提供 ByteToMessageDecoder 去处理自定义格式的协议包（可用来处理包头 + 包体 这种格式的数据包），然而在继承 ByteToMessageDecoder  子类中你需要根据你的协议具体格式重写 decode() 方法来对数据包解包。</p>\n</blockquote>\n<p>这三种包格式，希望读者能在理解其原理和优缺点的基础上深入掌握。</p>\n<h2 id=\"三-解包与处理\"><a href=\"#三-解包与处理\" class=\"headerlink\" title=\"三 解包与处理\"></a>三 解包与处理</h2><p>在理解了前面介绍的数据包的三种格式后，我们来介绍一下针对上述三种格式的数据包技术上应该如何处理。其处理流程都是一样的，这里我们以<strong>包头 + 包体</strong> 这种格式的数据包来说明。处理流程如下：</p>\n<p><img src=\"/../imgs/tcp1.webp\"></p>\n<p>假设我们的包头格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//强制一字节对齐</span><br><span class=\"line\">#pragma pack(push, 1)</span><br><span class=\"line\">//协议头</span><br><span class=\"line\">struct msg</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    int32_t  bodysize;         //包体大小  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#pragma pack(pop)</span><br></pre></td></tr></table></figure>\n\n<p>那么上面的流程实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//包最大字节数限制为10M</span><br><span class=\"line\">#define MAX_PACKAGE_SIZE    10 * 1024 * 1024</span><br><span class=\"line\"></span><br><span class=\"line\">void ChatSession::OnRead(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn, Buffer* pBuffer, Timestamp receivTime)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //不够一个包头大小</span><br><span class=\"line\">        if (pBuffer-&gt;readableBytes() &lt; (size_t)sizeof(msg))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //LOGI &lt;&lt; &quot;buffer is not enough for a package header, pBuffer-&gt;readableBytes()=&quot; &lt;&lt; pBuffer-&gt;readableBytes() &lt;&lt; &quot;, sizeof(msg)=&quot; &lt;&lt; sizeof(msg);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //取包头信息</span><br><span class=\"line\">        msg header;</span><br><span class=\"line\">        memcpy(&amp;header, pBuffer-&gt;peek(), sizeof(msg));</span><br><span class=\"line\"></span><br><span class=\"line\">        //包头有错误，立即关闭连接</span><br><span class=\"line\">        if (header.bodysize &lt;= 0 || header.bodysize &gt; MAX_PACKAGE_SIZE)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //客户端发非法数据包，服务器主动关闭之</span><br><span class=\"line\">            LOGE(&quot;Illegal package, bodysize: %lld, close TcpConnection, client: %s&quot;, header.bodysize, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">            conn-&gt;forceClose();</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //收到的数据不够一个完整的包</span><br><span class=\"line\">        if (pBuffer-&gt;readableBytes() &lt; (size_t)header.bodysize + sizeof(msg))</span><br><span class=\"line\">            return;</span><br><span class=\"line\"></span><br><span class=\"line\">        pBuffer-&gt;retrieve(sizeof(msg));</span><br><span class=\"line\">        //inbuf用来存放当前要处理的包</span><br><span class=\"line\">        std::string inbuf;</span><br><span class=\"line\">        inbuf.append(pBuffer-&gt;peek(), header.bodysize);</span><br><span class=\"line\">        pBuffer-&gt;retrieve(header.bodysize);          </span><br><span class=\"line\">        //解包和业务处理</span><br><span class=\"line\">        if (!Process(conn, inbuf.c_str(), inbuf.length()))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //客户端发非法数据包，服务器主动关闭之</span><br><span class=\"line\">            LOGE(&quot;Process package error, close TcpConnection, client: %s&quot;, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">            conn-&gt;forceClose();</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;              </span><br><span class=\"line\">    &#125;// end while-loop</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述流程代码的处理过程和流程图中是一致的，pBuffer 这里是一个自定义的接收缓冲区，这里的代码，已经将收到的数据放入了这个缓冲区，所以判断当前已收取的字节数目只需要使用这个对象的相应方法即可。上述代码有些细节我需要强调一下：</p>\n<ul>\n<li>取包头时，你应该拷贝一份数据包头大小的数据出来，而不是从缓冲区 pBuffer 中直接将数据取出来（即取出来的数据从 pBuffer 中移除），这是因为倘若接下来根据包头中的字段得到包体大小时，如果剩余数据不够一个包体大小，你又得把这个包头数据放回缓冲区。为了避免这种不必要的操作，只有缓冲区数据大小够整个包的大小（代码中：header.bodysize + sizeof(msg)）你才需要把整个包大小的数据从缓冲区移除，这也是这里的 pBuffer-&gt;peek() 方法 peek 单词的含义（中文可以翻译成“瞟一眼”或者“偷窥”）。</li>\n<li>通过包头得到包体大小时，你一定要对 bodysize 的数值进行校验，我这里要求 bodysize 必须大于 0 且不大于 10 * 1024 * 1024（即 10 M）。当然，实际开发中，你可以根据你自己的需求要决定 bodysize 的上下限（包体大小是 0 字节的包在某些业务场景下是允许的）。记住，一定要判断这个上下限，因为假设这是一个非法的客户端发来的数据，其 bodysize 设置了一个比较大的数值，例如 1 * 1024 * 1024 * 1024（即 1 G），你的逻辑会让你一直缓存该客户端发来的数据，那么很快你的服务器内存将会被耗尽，操作系统在检测到你的进程占用内存达到一定阈值时会杀死你的进程，导致服务不能再正常对外服务。如果你检测了 bodysize 字段的是否满足你设置的上下限，对于非法的 bodysize，直接关闭这路连接即可。这也是服务的一种自我保护措施，避免因为非法数据包带来的损失。</li>\n<li>不知道你有没有注意到整个判断包头、包体以及处理包的逻辑放在一个 while 循环里面，这是必要的。如果没有这个 while 循环，当你一次性收到多个包时，你只会处理一个，下次接着处理就需要等到新一批数据来临时再次触发这个逻辑。这样造成的结果就是，对端给你发送了多个请求，你最多只能应答一个，后面的应答得等到对端再次给你发送数据时。这就是对<strong>粘包</strong>逻辑的正确处理。</li>\n</ul>\n<p>以上逻辑和代码是最基本的<strong>粘包和半包处理机制</strong>，也就是所谓的<strong>技术上的解包处理逻辑</strong>（业务上的解包处理逻辑后面章节再介绍）。希望读者能理解他们，在理解了他们的基础之上，我们可以给解包拓展很多功能，例如，我们再给我们的协议包增加一个支持压缩的功能，我们的包头变成下面这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#pragma pack(push, 1)</span><br><span class=\"line\">//协议头</span><br><span class=\"line\">struct msg</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char     compressflag;     //压缩标志，如果为1，则启用压缩，反之不启用压缩</span><br><span class=\"line\">    int32_t  originsize;       //包体压缩前大小</span><br><span class=\"line\">    int32_t  compresssize;     //包体压缩后大小</span><br><span class=\"line\">    char     reserved[16];       //保留字段，用于将来拓展</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#pragma pack(pop)</span><br></pre></td></tr></table></figure>\n\n<p>修改后的代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void ChatSession::OnRead(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn, Buffer* pBuffer, Timestamp receivTime)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //不够一个包头大小</span><br><span class=\"line\">        if (pBuffer-&gt;readableBytes() &lt; (size_t)sizeof(msg))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //LOGI &lt;&lt; &quot;buffer is not enough for a package header, pBuffer-&gt;readableBytes()=&quot; &lt;&lt; pBuffer-&gt;readableBytes() &lt;&lt; &quot;, sizeof(msg)=&quot; &lt;&lt; sizeof(msg);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //取包头信息</span><br><span class=\"line\">        msg header;</span><br><span class=\"line\">        memcpy(&amp;header, pBuffer-&gt;peek(), sizeof(msg));</span><br><span class=\"line\"></span><br><span class=\"line\">        //数据包压缩过</span><br><span class=\"line\">        if (header.compressflag == PACKAGE_COMPRESSED)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //包头有错误，立即关闭连接</span><br><span class=\"line\">            if (header.compresssize &lt;= 0 || header.compresssize &gt; MAX_PACKAGE_SIZE ||</span><br><span class=\"line\">                header.originsize &lt;= 0 || header.originsize &gt; MAX_PACKAGE_SIZE)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //客户端发非法数据包，服务器主动关闭之</span><br><span class=\"line\">                LOGE(&quot;Illegal package, compresssize: %lld, originsize: %lld, close TcpConnection, client: %s&quot;,  header.compresssize, header.originsize, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">                conn-&gt;forceClose();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //收到的数据不够一个完整的包</span><br><span class=\"line\">            if (pBuffer-&gt;readableBytes() &lt; (size_t)header.compresssize + sizeof(msg))</span><br><span class=\"line\">                return;</span><br><span class=\"line\"></span><br><span class=\"line\">            pBuffer-&gt;retrieve(sizeof(msg));</span><br><span class=\"line\">            std::string inbuf;</span><br><span class=\"line\">            inbuf.append(pBuffer-&gt;peek(), header.compresssize);</span><br><span class=\"line\">            pBuffer-&gt;retrieve(header.compresssize);</span><br><span class=\"line\">            std::string destbuf;</span><br><span class=\"line\">            if (!ZlibUtil::UncompressBuf(inbuf, destbuf, header.originsize))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LOGE(&quot;uncompress error, client: %s&quot;, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">                conn-&gt;forceClose();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //业务逻辑处理</span><br><span class=\"line\">            if (!Process(conn, destbuf.c_str(), destbuf.length()))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //客户端发非法数据包，服务器主动关闭之</span><br><span class=\"line\">                LOGE(&quot;Process error, close TcpConnection, client: %s&quot;, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">                conn-&gt;forceClose();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //数据包未压缩</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //包头有错误，立即关闭连接</span><br><span class=\"line\">            if (header.originsize &lt;= 0 || header.originsize &gt; MAX_PACKAGE_SIZE)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //客户端发非法数据包，服务器主动关闭之</span><br><span class=\"line\">                LOGE(&quot;Illegal package, compresssize: %lld, originsize: %lld, close TcpConnection, client: %s&quot;, header.compresssize, header.originsize, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">                conn-&gt;forceClose();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //收到的数据不够一个完整的包</span><br><span class=\"line\">            if (pBuffer-&gt;readableBytes() &lt; (size_t)header.originsize + sizeof(msg))</span><br><span class=\"line\">                return;</span><br><span class=\"line\"></span><br><span class=\"line\">            pBuffer-&gt;retrieve(sizeof(msg));</span><br><span class=\"line\">            std::string inbuf;</span><br><span class=\"line\">            inbuf.append(pBuffer-&gt;peek(), header.originsize);</span><br><span class=\"line\">            pBuffer-&gt;retrieve(header.originsize);</span><br><span class=\"line\">            //业务逻辑处理</span><br><span class=\"line\">            if (!Process(conn, inbuf.c_str(), inbuf.length()))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //客户端发非法数据包，服务器主动关闭之</span><br><span class=\"line\">                LOGE(&quot;Process error, close TcpConnection, client: %s&quot;, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">                conn-&gt;forceClose();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;// end else</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;// end while-loop</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码先根据包头的压缩标志字段判断包体是否有压缩，如果有压缩，则取出包体大小去解压，解压后的数据才是真正的业务数据。整个程序执行流程图如下：</p>\n<p><img src=\"/../imgs/tcp2.webp\"></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","text":"TCP 协议如何解决粘包、半包问题一 TCP 协议是流式协议很多读者从接触网络知识以来，应该听说过这句话：TCP 协议是流式协议。那么这句话到底是什么意思呢？所...","permalink":"/post/转载/网络编程/TCP协议如何解决粘包、半包问题","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"},{"name":"网络编程","slug":"网络编程","count":10,"path":"api/tags/网络编程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TCP-%E5%8D%8F%E8%AE%AE%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E3%80%81%E5%8D%8A%E5%8C%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">TCP 协议如何解决粘包、半包问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-TCP-%E5%8D%8F%E8%AE%AE%E6%98%AF%E6%B5%81%E5%BC%8F%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">一  TCP 协议是流式协议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">二 如何解决粘包问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E8%A7%A3%E5%8C%85%E4%B8%8E%E5%A4%84%E7%90%86\"><span class=\"toc-text\">三 解包与处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】Linuxepoll模型（含LT模式和ET模式详解）","uid":"f803883e87085e50bdcf47ed5c086db3","slug":"转载/网络编程/Linuxepoll模型（含LT模式和ET模式详解）","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.970Z","comments":true,"path":"api/articles/转载/网络编程/Linuxepoll模型（含LT模式和ET模式详解）.json","keywords":null,"cover":[],"text":"Linux epoll 模型（含LT 模式和 ET 模式详解）综合 select 和 poll 的一些优缺点，Linux 从内核 2.6 版本开始引入了更高效的...","permalink":"/post/转载/网络编程/Linuxepoll模型（含LT模式和ET模式详解）","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"},{"name":"网络编程","slug":"网络编程","count":10,"path":"api/tags/网络编程.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】bind函数重难点解析","uid":"a48f84a55618baa7dd151ec12f4ef58e","slug":"转载/网络编程/bind函数重难点解析","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.398Z","comments":true,"path":"api/articles/转载/网络编程/bind函数重难点解析.json","keywords":null,"cover":null,"text":"bind 函数重难点解析bind 函数如何选择绑定地址bind 函数的基本用法如下： 123456789struct sockaddr_in bindaddr;...","permalink":"/post/转载/网络编程/bind函数重难点解析","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"},{"name":"网络编程","slug":"网络编程","count":10,"path":"api/tags/网络编程.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}