{"title":"【转载】心跳包机制设计详解","uid":"dadb03aa4cb6e4085adc0ea3361dcdbd","slug":"转载/高性能服务器框架设计/心跳包机制设计详解","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.405Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/心跳包机制设计详解.json","keywords":null,"cover":null,"content":"<h2 id=\"心跳包机制设计详解\"><a href=\"#心跳包机制设计详解\" class=\"headerlink\" title=\"心跳包机制设计详解\"></a>心跳包机制设计详解</h2><p>存在下面两种情形：</p>\n<p><strong>情形一</strong>：一个客户端连接服务器以后，如果长期没有和服务器有数据来往，可能会被防火墙程序关闭连接，有时候我们并不想要被关闭连接。例如，对于一个即时通讯软件，如果服务器没有消息时，我们确实不会和服务器有任何数据交换，但是如果连接被关闭了，有新消息来时，我们再也没法收到了，这就违背了“即时通讯”的设计要求。</p>\n<p><strong>情形二</strong>：通常情况下，服务器与某个客户端一般不是位于同一个网络，其之间可能经过数个路由器和交换机，如果其中某个必经路由器或者交换器出现了故障，并且一段时间内没有恢复，导致这之间的链路不再畅通，而此时服务器与客户端之间也没有数据进行交换，由于 TCP 连接是状态机，对于这种情况，无论是客户端或者服务器都无法感知与对方的连接是否正常，这类连接我们一般称之为“死链”。</p>\n<p><strong>情形一</strong>中的应用场景要求必须保持客户端与服务器之间的连接正常，就是我们通常所说的“保活“。如上文所述，当服务器与客户端一定时间内没有有效业务数据来往时，我们只需要给对端发送心跳包即可实现保活。</p>\n<p><strong>情形二</strong>中的死链，只要我们此时任意一端给对端发送一个数据包即可检测链路是否正常，这类数据包我们也称之为”心跳包”，这种操作我们称之为“心跳检测”。顾名思义，如果一个人没有心跳了，可能已经死亡了；一个连接长时间没有正常数据来往，也没有心跳包来往，就可以认为这个连接已经不存在，为了节约服务器连接资源，我们可以通过关闭 socket，回收连接资源。</p>\n<p>根据上面的分析，让我再强调一下，心跳检测一般有两个作用：</p>\n<ul>\n<li>保活</li>\n<li>检测死链</li>\n</ul>\n<h3 id=\"TCP-keepalive-选项\"><a href=\"#TCP-keepalive-选项\" class=\"headerlink\" title=\"TCP keepalive 选项\"></a>TCP keepalive 选项</h3><p>操作系统的 TCP&#x2F;IP 协议栈其实提供了这个的功能，即 keepalive 选项。在 Linux 操作系统中，我们可以通过代码启用一个 socket 的心跳检测（即每隔一定时间间隔发送一个心跳检测包给对端），代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//on 是 1 表示打开 keepalive 选项，为 0 表示关闭，0 是默认值</span><br><span class=\"line\">int on = 1;</span><br><span class=\"line\">setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &amp;on, sizeof(on));</span><br></pre></td></tr></table></figure>\n\n<p>但是，即使开启了这个选项，这个选项默认发送心跳检测数据包的时间间隔是 7200 秒（2 小时），这时间间隔实在是太长了，不具有实用性。</p>\n<p>我们可以通过继续设置 keepalive 相关的三个选项来改变这个时间间隔，它们分别是 TCP_KEEPIDLE、TCP_KEEPINTVL 和 TCP_KEEPCNT，示例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送 keepalive 报文的时间间隔</span><br><span class=\"line\">int val = 7200;</span><br><span class=\"line\">setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, &amp;val, sizeof(val));</span><br><span class=\"line\"></span><br><span class=\"line\">//两次重试报文的时间间隔</span><br><span class=\"line\">int interval = 75;</span><br><span class=\"line\">setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, &amp;interval, sizeof(interval));</span><br><span class=\"line\"></span><br><span class=\"line\">int cnt = 9;</span><br><span class=\"line\">setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, &amp;cnt, sizeof(cnt));</span><br></pre></td></tr></table></figure>\n\n<p>TCP_KEEPIDLE 选项设置了发送 keepalive 报文的时间间隔，发送时如果对端回复 ACK。则本端 TCP 协议栈认为该连接依然存活，继续等 7200 秒后再发送 keepalive 报文；如果对端回复 RESET，说明对端进程已经重启，本端的应用程序应该关闭该连接。</p>\n<p>如果对端没有任何回复，则本端做重试，如果重试 9 次（TCP_KEEPCNT 值）（前后重试间隔为 75 秒（TCP_KEEPINTVL 值））仍然不可达，则向应用程序返回 ETIMEOUT（无任何应答）或 EHOST 错误信息。</p>\n<p>我们可以使用如下命令查看 Linux 系统上的上述三个值的设置情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ238vnojlyZ ~]# sysctl -a | grep keepalive</span><br><span class=\"line\">net.ipv4.tcp_keepalive_intvl = 75</span><br><span class=\"line\">net.ipv4.tcp_keepalive_probes = 9</span><br><span class=\"line\">net.ipv4.tcp_keepalive_time = 7200</span><br></pre></td></tr></table></figure>\n\n<p>在 Windows 系统设置 keepalive 及对应选项的代码略有不同：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//开启 keepalive 选项</span><br><span class=\"line\">const char on = 1;</span><br><span class=\"line\">setsockopt(socket, SOL_SOCKET, SO_KEEPALIVE, (char *)&amp;on, sizeof(on);</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置超时详细信息</span><br><span class=\"line\">DWORD cbBytesReturned;</span><br><span class=\"line\">tcp_keepalive klive;</span><br><span class=\"line\">// 启用保活</span><br><span class=\"line\">klive.onoff = 1;</span><br><span class=\"line\">klive.keepalivetime = 7200;</span><br><span class=\"line\">// 重试间隔为10秒</span><br><span class=\"line\">klive.keepaliveinterval = 1000 * 10; </span><br><span class=\"line\">WSAIoctl(socket, SIO_KEEPALIVE_VALS, &amp;klive, sizeof(tcp_keepalive), NULL, 0, &amp;cbBytesReturned, NULL, NULL);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"应用层的心跳包机制设计\"><a href=\"#应用层的心跳包机制设计\" class=\"headerlink\" title=\"应用层的心跳包机制设计\"></a>应用层的心跳包机制设计</h3><p>由于 keepalive 选项需要为每个连接中的 socket 开启，这不一定是必须的，可能会产生大量无意义的带宽浪费，且 keepalive 选项不能与应用层很好地交互，因此一般实际的服务开发中，还是建议读者在应用层设计自己的心跳包机制。那么如何设计呢？</p>\n<p>从技术来讲，心跳包其实就是一个预先规定好格式的数据包，在程序中启动一个定时器，定时发送即可，这是最简单的实现思路。但是，如果通信的两端有频繁的数据来往，此时到了下一个发心跳包的时间点了，此时发送一个心跳包。这其实是一个流量的浪费，既然通信双方不断有正常的业务数据包来往，这些数据包本身就可以起到保活作用，为什么还要浪费流量去发送这些心跳包呢？所以，对于用于保活的心跳包，我们最佳做法是，设置一个上次包时间，每次收数据和发数据时，都更新一下这个包时间，而心跳检测计时器每次检测时，将这个包时间与当前系统时间做一个对比，如果时间间隔大于允许的最大时间间隔（实际开发中根据需求设置成 15 ~ 45 秒不等），则发送一次心跳包。总而言之，就是在与对端之间，没有数据来往达到一定时间间隔时才发送一次心跳包。</p>\n<p>发心跳包的伪码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool CIUSocket::Send()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int nSentBytes = 0;</span><br><span class=\"line\">    int nRet = 0;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nRet = ::send(m_hSocket, m_strSendBuf.c_str(), m_strSendBuf.length(), 0);</span><br><span class=\"line\">        if (nRet == SOCKET_ERROR)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (::WSAGetLastError() == WSAEWOULDBLOCK)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LOG_ERROR(&quot;Send data error, disconnect server:%s, port:%d.&quot;, m_strServer.c_str(), m_nPort);</span><br><span class=\"line\">                Close();</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (nRet &lt; 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //一旦出现错误就立刻关闭Socket</span><br><span class=\"line\">            LOG_ERROR(&quot;Send data error, disconnect server:%s, port:%d.&quot;, m_strServer.c_str(), m_nPort);</span><br><span class=\"line\">            Close();</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        m_strSendBuf.erase(0, nRet);</span><br><span class=\"line\">        if (m_strSendBuf.empty())</span><br><span class=\"line\">            break;</span><br><span class=\"line\"></span><br><span class=\"line\">        ::Sleep(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //记录一下最近一次发包时间</span><br><span class=\"line\">        std::lock_guard&lt;std::mutex&gt; guard(m_mutexLastDataTime);</span><br><span class=\"line\">        m_nLastDataTime = (long)time(NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool CIUSocket::Recv()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int nRet = 0;</span><br><span class=\"line\">    char buff[10 * 1024];</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        nRet = ::recv(m_hSocket, buff, 10 * 1024, 0);</span><br><span class=\"line\">        if (nRet == SOCKET_ERROR)                //一旦出现错误就立刻关闭Socket</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (::WSAGetLastError() == WSAEWOULDBLOCK)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LOG_ERROR(&quot;Recv data error, errorNO=%d.&quot;, ::WSAGetLastError());</span><br><span class=\"line\">                //Close();</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (nRet &lt; 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LOG_ERROR(&quot;Recv data error, errorNO=%d.&quot;, ::WSAGetLastError());</span><br><span class=\"line\">            //Close();</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        m_strRecvBuf.append(buff, nRet);</span><br><span class=\"line\"></span><br><span class=\"line\">        ::Sleep(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::lock_guard&lt;std::mutex&gt; guard(m_mutexLastDataTime);</span><br><span class=\"line\">        //记录一下最近一次收包时间</span><br><span class=\"line\">        m_nLastDataTime = (long)time(NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void CIUSocket::RecvThreadProc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LOG_INFO(&quot;Recv data thread start...&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    int nRet;</span><br><span class=\"line\">    //上网方式 </span><br><span class=\"line\">    DWORD   dwFlags;</span><br><span class=\"line\">    BOOL    bAlive;</span><br><span class=\"line\">    while (!m_bStop)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //检测到数据则收数据</span><br><span class=\"line\">        nRet = CheckReceivedData();</span><br><span class=\"line\">        //出错</span><br><span class=\"line\">        if (nRet == -1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_pRecvMsgThread-&gt;NotifyNetError();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //无数据</span><br><span class=\"line\">        else if (nRet == 0)</span><br><span class=\"line\">        &#123;           </span><br><span class=\"line\">            long nLastDataTime = 0;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                std::lock_guard&lt;std::mutex&gt; guard(m_mutexLastDataTime);</span><br><span class=\"line\">                nLastDataTime = m_nLastDataTime;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (m_nHeartbeatInterval &gt; 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //当前系统时间与上一次收发数据包的时间间隔超过了m_nHeartbeatInterval</span><br><span class=\"line\">                //则发一次心跳包</span><br><span class=\"line\">                if (time(NULL) - nLastDataTime &gt;= m_nHeartbeatInterval)</span><br><span class=\"line\">                    SendHeartbeatPackage();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //有数据</span><br><span class=\"line\">        else if (nRet == 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (!Recv())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                m_pRecvMsgThread-&gt;NotifyNetError();</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            DecodePackages();</span><br><span class=\"line\">        &#125;// end if</span><br><span class=\"line\">    &#125;// end while-loop</span><br><span class=\"line\"></span><br><span class=\"line\">    LOG_INFO(&quot;Recv data thread finish...&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同理，检测心跳包的一端，应该是在与对端没有数据来往达到一定时间间隔时才做一次心跳检测。</p>\n<p>心跳检测一端的伪码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void BusinessSession::send(const char* pData, int dataLength)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    bool sent = TcpSession::send(pData, dataLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送完数据更新下发包时间</span><br><span class=\"line\">    updateHeartbeatTime();      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void BusinessSession::handlePackge(char* pMsg, int msgLength, bool&amp; closeSession, std::vector&lt;std::string&gt;&amp; vectorResponse)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //对数据合法性进行校验</span><br><span class=\"line\">    if (pMsg == NULL || pMsg[0] == 0 || msgLength &lt;= 0 || msgLength &gt; MAX_DATA_LENGTH)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //非法刺探请求，不做任何应答，直接关闭连接</span><br><span class=\"line\">        closeSession = true;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //更新下收包时间</span><br><span class=\"line\">    updateHeartbeatTime();</span><br><span class=\"line\"></span><br><span class=\"line\">    //省略包处理代码...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void BusinessSession::updateHeartbeatTime()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::lock_guard&lt;std::mutex&gt; scoped_guard(m_mutexForlastPackageTime);</span><br><span class=\"line\">    m_lastPackageTime = (int64_t)time(nullptr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool BusinessSession::doHeartbeatCheck()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    const Config&amp; cfg = Singleton&lt;Config&gt;::Instance();</span><br><span class=\"line\">    int64_t now = (int64_t)time(nullptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::lock_guard&lt;std::mutex&gt; lock_guard(m_mutexForlastPackageTime);</span><br><span class=\"line\">    if (now - m_lastPackageTime &gt;= cfg.m_nMaxClientDataInterval)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //心跳包检测，超时，关闭连接</span><br><span class=\"line\">        LOGE(&quot;heartbeat expired, close session&quot;);</span><br><span class=\"line\">        shutdown();</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void TcpServer::checkSessionHeartbeat()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int64_t now = (int64_t)time(nullptr);</span><br><span class=\"line\">    if (now - m_nLastCheckHeartbeatTime &gt;= m_nHeartbeatCheckInterval)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_spSessionManager-&gt;checkSessionHeartbeat();</span><br><span class=\"line\">        m_nLastCheckHeartbeatTime = (int64_t)time(nullptr);</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void SessionManager::checkSessionHeartbeat()</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    std::lock_guard&lt;std::mutex&gt; scoped_lock(m_mutexForSession);</span><br><span class=\"line\">    for (const auto&amp; iter : m_mapSessions)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //这里调用 BusinessSession::doHeartbeatCheck()</span><br><span class=\"line\">        iter.second-&gt;doHeartbeatCheck();</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要注意的是：一般是客户端主动给服务器端发送心跳包，服务器端做心跳检测决定是否断开连接。而不是反过来，从客户端的角度来说，客户端为了让自己得到服务器端的正常服务有必要主动和服务器保持连接状态正常，而服务器端不会局限于某个特定的客户端，如果客户端不能主动和其保持连接，那么就会主动回收与该客户端的连接。当然，服务器端在收到客户端的心跳包时应该给客户端一个心跳应答。</p>\n</blockquote>\n<h3 id=\"带业务数据的心跳包\"><a href=\"#带业务数据的心跳包\" class=\"headerlink\" title=\"带业务数据的心跳包\"></a>带业务数据的心跳包</h3><p>上面介绍的心跳包是从纯技术的角度来说的，在实际应用中，有时候我们需要定时或者不定时从服务器端更新一些数据，我们可以把这类数据放在心跳包中，定时或者不定时更新。</p>\n<p>这类带业务数据的心跳包，就不再是纯粹技术上的作用了（这里说的技术的作用指的上文中介绍的心跳包起保活和检测死链作用）。</p>\n<p>这类心跳包实现也很容易，即在心跳包数据结构里面加上需要的业务字段信息，然后在定时器中定时发送，客户端发给服务器，服务器在应答心跳包中填上约定的业务数据信息即可。</p>\n<h3 id=\"心跳包与流量\"><a href=\"#心跳包与流量\" class=\"headerlink\" title=\"心跳包与流量\"></a>心跳包与流量</h3><p>通常情况下，多数应用场景下，与服务器端保持连接的多个客户端中，同一时间段活跃用户（这里指的是与服务器有频繁数据来往的客户端）一般不会太多。当连接数较多时，进出服务器程序的数据包通常都是心跳包（为了保活）。所以为了减轻网络代码压力，节省流量，尤其是针对一些 3&#x2F;4 G 手机应用，我们在设计心跳包数据格式时应该尽量减小心跳包的数据大小。</p>\n<h3 id=\"心跳包与调试\"><a href=\"#心跳包与调试\" class=\"headerlink\" title=\"心跳包与调试\"></a>心跳包与调试</h3><p>如前文所述，对于心跳包，服务器端的逻辑一般是在一定时间间隔内没有收到客户端心跳包时会主动断开连接。在我们开发调试程序过程中，我们可能需要将程序通过断点中断下来，这个过程可能是几秒到几十秒不等。等程序恢复执行时，连接可能因为心跳检测逻辑已经被断开。</p>\n<p>调试过程中，我们更多的关注的是业务数据处理的逻辑是否正确，不想被一堆无意义的心跳包数据干扰实线。</p>\n<p>鉴于以上两点原因，我们一般在调试模式下关闭或者禁用心跳包检测机制。代码大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ChatSession::ChatSession(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn, int sessionid) :</span><br><span class=\"line\">TcpSession(conn), </span><br><span class=\"line\">m_id(sessionid),</span><br><span class=\"line\">m_seq(0),</span><br><span class=\"line\">m_isLogin(false)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_userinfo.userid = 0;</span><br><span class=\"line\">    m_lastPackageTime = time(NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">//这里设置了非调试模式下才开启心跳包检测功能</span><br><span class=\"line\">#ifndef _DEBUG</span><br><span class=\"line\">    EnableHearbeatCheck();</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，你也可以将开启心跳检测的开关做成配置信息放入程序配置文件中。</p>\n<h3 id=\"心跳包与日志\"><a href=\"#心跳包与日志\" class=\"headerlink\" title=\"心跳包与日志\"></a>心跳包与日志</h3><p>实际生产环境，我们一般会将程序收到的和发出去的数据包写入日志中，但是无业务信息的心跳包信息是个例外，一般会刻意不写入日志，这是因为心跳包数据一般比较多，如果写入日志会导致日志文件变得很大，且充斥大量无意义的心跳包日志，所以一般在写日志时会屏蔽心跳包信息写入。</p>\n<p>我这里的建议是，可以将心跳包信息是否写入日志做成一个配置开关，一般处于关闭状态，有需要时再开启。例如，对于一个 WebSocket 服务，ping 和 pong 是心跳包数据，下面示例代码按需输出心跳日志信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void BusinessSession::send(std::string_view strResponse)</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    bool success = WebSocketSession::send(strResponse);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (success)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bool enablePingPongLog = Singleton&lt;Config&gt;::Instance().m_bPingPongLogEnabled;</span><br><span class=\"line\"></span><br><span class=\"line\">        //其他消息正常打印，心跳消息按需打印</span><br><span class=\"line\">        if (strResponse != &quot;pong&quot; || enablePingPongLog)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LOGI(&quot;msg sent to client [%s], sessionId: %s, session: 0x%0x, clientId: %s, accountId: %s, frontId: %s, msg: %s&quot;,</span><br><span class=\"line\">                 getClientInfo(), m_strSessionId.c_str(), (int64_t)this, m_strClientID.c_str(), m_strAccountID.c_str(), BusinessSession::m_strFrontId.c_str(), strResponse.data());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要说明的是，以上示例代码使用 C&#x2F;C++ 语言编写，但是本节介绍的心跳包机制设计思路和注意事项是普适性原理，同样适用于其他编程语言。</p>\n","text":"心跳包机制设计详解存在下面两种情形： 情形一：一个客户端连接服务器以后，如果长期没有和服务器有数据来往，可能会被防火墙程序关闭连接，有时候我们并不想要被关闭连接...","permalink":"/post/转载/高性能服务器框架设计/心跳包机制设计详解","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%83%E8%B7%B3%E5%8C%85%E6%9C%BA%E5%88%B6%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">心跳包机制设计详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP-keepalive-%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">TCP keepalive 选项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%B1%82%E7%9A%84%E5%BF%83%E8%B7%B3%E5%8C%85%E6%9C%BA%E5%88%B6%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">应用层的心跳包机制设计</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%A6%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E5%BF%83%E8%B7%B3%E5%8C%85\"><span class=\"toc-text\">带业务数据的心跳包</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%83%E8%B7%B3%E5%8C%85%E4%B8%8E%E6%B5%81%E9%87%8F\"><span class=\"toc-text\">心跳包与流量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%83%E8%B7%B3%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">心跳包与调试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%83%E8%B7%B3%E5%8C%85%E4%B8%8E%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">心跳包与日志</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】实例：一个服务器程序的架构介绍","uid":"109d28235b9c7b6892c4c14f9b41b157","slug":"转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.405Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍.json","keywords":null,"cover":null,"text":"实例：一个服务器程序的架构介绍本文将介绍我曾经做过的一个项目的服务器架构和服务器编程的一些重要细节。 一、程序运行环境操作系统：Centos 7.0 编译器：g...","permalink":"/post/转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】日志系统的设计","uid":"ce0a6a8a156c3a000bce90a0bc7659bd","slug":"转载/高性能服务器框架设计/日志系统的设计","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.888Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/日志系统的设计.json","keywords":null,"cover":[],"text":"日志系统的设计为什么需要日志实际的软件项目产出都有一个流程，即先开发、测试，再发布生产，由于人的因素，既然是软件产品就不可能百分百没有 bug 或者逻辑错误，对...","permalink":"/post/转载/高性能服务器框架设计/日志系统的设计","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}