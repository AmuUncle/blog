{"title":"【转载】错误码系统的设计","uid":"244b4809351f4fc8c6cac7d22fa4014d","slug":"转载/高性能服务器框架设计/错误码系统的设计","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.887Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/错误码系统的设计.json","keywords":null,"cover":[],"content":"<h2 id=\"错误码系统的设计\"><a href=\"#错误码系统的设计\" class=\"headerlink\" title=\"错误码系统的设计\"></a>错误码系统的设计</h2><blockquote>\n<p>本文介绍服务器开发中一组服务中错误码系统的设计理念与实践，如果读者从来没想过或者没接触过这种设计理念，建议认真体会一下这种设计思路的优点。</p>\n</blockquote>\n<h4 id=\"错误码的作用\"><a href=\"#错误码的作用\" class=\"headerlink\" title=\"错误码的作用\"></a>错误码的作用</h4><p>读者如果有使用过中国电信的宽带账号上网的经历，如果我们登陆不成功，一般服务器会返回一个错误码，如651、678。然后，我们打中国电信的客服电话，客服会询问我们错误码是多少，通过错误码他们的技术人员就大致知道了错误原因；并且通过错误码，他们就知道到底是电信的服务器问题还是宽带用户自己的设备或者操作问题，如果是用户自己的问题，他们一般会尝试教用户如何操作，而不是冒然就派遣维修人员上门，这样不仅能尽早解决问题同时也节约了人力成本。</p>\n<p>再举另外一个例子，我们日常浏览网页，当Web服务器正常返回页面时，状态码一般是200(OK)，而当页面不存在时，错误码一般是404，另外像503等错误都是比较常见的。</p>\n<p>通过以上两个例子，读者应该能明白，对于服务器系统来说，设计一套好的错误码是非常有必要的，可以在用户请求出问题时迅速定位并解决问题。具体包括两个方面：</p>\n<ol>\n<li>可以迅速定位是用户“输入”问题还是服务器自身的问题。</li>\n</ol>\n<p>所谓的用户“输入”问题，是指用户的不当操作，这里的“用户的不当操作”可能是因为客户端软件本身的逻辑错误或漏洞，也可能是使用客户端的人的非法操作，而客户端软件在设计上因为考虑不周而缺乏有效性校验，这两类情形都可能会产生非法的数据，并且直接发给服务器。一个好的服务端系统不能假设客户端的请求数据一定是合法的，必须对传过来的数据做有效性校验。服务器没有义务一定给非法的请求做出应答，因此请求的最终结果是服务器不应答或给客户端不想要的应答。</p>\n<p>以上面的例子为例，宽带用户输入了无效的用户名或者密码造成服务器拒绝访问；用户在浏览器中输入了一个无效的网址等。这类错误，都是需要用户自己解决或者用户可以自己解决的。如果错误码可以反映出这类错误，那么在实际服务器运维的过程中，当用户反馈这一类故障时，我们通过服务器内部产生的错误码或者应答给客户端的错误码，准确快速地确定问题原因。如果是用户非法请求造成的，可以让用户自行解决。注意，这里的“用户”，可以代指人，也可以代指使用某个服务器的所有下游服务和客户端。</p>\n<ol>\n<li><p>可以快速定位哪个步骤或哪个服务出了问题。</p>\n<p>对于单个服务，假设收到某个“客户端”请求时，需要经历多个步骤才能完成，而这中间任何一个步骤都可能出问题，在不同步骤出错时返回不同的错误码，那么就可以知道是哪个步骤出了问题。</p>\n<p>其次，一般稍微复杂一点的系统，都不是单个服务，往往是由一组服务构成。如果将错误码分段，每个服务的错误码都有各自的范围，那么通过错误码，我们也能准确地知道是哪个服务出了问题。</p>\n</li>\n</ol>\n<h4 id=\"错误码系统设计实践\"><a href=\"#错误码系统设计实践\" class=\"headerlink\" title=\"错误码系统设计实践\"></a>错误码系统设计实践</h4><p>前面介绍了太多的理论知识，我们来看一个具体的例子。假设如下一个“智能邮件系统”，其结构如下所示：</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/errorsys1.png\"></p>\n<p>上图中的服务<strong>“智能邮件坐席站点”</strong>和<strong>“配置站点”</strong>是客户端，<strong>”智能邮件操作综合接口“</strong>和<strong>”邮件配置服务“</strong>是对客户端提供服务的前置服务，这两个前置服务后面还依赖后面的数个服务。由于这里我们要说明的是技术问题，而不是业务问题，所以具体每个服务作何用途这里就不一一介绍了。在这个系统中，当客户端得到前置服务某个不正确应答时，会得到一个错误码，我们按以下规则来设计错误码：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">服务名称</th>\n<th align=\"center\">正值错误码范围</th>\n<th align=\"center\">负值错误码范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">智能邮件综合操作接口</td>\n<td align=\"center\">100~199</td>\n<td align=\"center\">-100~-199</td>\n</tr>\n<tr>\n<td align=\"center\">ES数据同步服务</td>\n<td align=\"center\">200~299</td>\n<td align=\"center\">-200~-299</td>\n</tr>\n<tr>\n<td align=\"center\">邮件配置服务</td>\n<td align=\"center\">300~399</td>\n<td align=\"center\">-300~-399</td>\n</tr>\n<tr>\n<td align=\"center\">邮件基础服务</td>\n<td align=\"center\">400~499</td>\n<td align=\"center\">-400~-499</td>\n</tr>\n</tbody></table>\n<p>我们在设计这套系统时，做如下规定：</p>\n<ol>\n<li><strong>所有的正值错误码表示所在服务的上游服务发来的请求不满足业务要求</strong>。举个例子，假设某次<strong>智能邮件坐席站点</strong>客户端得到了一个错误码<strong>101</strong>，我们可以先确定错误产生的服务器是<strong>智能邮件综合操作接口</strong>服务；其次，产生该错误的原因是<strong>智能邮件坐席站点</strong>客户端发送给<strong>智能邮件综合操作接口</strong>服务的请求不满足要求，通过这个错误码我们甚至可以进一步确定发送的请求哪里不符合要求。如我们可以这样定义：</li>\n</ol>\n<ul>\n<li><p>100 用户名不存在</p>\n</li>\n<li><p>101 密码无效</p>\n</li>\n<li><p>102 发送的邮件收件人非法</p>\n</li>\n<li><p>103 邮件正文含有非法字符</p>\n<p>其他从略，此处就不一一列举了。</p>\n</li>\n</ul>\n<ol>\n<li><strong>所有的负值错误码表示程序内部错误</strong>。如：</li>\n</ol>\n<ul>\n<li><p>-100 数据库操作错误</p>\n</li>\n<li><p>-101 网络错误</p>\n</li>\n<li><p>-102 内存分配失败</p>\n</li>\n<li><p>-103 <strong>ES数据同步服务</strong>连接不上</p>\n<p>其他从略，此处就不一一列举了。</p>\n<h4 id=\"对负值错误码的特殊处理\"><a href=\"#对负值错误码的特殊处理\" class=\"headerlink\" title=\"对负值错误码的特殊处理\"></a>对负值错误码的特殊处理</h4></li>\n</ul>\n<p>通过前面的介绍，读者应该能看出正值错误码与负值错误码的区别，即正值错误码一般是由请求服务的客户产生，如果出现这样的错误，应该由客户自己去解决问题；而负值错误码，则一般是服务内部产生的错误。因此，如果是正值错误码，<strong>错误码</strong>和<strong>错误信息</strong>一般可以直接返回给客户端；而对于负值错误，我们一般只将<strong>错误码</strong>返回给客户端，而<strong>不带上具体的错误信息</strong>，这也是读者在使用很多软件产品时，经常会得到“<strong>网络错误</strong>”这类万能错误提示。也就是说对于负值错误码的错误信息，我们可以统一显示成“<strong>网络错误</strong>”或者其他比较友好的错误提示。</p>\n<p>这样做的原因有二：</p>\n<ol>\n<li>客户端即使拿到这样的错误信息，也不能对排查和解决问题提供任何帮助，因为这些错误是程序内部错误或者bug。</li>\n<li>这类错误有可能是企业内部的设计缺陷，直接暴露给客户，除了让客户对企业的技术实力产生质疑以外，没有任何其他正面效应。</li>\n</ol>\n<p>而之所以带上错误码，是为了方便内部排查和定位问题。当然，现在的企业服务，内部也有大量监控系统，可能也不会再暴露这样的错误码了。</p>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>上文介绍了利用错误码的分段来定位问题的技术思想，其实不仅仅是错误码可以分段，我们在开发一组服务时，业务类型也可以通过编号来分段，这样通过业务号就能知道归属哪个服务了。</p>\n<p>如果读者以前没接触过这种设计思想，希望可以好好的思考和体会一下。</p>\n","text":"错误码系统的设计 本文介绍服务器开发中一组服务中错误码系统的设计理念与实践，如果读者从来没想过或者没接触过这种设计理念，建议认真体会一下这种设计思路的优点。 错...","permalink":"/post/转载/高性能服务器框架设计/错误码系统的设计","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%A0%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">错误码系统的设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%A0%81%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">错误码的作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E7%A0%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">错误码系统设计实践</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B4%9F%E5%80%BC%E9%94%99%E8%AF%AF%E7%A0%81%E7%9A%84%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86\"><span class=\"toc-text\">对负值错误码的特殊处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">扩展</span></a></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】日志系统的设计","uid":"ce0a6a8a156c3a000bce90a0bc7659bd","slug":"转载/高性能服务器框架设计/日志系统的设计","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.888Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/日志系统的设计.json","keywords":null,"cover":[],"text":"日志系统的设计为什么需要日志实际的软件项目产出都有一个流程，即先开发、测试，再发布生产，由于人的因素，既然是软件产品就不可能百分百没有 bug 或者逻辑错误，对...","permalink":"/post/转载/高性能服务器框架设计/日志系统的设计","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】高性能服务器架构设计总结","uid":"10a9cf5937dc7bc9f3410b780f114a73","slug":"转载/高性能服务器框架设计/高性能服务器架构设计总结","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.407Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/高性能服务器架构设计总结.json","keywords":null,"cover":[],"text":"高性能服务器架构设计总结系列目录 第01篇 主线程与工作线程的分工 第02篇 Reactor模式 第03篇 一个服务器程序的架构介绍 第04篇 如何将socke...","permalink":"/post/转载/高性能服务器框架设计/高性能服务器架构设计总结","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"57 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}