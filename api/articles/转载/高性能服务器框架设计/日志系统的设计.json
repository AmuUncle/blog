{"title":"【转载】日志系统的设计","uid":"ce0a6a8a156c3a000bce90a0bc7659bd","slug":"转载/高性能服务器框架设计/日志系统的设计","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.888Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/日志系统的设计.json","keywords":null,"cover":[],"content":"<h2 id=\"日志系统的设计\"><a href=\"#日志系统的设计\" class=\"headerlink\" title=\"日志系统的设计\"></a>日志系统的设计</h2><h3 id=\"为什么需要日志\"><a href=\"#为什么需要日志\" class=\"headerlink\" title=\"为什么需要日志\"></a>为什么需要日志</h3><p>实际的软件项目产出都有一个流程，即先开发、测试，再发布生产，由于人的因素，既然是软件产品就不可能百分百没有 bug 或者逻辑错误，对于已经发布到生产的项目，一旦某个时刻产生非预期的结果，我们就需要去定位和排查问题。但是一般正式的生产环境的服务器或者产品是不允许开发人员通过附加调试器去排查问题的，主要有如下可能原因：</p>\n<ol>\n<li>在很多互联网企业，开发部门、测试部分和产品运维部门是分工明确的，软件产品一旦发布到生产环境以后，将全部交由运维部门人员去管理和维护，而原来开发此产品的开发人员不再拥有相关的操作程序的权限。</li>\n<li>对于已经上了生产环境的服务，其数据和程序稳定性是公司的核心产值所在，一般不敢或不允许被开发人员随意调试或者操作，以免造成损失。</li>\n<li>发布到生产环境的服务，一般为了让程序执行效率更高、文件体积更小，都是去掉调试符号后的版本，不方便也不利于调试。</li>\n</ol>\n<p>既然我们无法通过调试器去调试，这个时候为了跟踪和回忆当时的程序行为进而定位问题，我们就需要日志系统。</p>\n<p>退一步说，即使在开发或者测试环境，我们可以把程序附加到调试器上去调试，但是对于一些特定的程序行为，我们无法通过设置断点，让程序在某个时刻暂停下来进行调试。例如，对于某些网络通信功能，如果暂停时间过长（相对于某些程序逻辑来说），通信的对端可能由于彼端没有在规定时间内响应而断开连接，导致程序逻辑无法进入我们想要的执行流中去；再例如，对于一些高频操作（如心跳包、定时器、界面绘制下的某些高频重复行为），可能在少量次数下无法触发我们想要的行为，而通过断点的暂停方式，我们不得不重复操作几十次、上百次甚至更多，这样排查问题效率是非常低下的。对于这类操作，我们可以通过打印日志，将当时的程序行为上下文现场记录下来，然后从日志系统中找到某次不正常的行为的上下文信息。这也是日志的另外一个作用。</p>\n<p>本文将从技术和业务上两个方面来介绍日志系统相关的设计与开发，所谓技术上，就是如何从程序开发的角度设计一款功能强大、性能优越、使用方便的日志系统；而业务上，是指我们在使用日志系统时，应该去记录哪些行为和数据，既简洁、不啰嗦，又方便需要时快速准确地定位到问题。</p>\n<h3 id=\"日志系统的技术上的实现\"><a href=\"#日志系统的技术上的实现\" class=\"headerlink\" title=\"日志系统的技术上的实现\"></a>日志系统的技术上的实现</h3><p>日志的最初的原型即将程序运行的状态打印出来，对于 C&#x2F;C++ 这门语言来说，即可以利用 <strong>printf</strong>、<strong>std::cout</strong> 等控制台输出函数，将日志信息输出到控制台，这类简单的情形我们不在此过多赘述。</p>\n<p>对于商业项目，为了方便排查问题，我们一般不将日志写到控制台，而是输出到文件或者数据库系统。不管哪一种，其思路基本上一致，我们这里以写文件为例来详细介绍。</p>\n<h4 id=\"同步写日志\"><a href=\"#同步写日志\" class=\"headerlink\" title=\"同步写日志\"></a>同步写日志</h4><p>所谓同步写日志，指的是在输出日志的地方，将日志即时写入到文件中去。根据笔者的经验，这种设计广泛地用于相当多的的客户端软件。笔者曾从事过数年的客户端开发（包括 PC、安卓软件），设计过一些功能复杂的金融客户端产品，在这些系统中采用的就是这种同步写日志的方式。之所以使用这种方式其主要原因就是设计简单，而又不会影响用户使用体验。说到这里读者可能有这样一个疑问：一般的客户端软件，一般存在界面，而界面部分所属的逻辑就是程序的主线程，如果采取这种同步写日志的方式，当写日志时，写文件是磁盘 IO 操作，相比较程序其他部分是 CPU 操作，前者要慢很多，这样势必造成CPU等待，进而导致主线程“卡”在写文件处，进而造成界面卡顿，从而导致用户使用软件的体验不好。读者的这种顾虑确实是存在的。但是，很多时候我们不用担心这种问题，主要有两个原因：</p>\n<ol>\n<li>对于客户端程序，即使在主线程（UI 线程）中同步写文件，其单次或者几次磁盘操作累加时间，与人（用户）的可感知时间相比，也是非常小的，也就是说用户根本感觉不到这种同步写文件造成的延迟。当然，这里也给您一个提醒就是，如果在 UI 线程里面写日志，尤其是在一些高频操作中（如 Windows 的界面绘制消息 WM_PAINT 处理逻辑中），一定要控制写日志的长度和次数，否则就会因频繁写文件或一次写入数据过大而对界面造成卡顿。</li>\n<li>客户端程序除了 UI 线程，还有其他与界面无关的工作线程，在这些线程中直接写文件，一般不会对用户的体验产生什么影响。</li>\n</ol>\n<p>说了这么多，我们给出一个具体的例子。</p>\n<p><strong>日志类的 .h 文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc:   IULog.h</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date:   2014.12.25</span><br><span class=\"line\"> */</span><br><span class=\"line\">#ifndef __LOG_H__</span><br><span class=\"line\">#define __LOG_H__</span><br><span class=\"line\"></span><br><span class=\"line\">enum LOG_LEVEL</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LOG_LEVEL_INFO,</span><br><span class=\"line\">    LOG_LEVEL_WARNING,</span><br><span class=\"line\">    LOG_LEVEL_ERROR</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//注意：如果打印的日志信息中有中文，则格式化字符串要用_T()宏包裹起来，</span><br><span class=\"line\">#define LOG_INFO(...)     CIULog::Log(LOG_LEVEL_INFO, __FUNCSIG__,__LINE__, __VA_ARGS__)</span><br><span class=\"line\">#define LOG_WARNING(...)  CIULog::Log(LOG_LEVEL_WARNING, __FUNCSIG__, __LINE__,__VA_ARGS__)</span><br><span class=\"line\">#define LOG_ERROR(...)    CIULog::Log(LOG_LEVEL_ERROR, __FUNCSIG__,__LINE__, __VA_ARGS__)</span><br><span class=\"line\"></span><br><span class=\"line\">class CIULog</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    static bool Init(bool bToFile, bool bTruncateLongLog, PCTSTR pszLogFileName);</span><br><span class=\"line\">    static void Uninit();</span><br><span class=\"line\"></span><br><span class=\"line\">    static void SetLevel(LOG_LEVEL nLevel);</span><br><span class=\"line\"></span><br><span class=\"line\">    //不输出线程ID号和所在函数签名、行号</span><br><span class=\"line\">    static bool Log(long nLevel, PCTSTR pszFmt, ...);</span><br><span class=\"line\">    //输出线程ID号和所在函数签名、行号</span><br><span class=\"line\">    static bool Log(long nLevel, PCSTR pszFunctionSig, int nLineNo, PCTSTR pszFmt, ...);        //注意:pszFunctionSig参数为Ansic版本</span><br><span class=\"line\">    static bool Log(long nLevel, PCSTR pszFunctionSig, int nLineNo, PCSTR pszFmt, ...);</span><br><span class=\"line\">private:</span><br><span class=\"line\">    CIULog() = delete;</span><br><span class=\"line\">    ~CIULog() = delete;</span><br><span class=\"line\"></span><br><span class=\"line\">    CIULog(const CIULog&amp; rhs) = delete;</span><br><span class=\"line\">    CIULog&amp; operator=(const CIULog&amp; rhs) = delete;</span><br><span class=\"line\"></span><br><span class=\"line\">    static void GetTime(char* pszTime, int nTimeStrLength);</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    static bool             m_bToFile;              //日志写入文件还是写到控制台  </span><br><span class=\"line\">    static HANDLE           m_hLogFile;</span><br><span class=\"line\">    static bool             m_bTruncateLongLog;     //长日志是否截断</span><br><span class=\"line\">    static LOG_LEVEL        m_nLogLevel;            //日志级别</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // !__LOG_H__</span><br></pre></td></tr></table></figure>\n\n<p><strong>日志的 cpp 文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc:   IULog.cpp</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date:   2014.12.25</span><br><span class=\"line\"> */</span><br><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &quot;IULog.h&quot;</span><br><span class=\"line\">#include &quot;EncodingUtil.h&quot;</span><br><span class=\"line\">#include &lt;tchar.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef LOG_OUTPUT</span><br><span class=\"line\">#define LOG_OUTPUT</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#define MAX_LINE_LENGTH 256</span><br><span class=\"line\"></span><br><span class=\"line\">bool CIULog::m_bToFile = false;</span><br><span class=\"line\">bool CIULog::m_bTruncateLongLog = false;</span><br><span class=\"line\">HANDLE CIULog::m_hLogFile = INVALID_HANDLE_VALUE;</span><br><span class=\"line\">LOG_LEVEL CIULog::m_nLogLevel = LOG_LEVEL_INFO;</span><br><span class=\"line\"></span><br><span class=\"line\">bool CIULog::Init(bool bToFile, bool bTruncateLongLog, PCTSTR pszLogFileName)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef LOG_OUTPUT</span><br><span class=\"line\">    m_bToFile = bToFile;</span><br><span class=\"line\">    m_bTruncateLongLog = bTruncateLongLog;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (pszLogFileName == NULL || pszLogFileName[0] == NULL)</span><br><span class=\"line\">        return FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    TCHAR szHomePath[MAX_PATH] = &#123;0&#125;;</span><br><span class=\"line\">    ::GetModuleFileName(NULL, szHomePath, MAX_PATH);</span><br><span class=\"line\">    for (int i = _tcslen(szHomePath); i &gt;= 0; --i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (szHomePath[i] == _T(&#x27;\\\\&#x27;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            szHomePath[i] = _T(&#x27;\\0&#x27;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TCHAR szLogDirectory[MAX_PATH] = &#123; 0 &#125;;</span><br><span class=\"line\">    _stprintf_s(szLogDirectory, _T(&quot;%s\\\\Logs\\\\&quot;), szHomePath);</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD dwAttr = ::GetFileAttributes(szLogDirectory);</span><br><span class=\"line\">    if (!((dwAttr != 0xFFFFFFFF) &amp;&amp; (dwAttr &amp; FILE_ATTRIBUTE_DIRECTORY)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TCHAR cPath[MAX_PATH] = &#123; 0 &#125;;</span><br><span class=\"line\">        TCHAR cTmpPath[MAX_PATH] = &#123; 0 &#125;;</span><br><span class=\"line\">        TCHAR* lpPos = NULL;</span><br><span class=\"line\">        TCHAR cTmp = _T(&#x27;\\0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">        _tcsncpy_s(cPath, szLogDirectory, MAX_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; (int)_tcslen(cPath); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (_T(&#x27;\\\\&#x27;) == cPath[i])</span><br><span class=\"line\">                cPath[i] = _T(&#x27;/&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        lpPos = _tcschr(cPath, _T(&#x27;/&#x27;));</span><br><span class=\"line\">        while (lpPos != NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (lpPos == cPath)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lpPos++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cTmp = *lpPos;</span><br><span class=\"line\">                *lpPos = _T(&#x27;\\0&#x27;);</span><br><span class=\"line\">                _tcsncpy_s(cTmpPath, cPath, MAX_PATH);</span><br><span class=\"line\">                ::CreateDirectory(cTmpPath, NULL);</span><br><span class=\"line\">                *lpPos = cTmp;</span><br><span class=\"line\">                lpPos++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lpPos = _tcschr(lpPos, _T(&#x27;/&#x27;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    m_hLogFile = ::CreateFile(pszLogFileName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);</span><br><span class=\"line\">    if (m_hLogFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // end LOG_OUTPUT</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void CIULog::Uninit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef LOG_OUTPUT</span><br><span class=\"line\">    if(m_hLogFile != INVALID_HANDLE_VALUE)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ::CloseHandle(m_hLogFile);</span><br><span class=\"line\">        m_hLogFile = INVALID_HANDLE_VALUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#endif //end LOG_OUTPUT</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void CIULog::SetLevel(LOG_LEVEL nLevel)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_nLogLevel = nLevel;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool CIULog::Log(long nLevel, PCTSTR pszFmt, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef LOG_OUTPUT</span><br><span class=\"line\">    if (nLevel &lt; m_nLogLevel)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    char szTime[64] = &#123; 0 &#125;;</span><br><span class=\"line\">    GetTime(szTime,ARRAYSIZE(szTime));</span><br><span class=\"line\">    std::string strDebugInfo(szTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string strLevel(&quot;[INFO]&quot;);</span><br><span class=\"line\">    if (nLevel == LOG_LEVEL_WARNING)</span><br><span class=\"line\">        strLevel = &quot;[Warning]&quot;;</span><br><span class=\"line\">    else if (nLevel == LOG_LEVEL_ERROR)</span><br><span class=\"line\">        strLevel = &quot;[Error]&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    strDebugInfo += strLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">    //当前线程信息</span><br><span class=\"line\">    char szThreadID[32] = &#123; 0 &#125;;</span><br><span class=\"line\">    DWORD dwThreadID = ::GetCurrentThreadId();</span><br><span class=\"line\">    sprintf_s(szThreadID, ARRAYSIZE(szThreadID), &quot;[ThreadID: %u]&quot;, dwThreadID);  </span><br><span class=\"line\">    strDebugInfo += szThreadID;</span><br><span class=\"line\"></span><br><span class=\"line\">    //log正文</span><br><span class=\"line\">    std::wstring strLogMsg;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    va_start(ap, pszFmt);</span><br><span class=\"line\">    int nLogMsgLength = _vsctprintf(pszFmt, ap);</span><br><span class=\"line\">    //容量必须算上最后一个\\0</span><br><span class=\"line\">    if ((int)strLogMsg.capacity() &lt; nLogMsgLength + 1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        strLogMsg.resize(nLogMsgLength + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _vstprintf_s((TCHAR*)strLogMsg.data(), strLogMsg.capacity(), pszFmt, ap);</span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\"></span><br><span class=\"line\">    //string内容正确但length不对，恢复一下其length</span><br><span class=\"line\">    std::wstring strMsgFormal;</span><br><span class=\"line\">    strMsgFormal.append(strLogMsg.c_str(), nLogMsgLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    //如果日志开启截断，长日志只取前MAX_LINE_LENGTH个字符</span><br><span class=\"line\">    if (m_bTruncateLongLog)</span><br><span class=\"line\">        strMsgFormal = strMsgFormal.substr(0, MAX_LINE_LENGTH);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string strLogMsgAscii;</span><br><span class=\"line\">    strLogMsgAscii = EncodeUtil::UnicodeToAnsi(strMsgFormal);</span><br><span class=\"line\"></span><br><span class=\"line\">    strDebugInfo += strLogMsgAscii;</span><br><span class=\"line\">    strDebugInfo += &quot;\\r\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(m_bToFile)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(m_hLogFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        ::SetFilePointer(m_hLogFile, 0, NULL, FILE_END);</span><br><span class=\"line\">        DWORD dwBytesWritten = 0;       </span><br><span class=\"line\">        ::WriteFile(m_hLogFile, strDebugInfo.c_str(), strDebugInfo.length(), &amp;dwBytesWritten, NULL);</span><br><span class=\"line\">        ::FlushFileBuffers(m_hLogFile);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ::OutputDebugStringA(strDebugInfo.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // end LOG_OUTPUT</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool CIULog::Log(long nLevel, PCSTR pszFunctionSig, int nLineNo, PCTSTR pszFmt, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef LOG_OUTPUT</span><br><span class=\"line\">    if (nLevel &lt; m_nLogLevel)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //时间</span><br><span class=\"line\">    char szTime[64] = &#123; 0 &#125;;</span><br><span class=\"line\">    GetTime(szTime, ARRAYSIZE(szTime));</span><br><span class=\"line\">    std::string strDebugInfo(szTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    //错误级别</span><br><span class=\"line\">    std::string strLevel(&quot;[INFO]&quot;);</span><br><span class=\"line\">    if (nLevel == LOG_LEVEL_WARNING)</span><br><span class=\"line\">        strLevel = &quot;[Warning]&quot;;</span><br><span class=\"line\">    else if (nLevel == LOG_LEVEL_ERROR)</span><br><span class=\"line\">        strLevel = &quot;[Error]&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    strDebugInfo += strLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">    //当前线程信息</span><br><span class=\"line\">    char szThreadID[32] = &#123;0&#125;;</span><br><span class=\"line\">    DWORD dwThreadID = ::GetCurrentThreadId();</span><br><span class=\"line\">    sprintf_s(szThreadID, ARRAYSIZE(szThreadID), &quot;[ThreadID: %u]&quot;, dwThreadID);</span><br><span class=\"line\">    strDebugInfo += szThreadID;</span><br><span class=\"line\"></span><br><span class=\"line\">    //函数签名</span><br><span class=\"line\">    char szFuncSig[512] = &#123; 0 &#125;;</span><br><span class=\"line\">    sprintf_s(szFuncSig, &quot;[%s:%d]&quot;, pszFunctionSig, nLineNo);</span><br><span class=\"line\">    strDebugInfo += szFuncSig;</span><br><span class=\"line\"></span><br><span class=\"line\">    //log正文</span><br><span class=\"line\">    std::wstring strLogMsg;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    va_start(ap, pszFmt);</span><br><span class=\"line\">    int nLogMsgLength = _vsctprintf(pszFmt, ap);</span><br><span class=\"line\">    //容量必须算上最后一个\\0 </span><br><span class=\"line\">    if ((int)strLogMsg.capacity() &lt; nLogMsgLength + 1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        strLogMsg.resize(nLogMsgLength + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _vstprintf_s((TCHAR*)strLogMsg.data(), strLogMsg.capacity(), pszFmt, ap);</span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\"></span><br><span class=\"line\">    //string内容正确但length不对，恢复一下其length</span><br><span class=\"line\">    std::wstring strMsgFormal;</span><br><span class=\"line\">    strMsgFormal.append(strLogMsg.c_str(), nLogMsgLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    //如果日志开启截断，长日志只取前MAX_LINE_LENGTH个字符</span><br><span class=\"line\">    if (m_bTruncateLongLog)</span><br><span class=\"line\">        strMsgFormal = strMsgFormal.substr(0, MAX_LINE_LENGTH);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::string strLogMsgAscii;</span><br><span class=\"line\">    strLogMsgAscii = EncodeUtil::UnicodeToAnsi(strMsgFormal);</span><br><span class=\"line\"></span><br><span class=\"line\">    strDebugInfo += strLogMsgAscii;</span><br><span class=\"line\">    strDebugInfo += &quot;\\r\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(m_bToFile)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(m_hLogFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        ::SetFilePointer(m_hLogFile, 0, NULL, FILE_END);</span><br><span class=\"line\">        DWORD dwBytesWritten = 0;</span><br><span class=\"line\">        ::WriteFile(m_hLogFile, strDebugInfo.c_str(), strDebugInfo.length(), &amp;dwBytesWritten, NULL);</span><br><span class=\"line\">        ::FlushFileBuffers(m_hLogFile);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ::OutputDebugStringA(strDebugInfo.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // end LOG_OUTPUT</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool CIULog::Log(long nLevel, PCSTR pszFunctionSig, int nLineNo, PCSTR pszFmt, ...)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef LOG_OUTPUT</span><br><span class=\"line\">    if (nLevel &lt; m_nLogLevel)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //时间</span><br><span class=\"line\">    char szTime[64] = &#123; 0 &#125;;</span><br><span class=\"line\">    GetTime(szTime, ARRAYSIZE(szTime));</span><br><span class=\"line\">    std::string strDebugInfo(szTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    //错误级别</span><br><span class=\"line\">    std::string strLevel(&quot;[INFO]&quot;);</span><br><span class=\"line\">    if (nLevel == LOG_LEVEL_WARNING)</span><br><span class=\"line\">        strLevel = &quot;[Warning]&quot;;</span><br><span class=\"line\">    else if (nLevel == LOG_LEVEL_ERROR)</span><br><span class=\"line\">        strLevel = &quot;[Error]&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    strDebugInfo += strLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">    //当前线程信息</span><br><span class=\"line\">    char szThreadID[32] = &#123;0&#125;;</span><br><span class=\"line\">    DWORD dwThreadID = ::GetCurrentThreadId();</span><br><span class=\"line\">    sprintf_s(szThreadID, ARRAYSIZE(szThreadID), &quot;[ThreadID: %u]&quot;, dwThreadID);</span><br><span class=\"line\">    strDebugInfo += szThreadID;</span><br><span class=\"line\"></span><br><span class=\"line\">    //函数签名</span><br><span class=\"line\">    char szFuncSig[512] = &#123; 0 &#125;;</span><br><span class=\"line\">    sprintf_s(szFuncSig, &quot;[%s:%d]&quot;, pszFunctionSig, nLineNo);</span><br><span class=\"line\">    strDebugInfo += szFuncSig;</span><br><span class=\"line\"></span><br><span class=\"line\">    //日志正文</span><br><span class=\"line\">    std::string strLogMsg;</span><br><span class=\"line\">    va_list ap;</span><br><span class=\"line\">    va_start(ap, pszFmt);</span><br><span class=\"line\">    int nLogMsgLength = _vscprintf(pszFmt, ap);</span><br><span class=\"line\">    //容量必须算上最后一个\\0</span><br><span class=\"line\">    if ((int)strLogMsg.capacity() &lt; nLogMsgLength + 1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        strLogMsg.resize(nLogMsgLength + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vsprintf_s((char*)strLogMsg.data(), strLogMsg.capacity(), pszFmt, ap);</span><br><span class=\"line\">    va_end(ap);</span><br><span class=\"line\"></span><br><span class=\"line\">    //string内容正确但length不对，恢复一下其length</span><br><span class=\"line\">    std::string strMsgFormal;</span><br><span class=\"line\">    strMsgFormal.append(strLogMsg.c_str(), nLogMsgLength);</span><br><span class=\"line\"></span><br><span class=\"line\">    //如果日志开启截断，长日志只取前MAX_LINE_LENGTH个字符</span><br><span class=\"line\">    if (m_bTruncateLongLog)</span><br><span class=\"line\">        strMsgFormal = strMsgFormal.substr(0, MAX_LINE_LENGTH);</span><br><span class=\"line\"></span><br><span class=\"line\">    strDebugInfo += strMsgFormal;</span><br><span class=\"line\">    strDebugInfo += &quot;\\r\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(m_bToFile)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(m_hLogFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        ::SetFilePointer(m_hLogFile, 0, NULL, FILE_END);</span><br><span class=\"line\">        DWORD dwBytesWritten = 0;</span><br><span class=\"line\">        ::WriteFile(m_hLogFile, strDebugInfo.c_str(), strDebugInfo.length(), &amp;dwBytesWritten, NULL);</span><br><span class=\"line\">        ::FlushFileBuffers(m_hLogFile);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ::OutputDebugStringA(strDebugInfo.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">#endif // end LOG_OUTPUT</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void CIULog::GetTime(char* pszTime, int nTimeStrLength)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SYSTEMTIME st = &#123;0&#125;;</span><br><span class=\"line\">    ::GetLocalTime(&amp;st);</span><br><span class=\"line\">    sprintf_s(pszTime, nTimeStrLength, &quot;[%04d-%02d-%02d %02d:%02d:%02d:%04d]&quot;, st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, st.wMilliseconds);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中根据日志级别定义了三个宏 <strong>LOG_INFO</strong>、<strong>LOG_WARNING</strong>、<strong>LOG_ERROR</strong>，如果要使用该日志模块，只需要在程序启动处的地方调用 <strong>CIULog::Init</strong> 函数初始化日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYSTEMTIME st = &#123;0&#125;;</span><br><span class=\"line\">::GetLocalTime(&amp;st);</span><br><span class=\"line\">TCHAR szLogFileName[MAX_PATH] = &#123;0&#125;;</span><br><span class=\"line\">_stprintf_s(szLogFileName, MAX_PATH, _T(&quot;%s\\\\Logs\\\\%04d%02d%02d%02d%02d%02d.log&quot;), g_szHomePath, st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);</span><br><span class=\"line\">CIULog::Init(true, false, szLogFileName);</span><br></pre></td></tr></table></figure>\n\n<p>当然，最佳的做法，在程序退出的地方，调用 <strong>CIULog::Uninit</strong> 回收日志模块相关的资源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CIULog::Uninit();</span><br></pre></td></tr></table></figure>\n\n<p>在做好这些准备工作以后，如果你想在程序的某个地方写一条日志，只需要这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//打印一条 INFO 级别的日志</span><br><span class=\"line\">LOG_INFO(&quot;Request logon: Account=%s, Password=*****, Status=%d, LoginType=%d.&quot;, pLoginRequest-&gt;m_szAccountName, pLoginRequest-&gt;m_szPassword, pLoginRequest-&gt;m_nStatus, (long)pLoginRequest-&gt;m_nLoginType);</span><br><span class=\"line\">//打印一条 WARNING 级别的日志</span><br><span class=\"line\">LOG_WARN(&quot;Some warning...&quot;);</span><br><span class=\"line\">//打印一条 ERROR 级别的日志</span><br><span class=\"line\">LOG_ERROR(&quot;Recv data error, errorNO=%d.&quot;, ::WSAGetLastError());</span><br></pre></td></tr></table></figure>\n\n<p>关于 <strong>CIULog</strong> 这个日志模块类，如果读者要想实际运行查看效果，可以从链接（<a href=\"https://github.com/baloonwj/flamingo/tree/master/flamingoclient\">https://github.com/baloonwj/flamingo/tree/master/flamingoclient</a> ）下载完整的项目代码来运行。该日志输出效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2018-11-09 23:52:54:0826][INFO][ThreadID: 7252][bool __thiscall CIUSocket::Login(const char *,const char *,int,int,int,class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &amp;):1107]Request logon: Account=zhangy, Password=*****, Status=76283204, LoginType=1.</span><br><span class=\"line\">[2018-11-09 23:52:56:0352][INFO][ThreadID: 5828][void __thiscall CIUSocket::SendThreadProc(void):794]Recv data thread start...</span><br><span class=\"line\">[2018-11-09 23:52:56:0385][INFO][ThreadID: 6032][void __thiscall CSendMsgThread::HandleUserBasicInfo(const class CUserBasicInfoRequest *):298]Request to get userinfo.</span><br><span class=\"line\">[2018-11-09 23:52:56:0355][INFO][ThreadID: 7140][void __thiscall CIUSocket::RecvThreadProc(void):842]Recv data thread start...</span><br><span class=\"line\">[2018-11-09 23:52:57:0254][INFO][ThreadID: 7220][int __thiscall CRecvMsgThread::HandleFriendListInfo(const class std::basic_string&lt;char,struct std::char_traits&lt;char&gt;,class std::allocator&lt;char&gt; &gt; &amp;):593]Recv user basic info, info count=1.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多线程同步写日志出现的问题一\"><a href=\"#多线程同步写日志出现的问题一\" class=\"headerlink\" title=\"多线程同步写日志出现的问题一\"></a>多线程同步写日志出现的问题一</h5><p>从上面的日志输出来看，这种同步的日志输出方式，也存在时间顺序不正确的问题（时间戳大的日志比时间戳小的日志靠前）。这是由于多线程同时写日志到同一个文件时，产生日志的时间和实际写入磁盘的时间不是一个原子操作。下图解释了该现象出现的根源：</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/log1.png\"></p>\n<p>多线程写同一个日志文件出现先产生的日志后写入到文件中的现象</p>\n<p>好在这种时间顺序不正确只会出现在不同线程之间，对于同一个线程的不同时间的日志记录顺序肯定是正确的。所以这种日期错乱现象，并不影响我们使用日志。</p>\n<h5 id=\"多线程同步写日志出现的问题二\"><a href=\"#多线程同步写日志出现的问题二\" class=\"headerlink\" title=\"多线程同步写日志出现的问题二\"></a>多线程同步写日志出现的问题二</h5><p>多线程同时写入同一个日志文件还有一个问题，就是假设线程 A 写某一个时刻追加日志内容为 “AAAAA” ，线程 B 在同一时刻追加日志内容为 “BBBBB” ，线程 C 在同一时刻追加日志内容为 “CCCCC” ，那么最终的日志文件中的内容会不会出现 “AABBCCABCAACCBB” 这种格式？</p>\n<p>在类 Unix 系统上（包括 Linux），同一个进程内针对同一个 <strong>FILE</strong>* 的操作是线程安全的，也就是说，在这类操作系统上得到的日志结果 A、B、C 各个字母组一定是连续在一起，也就是说最终得到的日志内容可能是 “<strong>AAAAACCCCCBBBBB</strong>” 或 “<strong>AAAAABBBBBCCCCC</strong>” 等这种连续的格式，绝不会出现 A、B、C 字母交错相间的现象。</p>\n<p>而在Windows系统上，对于 <strong>FILE</strong>* 的操作并不是线程安全的。但是笔者做了大量实验，在 Windows 系统上也没有出现这种 A、B、C 字母相间的现象。（关于这个问题的讨论，可以参考这里：<a href=\"https://www.zhihu.com/question/40472431\">https://www.zhihu.com/question/40472431</a> ）</p>\n<p>这种同步日志的实现方式，一般用于低频写日志的软件系统中（如客户端软件），所以我可以认为这种多线程同时写日志到一个文件中是可行的。</p>\n<h4 id=\"异步写日志\"><a href=\"#异步写日志\" class=\"headerlink\" title=\"异步写日志\"></a>异步写日志</h4><p>当然，对于性能要求不高的应用（如大多数客户端程序、某些并发数量不高的服务）来说，这种同步写日志的实现方式是可以满足要求的。但是对于 QPS 要求很高或者对性能有一定要求的服务器程序，同步写日志等待磁盘 IO 的完成对于服务的关键性逻辑的快速执行和及时响应性会造成一定的性能损失。为了减小这种损失，我们可以采用异步日志。</p>\n<p>所谓异步写日志，与同步写日志相反，即产生日志的地方，不会将日志实时写入到文件中去，而是通过一些线程同步技术将日志先暂存下来，然后再通过一个或多个专门的日志写入线程去将这些缓存的日志写入到磁盘中去，这样的话，原来输出日志的线程就不存在等待写日志到磁盘这样的效率损耗了。这本质上，其实就是一个生产者和消费者，产生日志的线程是生产者，将日志写入文件的线程是消费者。当然，对于日志的消费者线程，我这里提到“<strong>一个</strong>”或“<strong>多个</strong>”日志线程，在实际开发中，如果多个日志消费线程，我们又要考虑多个线程可能会造成写日志的时间顺序错位（时间较晚的日志写在时间较早的日志前面），这在上文中已经讨论过，这里不再赘述。</p>\n<p>总结起来，为了方便读者理解和编码，我们可以认为异步写日志的逻辑一般存在一组专门写日志的线程（一个或多个），程序的其他线程为这些日志线程生产日志。</p>\n<p>至于其他线程如何将产生的日志交给日志线程，这就是多线程之间资源同步的问题了。我们可以使用一个队列来存储其他线程产生的日志，日志线程从该队列中取出日志，然后将日志内容写入文件。最简单的方式是日志生产线程将每次产生的日志信息放入一个队列时、日志写入线程从队列中取出日志时，都使用一个**互斥体( mutex )**保护起来。代码示例如下（C++11 代码）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc: AsyncLogger.cpp</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date: 2018.11.10</span><br><span class=\"line\"> */</span><br><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;thread&gt;</span><br><span class=\"line\">#include &lt;mutex&gt;</span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//保护队列的互斥体</span><br><span class=\"line\">std::mutex log_mutex;</span><br><span class=\"line\">std::list&lt;std::string&gt; cached_logs;</span><br><span class=\"line\">FILE* log_file = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">bool init_log_file()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //以追加内容的形式写入文件内容，如果文件不存在，则创建</span><br><span class=\"line\">    log_file = fopen(&quot;my.log&quot;, &quot;a+&quot;);</span><br><span class=\"line\">    return log_file != NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void uninit_log_file()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (log_file != NULL)</span><br><span class=\"line\">        fclose(log_file);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool write_log_tofile(const std::string&amp; line)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (log_file == NULL)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (fwrite((void*)line.c_str(), 1, line.length(), log_file) != line.length())</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将日志立即冲刷到文件中去</span><br><span class=\"line\">    fflush(log_file);</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void log_producer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++ index;</span><br><span class=\"line\">        std::ostringstream os;</span><br><span class=\"line\">        os &lt;&lt; &quot;This is log, index: &quot; &lt;&lt; index &lt;&lt; &quot;, producer threadID: &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\">        //使用花括号括起来为的是减小锁的粒度</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::lock_guard&lt;std::mutex&gt; lock(log_mutex);</span><br><span class=\"line\">            cached_logs.emplace_back(os.str());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::chrono::milliseconds duration(100);</span><br><span class=\"line\">        std::this_thread::sleep_for(duration);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void log_consumer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::string line;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //使用花括号括起来为的是减小锁的粒度</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::lock_guard&lt;std::mutex&gt; lock(log_mutex);</span><br><span class=\"line\">            if (!cached_logs.empty())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                line = cached_logs.front();</span><br><span class=\"line\">                cached_logs.pop_front();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (line.empty())</span><br><span class=\"line\">        &#123;        </span><br><span class=\"line\">            std::chrono::milliseconds duration(1000);</span><br><span class=\"line\">            std::this_thread::sleep_for(duration);</span><br><span class=\"line\"></span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        write_log_tofile(line);</span><br><span class=\"line\"></span><br><span class=\"line\">        line.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!init_log_file())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;init log file error.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::thread log_producer1(log_producer);</span><br><span class=\"line\">    std::thread log_producer2(log_producer);</span><br><span class=\"line\">    std::thread log_producer3(log_producer);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::thread log_consumer1(log_consumer);</span><br><span class=\"line\">    std::thread log_consumer2(log_consumer);</span><br><span class=\"line\">    std::thread log_consumer3(log_consumer);</span><br><span class=\"line\"></span><br><span class=\"line\">    log_producer1.join();</span><br><span class=\"line\">    log_producer2.join();</span><br><span class=\"line\">    log_producer3.join();</span><br><span class=\"line\"></span><br><span class=\"line\">    log_consumer1.join();</span><br><span class=\"line\">    log_consumer2.join();</span><br><span class=\"line\">    log_consumer3.join();</span><br><span class=\"line\"></span><br><span class=\"line\">    uninit_log_file();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码分别模拟了三个生产日志的线程（<strong>log_producer1～3</strong>）和三个消费日志线程（<strong>log_consumer1～3</strong>）。当然上述代码可以继续优化，如果当前缓存队列中没有日志记录，那么消费日志线程会做无用功。</p>\n<h5 id=\"优化方法一\"><a href=\"#优化方法一\" class=\"headerlink\" title=\"优化方法一\"></a>优化方法一</h5><p>可以使用条件变量，如果当前队列中没有日志记录，则将日志消费线程挂起；当生产日志的线程产生了新的日志后，<strong>置信（signal）</strong>条件变量，这样日志消费线程会被唤醒，以将日志从队列中取出来并写入文件。我们来看下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc: AsyncLoggerLinux.cpp</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date: 2018.11.10</span><br><span class=\"line\"> */</span><br><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;thread&gt;</span><br><span class=\"line\">#include &lt;mutex&gt;</span><br><span class=\"line\">#include &lt;condition_variable&gt;</span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">std::mutex log_mutex;</span><br><span class=\"line\">std::condition_variable log_cv;</span><br><span class=\"line\">std::list&lt;std::string&gt; cached_logs;</span><br><span class=\"line\">FILE* log_file = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">bool init_log_file()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //以追加内容的形式写入文件内容，如果文件不存在，则创建</span><br><span class=\"line\">    log_file = fopen(&quot;my.log&quot;, &quot;a+&quot;);</span><br><span class=\"line\">    return log_file != NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void uninit_log_file()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (log_file != NULL)</span><br><span class=\"line\">        fclose(log_file);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool write_log_tofile(const std::string&amp; line)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (log_file == NULL)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (fwrite((void*)line.c_str(), 1, line.length(), log_file) != line.length())</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将日志立即冲刷到文件中去</span><br><span class=\"line\">    fflush(log_file);</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void log_producer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++ index;</span><br><span class=\"line\">        std::ostringstream os;</span><br><span class=\"line\">        os &lt;&lt; &quot;This is log, index: &quot; &lt;&lt; index &lt;&lt; &quot;, producer threadID: &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\">        //使用花括号括起来为的是减小锁的粒度</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::lock_guard&lt;std::mutex&gt; lock(log_mutex);</span><br><span class=\"line\">            cached_logs.emplace_back(os.str());</span><br><span class=\"line\">            log_cv.notify_one();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::chrono::milliseconds duration(100);</span><br><span class=\"line\">        std::this_thread::sleep_for(duration);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void log_consumer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::string line;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //使用花括号括起来为的是减小锁的粒度</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::unique_lock&lt;std::mutex&gt; lock(log_mutex);</span><br><span class=\"line\">            if (cached_logs.empty())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //无限等待</span><br><span class=\"line\">                log_cv.wait(lock);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            line = cached_logs.front();</span><br><span class=\"line\">            cached_logs.pop_front();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (line.empty())</span><br><span class=\"line\">        &#123;        </span><br><span class=\"line\">            std::chrono::milliseconds duration(1000);</span><br><span class=\"line\">            std::this_thread::sleep_for(duration);</span><br><span class=\"line\"></span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        write_log_tofile(line);</span><br><span class=\"line\"></span><br><span class=\"line\">        line.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!init_log_file())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;init log file error.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::thread log_producer1(log_producer);</span><br><span class=\"line\">    std::thread log_producer2(log_producer);</span><br><span class=\"line\">    std::thread log_producer3(log_producer);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::thread log_consumer1(log_consumer);</span><br><span class=\"line\">    std::thread log_consumer2(log_consumer);</span><br><span class=\"line\">    std::thread log_consumer3(log_consumer);</span><br><span class=\"line\"></span><br><span class=\"line\">    log_producer1.join();</span><br><span class=\"line\">    log_producer2.join();</span><br><span class=\"line\">    log_producer3.join();</span><br><span class=\"line\"></span><br><span class=\"line\">    log_consumer1.join();</span><br><span class=\"line\">    log_consumer2.join();</span><br><span class=\"line\">    log_consumer3.join();</span><br><span class=\"line\"></span><br><span class=\"line\">    uninit_log_file();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化方法二\"><a href=\"#优化方法二\" class=\"headerlink\" title=\"优化方法二\"></a>优化方法二</h5><p>除了条件变量以外，我们还可以使用信号量来设计我们的异步日志系统，信号量是带有资源计数的线程同步对象，当每产生一条日志时，我们将信号量资源计数自增1，日志消费线程默认是等待这个信号量是否受信，如果受信，每唤醒一个日志消费线程，信号量字数计数将自动减1。通俗地说就是生成者每生产一个资源，就将资源计数加1，而消费者每消费一个资源数量，就将资源计数减一；如果当前资源计数已经为0，则消费者将自动挂起。</p>\n<p>由于 C++ 11 没有提供对不同平台的信号量对象的封装，我们这里分别给出 Windows 和 Linux 两个平台的实现代码，读者可以根据需要来学习其中一个或两个同时学习。注意，为了保持代码风格一致，对于线程和读写文件相关函数，在不同的操作系统平台，我们使用该系统平台相关的 API 接口，而不再使用 C++ 11 的相关函数和类库。</p>\n<p><strong>Windows 平台代码</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc: AsyncLogger.cpp，Windows版本</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date: 2018.11.10</span><br><span class=\"line\"> */</span><br><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">std::list&lt;std::string&gt; cached_logs;</span><br><span class=\"line\">CRITICAL_SECTION g_cs;</span><br><span class=\"line\">HANDLE g_hSemaphore = NULL;</span><br><span class=\"line\">HANDLE g_hLogFile = INVALID_HANDLE_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">bool Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    InitializeCriticalSection(&amp;g_cs);</span><br><span class=\"line\"></span><br><span class=\"line\">    //假设资源数量上限是0xFFFFFFFF</span><br><span class=\"line\">    g_hSemaphore = CreateSemaphore(NULL, 0, 0xFFFFFFFF, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    //如果文件不存在，则创建</span><br><span class=\"line\">    g_hLogFile = CreateFile(_T(&quot;my.log&quot;), GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);</span><br><span class=\"line\">    if (g_hLogFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void Uninit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DeleteCriticalSection(&amp;g_cs);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (g_hSemaphore != NULL)</span><br><span class=\"line\">        CloseHandle(g_hSemaphore);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (g_hLogFile != INVALID_HANDLE_VALUE)</span><br><span class=\"line\">        CloseHandle(g_hLogFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool WriteLogToFile(const std::string&amp; line)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (g_hLogFile == INVALID_HANDLE_VALUE)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD dwBytesWritten;</span><br><span class=\"line\">    //如果对于比较长的日志，应该分段写入，因为单次写入可能只能写入部分，这里为了演示方便，逻辑从简</span><br><span class=\"line\">    if (!WriteFile(g_hLogFile, line.c_str(), line.length(), &amp;dwBytesWritten, NULL) || dwBytesWritten != line.length())</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将日志立即冲刷到文件中去</span><br><span class=\"line\">    FlushFileBuffers(g_hLogFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD CALLBACK LogProduceThreadProc(LPVOID lpThreadParameter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++ index;</span><br><span class=\"line\">        std::ostringstream os;</span><br><span class=\"line\">        os &lt;&lt; &quot;This is log, index: &quot; &lt;&lt; index &lt;&lt; &quot;, producer threadID: &quot; &lt;&lt; GetCurrentThreadId() &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        EnterCriticalSection(&amp;g_cs);       </span><br><span class=\"line\">        cached_logs.emplace_back(os.str());</span><br><span class=\"line\">        LeaveCriticalSection(&amp;g_cs);</span><br><span class=\"line\"></span><br><span class=\"line\">        ReleaseSemaphore(g_hSemaphore, 1, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">        Sleep(100);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD CALLBACK LogConsumeThreadProc(LPVOID lpThreadParameter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::string line;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;     </span><br><span class=\"line\">        //无限等待</span><br><span class=\"line\">        WaitForSingleObject(g_hSemaphore, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">        EnterCriticalSection(&amp;g_cs);</span><br><span class=\"line\">        if (!cached_logs.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            line = cached_logs.front();</span><br><span class=\"line\">            cached_logs.pop_front();</span><br><span class=\"line\">        &#125;     </span><br><span class=\"line\">        LeaveCriticalSection(&amp;g_cs);          </span><br><span class=\"line\"></span><br><span class=\"line\">        if (line.empty())</span><br><span class=\"line\">        &#123;        </span><br><span class=\"line\">            Sleep(1000);</span><br><span class=\"line\"></span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        WriteLogToFile(line);</span><br><span class=\"line\"></span><br><span class=\"line\">        line.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!Init())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;init log file error.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE hProducers[3];</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(hProducers) / sizeof(hProducers[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        hProducers[i] = CreateThread(NULL, 0, LogProduceThreadProc, NULL, 0, NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE hConsumers[3];</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(hConsumers) / sizeof(hConsumers[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        hConsumers[i] = CreateThread(NULL, 0, LogConsumeThreadProc, NULL, 0, NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //等待消费者线程退出</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(hProducers) / sizeof(hProducers[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WaitForSingleObject(hProducers[i], INFINITE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //等待生产者线程退出</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(hConsumers) / sizeof(hConsumers[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WaitForSingleObject(hConsumers[i], INFINITE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Uninit();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码，在多线程向队列中增加日志记录和从队列中取出日志记录使用了Windows的上的<strong>临界区（CRITICAL_SECTION，有的书上译作“关键段”）</strong>对象来对队列进行保护。</p>\n<p><strong>Linux 平台代码</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc: AsyncLogger.cpp，linux版本</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date: 2018.11.10</span><br><span class=\"line\"> */</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;pthread.h&gt;</span><br><span class=\"line\">#include &lt;semaphore.h&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">std::list&lt;std::string&gt; cached_logs;</span><br><span class=\"line\">pthread_mutex_t log_mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\">sem_t           log_semphore;</span><br><span class=\"line\">FILE* plogfile = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">bool init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pthread_mutex_init(&amp;log_mutex, NULL);</span><br><span class=\"line\">    //初始信号量资源数目是0</span><br><span class=\"line\">    sem_init(&amp;log_semphore, 0, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    //如果文件不存在，则创建</span><br><span class=\"line\">    plogfile = fopen(&quot;my.log&quot;, &quot;a++&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return plogfile != NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void uninit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pthread_mutex_destroy(&amp;log_mutex);</span><br><span class=\"line\">    sem_destroy(&amp;log_semphore);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (plogfile != NULL)</span><br><span class=\"line\">        fclose(plogfile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bool write_log_to_file(const std::string&amp; line)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (plogfile == NULL)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //如果对于比较长的日志，应该分段写入，因为单次写入可能只能写入部分，这里为了演示方便，逻辑从简</span><br><span class=\"line\">    if (fwrite((void*)line.c_str(), 1, line.length(), plogfile) != line.length())</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"></span><br><span class=\"line\">    //将日志立即冲刷到文件中去</span><br><span class=\"line\">    fflush(plogfile);</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void* producer_thread_proc(void* arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index = 0;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++ index;</span><br><span class=\"line\">        std::ostringstream os;</span><br><span class=\"line\">        os &lt;&lt; &quot;This is log, index: &quot; &lt;&lt; index &lt;&lt; &quot;, producer threadID: &quot; &lt;&lt; pthread_self() &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        pthread_mutex_lock(&amp;log_mutex);</span><br><span class=\"line\">        cached_logs.push_back(os.str());</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;log_mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">        sem_post(&amp;log_semphore);</span><br><span class=\"line\"></span><br><span class=\"line\">        usleep(100000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void* consumer_thread_proc(void* arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::string line;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;     </span><br><span class=\"line\">        //无限等待</span><br><span class=\"line\">        sem_wait(&amp;log_semphore);</span><br><span class=\"line\"></span><br><span class=\"line\">        pthread_mutex_lock(&amp;log_mutex);</span><br><span class=\"line\">        if (!cached_logs.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            line = cached_logs.front();</span><br><span class=\"line\">            cached_logs.pop_front();</span><br><span class=\"line\">        &#125;     </span><br><span class=\"line\">        pthread_mutex_unlock(&amp;log_mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (line.empty())</span><br><span class=\"line\">        &#123;        </span><br><span class=\"line\">            sleep(1);</span><br><span class=\"line\"></span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        write_log_to_file(line);</span><br><span class=\"line\"></span><br><span class=\"line\">        line.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!init())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;init log file error.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_t producer_thread_id[3];</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(producer_thread_id) / sizeof(producer_thread_id[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_create(&amp;producer_thread_id[i], NULL, producer_thread_proc, NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pthread_t consumer_thread_id[3];</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(consumer_thread_id) / sizeof(consumer_thread_id[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_create(&amp;consumer_thread_id[i], NULL, consumer_thread_proc, NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //等待消费者线程退出</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(producer_thread_id) / sizeof(producer_thread_id[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_join(producer_thread_id[i], NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //等待生产者线程退出</span><br><span class=\"line\">    for (int i = 0; i &lt; sizeof(consumer_thread_id) / sizeof(consumer_thread_id[0]); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pthread_join(consumer_thread_id[i], NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    uninit();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们使用 g++ 编译器编译上述代码，使用如下命令生成可移植性文件 <strong>AsyncLoggerLinux</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -g -o AsyncLoggerLinux AsyncLoggerLinux.cpp -lpthread</span><br></pre></td></tr></table></figure>\n\n<p>接着执行生成的 <strong>AsyncLoggerLinux</strong> 文件，然后生成的日志效果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is log, index: 1, producer threadID: 140512358795008</span><br><span class=\"line\">This is log, index: 1, producer threadID: 140512367187712</span><br><span class=\"line\">This is log, index: 1, producer threadID: 140512375580416</span><br><span class=\"line\">This is log, index: 2, producer threadID: 140512358795008</span><br><span class=\"line\">This is log, index: 2, producer threadID: 140512367187712</span><br><span class=\"line\">This is log, index: 2, producer threadID: 140512375580416</span><br><span class=\"line\">This is log, index: 3, producer threadID: 140512358795008</span><br><span class=\"line\">This is log, index: 3, producer threadID: 140512367187712</span><br><span class=\"line\">This is log, index: 3, producer threadID: 140512375580416</span><br><span class=\"line\">This is log, index: 4, producer threadID: 140512358795008</span><br><span class=\"line\">This is log, index: 4, producer threadID: 140512367187712</span><br><span class=\"line\">This is log, index: 4, producer threadID: 140512375580416</span><br><span class=\"line\">This is log, index: 5, producer threadID: 140512358795008</span><br><span class=\"line\">This is log, index: 5, producer threadID: 140512367187712</span><br><span class=\"line\">This is log, index: 5, producer threadID: 140512375580416</span><br><span class=\"line\">//省略...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当然，您可能需要同时能在 Windows 和 Linux 同时运行的代码，我们自然而然想到用 C++11 语法的信号量，由于 C++ 11 本身没有提供现成的信号量库，我们可以自己利用<strong>std::mutex</strong>、<strong>std::condition_variable</strong>模拟一下信号量的功能，这里就不再详细介绍了，有兴趣的可以自行尝试一下。</p>\n</blockquote>\n<p>以上就是异步日志的基本原理，在这个原理的基础上，我们可以增加很多的特性。</p>\n","text":"日志系统的设计为什么需要日志实际的软件项目产出都有一个流程，即先开发、测试，再发布生产，由于人的因素，既然是软件产品就不可能百分百没有 bug 或者逻辑错误，对...","permalink":"/post/转载/高性能服务器框架设计/日志系统的设计","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">日志系统的设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">为什么需要日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">日志系统的技术上的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8C%E6%AD%A5%E5%86%99%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">同步写日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%86%99%E6%97%A5%E5%BF%97%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%80\"><span class=\"toc-text\">多线程同步写日志出现的问题一</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%86%99%E6%97%A5%E5%BF%97%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BA%8C\"><span class=\"toc-text\">多线程同步写日志出现的问题二</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E5%86%99%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">异步写日志</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E4%B8%80\"><span class=\"toc-text\">优化方法一</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E4%BA%8C\"><span class=\"toc-text\">优化方法二</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】心跳包机制设计详解","uid":"dadb03aa4cb6e4085adc0ea3361dcdbd","slug":"转载/高性能服务器框架设计/心跳包机制设计详解","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.405Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/心跳包机制设计详解.json","keywords":null,"cover":null,"text":"心跳包机制设计详解存在下面两种情形： 情形一：一个客户端连接服务器以后，如果长期没有和服务器有数据来往，可能会被防火墙程序关闭连接，有时候我们并不想要被关闭连接...","permalink":"/post/转载/高性能服务器框架设计/心跳包机制设计详解","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】错误码系统的设计","uid":"244b4809351f4fc8c6cac7d22fa4014d","slug":"转载/高性能服务器框架设计/错误码系统的设计","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.887Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/错误码系统的设计.json","keywords":null,"cover":[],"text":"错误码系统的设计 本文介绍服务器开发中一组服务中错误码系统的设计理念与实践，如果读者从来没想过或者没接触过这种设计理念，建议认真体会一下这种设计思路的优点。 错...","permalink":"/post/转载/高性能服务器框架设计/错误码系统的设计","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}