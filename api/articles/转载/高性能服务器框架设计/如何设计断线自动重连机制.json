{"title":"【转载】如何设计断线自动重连机制","uid":"f6cf431fde3fe424d56db6051dddeb05","slug":"转载/高性能服务器框架设计/如何设计断线自动重连机制","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.404Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/如何设计断线自动重连机制.json","keywords":null,"cover":[],"content":"<h2 id=\"如何设计断线自动重连机制\"><a href=\"#如何设计断线自动重连机制\" class=\"headerlink\" title=\"如何设计断线自动重连机制\"></a>如何设计断线自动重连机制</h2><p>在有连接依赖关系的服务与服务之间，或客户端与服务器之间，无论是出于方便使用、降低运维成本、提高工作效率（服务与服务之间），还是优化用户体验（客户端与服务器之间）自动重连机制通常都是一个非常重要的功能。</p>\n<ul>\n<li>情景一</li>\n</ul>\n<p>对于一组服务之间，如果其中一些服务（主动连接方，下文以 A 代称）需要与另外一些服务（被连接方，下文以 B 代称）建立 TCP 长连接，如果 A 没有自动连接 B 的功能，那么在部署或者测试这些服务的时候，必须先启动 B，再启动 A，因为一旦先启动 A，A 此时去尝试连接 B（由于 B 还没有启动）会失败，之后 A 再也不会去连接 B了（即使随后 B 被启动了），从而导致整个系统不能正常工作。这是缺点一。</p>\n<ul>\n<li>情景二</li>\n</ul>\n<p>即使部署或测试的时候，先启动了 B，再启动 A，A 与 B 之间的连接在运行期间内，可能由于网络波动等原因导致 A 与 B 之间连接断开，之后整个系统也不能再正常工作了。这是缺点二。</p>\n<ul>\n<li>情景三</li>\n</ul>\n<p>如果我们想升级 B，更新完程序后，重启 B，也必须重启 A。如果这种依赖链比较长（例如 A 连接 B，B 连接 C，C 连接 D，D 连接 E，等等），那么更新某个程序的效率和成本会非常高。这是缺点三。</p>\n<ul>\n<li>情景四</li>\n</ul>\n<p>对于客户端软件来说，如果因为用户的网络短暂故障导致客户端与服务器失去连接，等网络恢复后，较好的用户体验是客户端能检测到用户网络变化后，自动与服务器重连，以便用户能及时收到最新的消息。</p>\n<p>以上四个情景说明了断线自动重连功能的重要性，那如何去设计好的断线重连机制呢？</p>\n<p>重连本身的功能开发很简单，其实就是调用 socket 函数 connect 函数，不断去“<strong>重试</strong>”。这里的“<strong>重试</strong>”我使用了双引号，是为了说明重试的技巧非常有讲究：</p>\n<ul>\n<li>对于服务器端程序，例如 A 连接 B，如果连接不上，整个系统将无法工作，那么我们开发 A 服务时，重连的逻辑可以很简单，即 A 一旦发现与 B 断开了连接，就立即尝试与 B 重新连接，如果连接不上，隔一段时间再重试（一般设置为 3 秒或 5 秒即可），一直到连接成功为止。当然，期间可以不断发送报警邮件或者持续输出错误日志，来引起开发或者运维人员的尽快干预，以便尽早排查和解决连接不上的原因。</li>\n<li>对于客户端软件，以上做法也是可以的，但是不是最优的。客户端所处的网络环境比服务器程序所处的网络环境一般要恶劣的多，等间隔的定时去重连，一般作用不大（例如用户拔掉了网线）。因此，对于客户端软件，一般出现断线，会尝试去重连，如果连接不上，会隔个比前一次时间更长的时间间隔去重连，例如这个时间间隔可以是 2 秒、4 秒、8 秒、16秒等等。但是，这样也存在一个问题，随着重连次数的变多，重连的时间间隔会越来越大（当然，你也可以设置一个最大重连时间间隔，之后恢复到之前较小的时间间隔）。如果网络此时已经恢复（例如用户重新插上网线），我们的程序需要等待一个很长的时间间隔（如 16 秒）才能恢复连接，这同样不利于用户体验。一般情况下，如果网络发生波动，我们的程序可以检测网络状态，如果网络状态恢复正常此时应该立即进行一次重连，而不是一成不变地按照设置的时间间隔去重连。</li>\n</ul>\n<blockquote>\n<p>操作系统提供了检测网络状态变化的 API 函数，例如对于 Windows 可以使用 IsNetworkAlive() 函数去检测，对于 Android，网络变化时会发送消息类型是 WifiManager.NETWORK_STATE_CHANGED_ACTION 的广播通知。</p>\n</blockquote>\n<p>另外，还需要注意的是，如果客户端网络断开，一般会在界面某个地方显式地告诉用户当前连接状态，并提醒当前正在进行断线重连，且应该有一个可以让用户放弃断线重连或者立即进行一次断线重连的功能。</p>\n<p>综上所述，总结起来，对于服务器程序之间的重连可以设计成等时间间隔的定时重连，对于客户端程序要结合依次放大重连时间间隔、网络状态变化立即重连或用户主动发起重连这三个因素来设计。</p>\n<h4 id=\"不需要重连的情形\"><a href=\"#不需要重连的情形\" class=\"headerlink\" title=\"不需要重连的情形\"></a>不需要重连的情形</h4><p>不需要重连一般有以下情形：</p>\n<ul>\n<li><p>用户使用客户端主动放弃重连；</p>\n</li>\n<li><p>因为一些业务上的规定，禁止客户端重连；</p>\n<p>举个例子，如果某个系统同一时刻同一个账户只允许登陆一个，某个账户在机器 A 上登陆，此时接着又在机器 B 上登陆，此时 A 将被服务器踢下线，那么此时 A 客户端的逻辑就应该禁止自动重连。</p>\n</li>\n</ul>\n<h4 id=\"技术上的断线重连和业务上的断线重连\"><a href=\"#技术上的断线重连和业务上的断线重连\" class=\"headerlink\" title=\"技术上的断线重连和业务上的断线重连\"></a>技术上的断线重连和业务上的断线重连</h4><p>这里说的技术上的重连，指的是调用 connect 函数连接，在实际开发中，大多数系统光有技术上的重连成功（即 connect 连接成功）是没有任何意义的，网络连接成功以后，接下来还得再次向服务器发送账号验证信息等等（如登陆数据包），只有这些数据验签成功后，才能算是真正的重连成功，这里说的发送账号验证信息并验签成功就是业务上的重连成功。复杂的系统可能会需要连续好几道验签流程。因此，我们在设计断线重连机制的时候，不仅要考虑技术上的重连，还要考虑业务上的重连。只有完整地包含这两个流程，才算是较优的断线自动重连功能。</p>\n<p>本节介绍的知识点主要是思路性的内容，一旦搞清楚了思路，技术上实现起来并不会存在什么困难，因此本节没有给出具体的代码示例。</p>\n<p>欢迎关注公众号『easyserverdev』，本公众号推崇基础学习与原理理解，不谈大而空的架构与技术术语，分享接地气的服务器开发实战技巧与项目经验，实实在在分享可用于实际编码的编程知识。同时，您也可以加入我的 QQ 群578019391。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/TufFCFqd0g3oHvEeRbexpMHScvgbX64bxHD1jetjyVEESJp1E29nuiclygz4o10lpbCMujK6GaG7ot86ugWibBqw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>文章已于2019-08-12修改</p>\n","text":"如何设计断线自动重连机制在有连接依赖关系的服务与服务之间，或客户端与服务器之间，无论是出于方便使用、降低运维成本、提高工作效率（服务与服务之间），还是优化用户体...","permalink":"/post/转载/高性能服务器框架设计/如何设计断线自动重连机制","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%96%AD%E7%BA%BF%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">如何设计断线自动重连机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E9%9C%80%E8%A6%81%E9%87%8D%E8%BF%9E%E7%9A%84%E6%83%85%E5%BD%A2\"><span class=\"toc-text\">不需要重连的情形</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E%E5%92%8C%E4%B8%9A%E5%8A%A1%E4%B8%8A%E7%9A%84%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E\"><span class=\"toc-text\">技术上的断线重连和业务上的断线重连</span></a></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】主线程与工作线程的分工","uid":"429b34147de6862baa596a57a6482f88","slug":"转载/高性能服务器框架设计/主线程与工作线程的分工","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.403Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/主线程与工作线程的分工.json","keywords":null,"cover":null,"text":"主线程与工作线程的分工服务器端为了能流畅处理多个客户端链接，一般在某个线程A里面accept新的客户端连接并生成新连接的socket fd，然后将这些新连接的s...","permalink":"/post/转载/高性能服务器框架设计/主线程与工作线程的分工","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】实例：一个服务器程序的架构介绍","uid":"109d28235b9c7b6892c4c14f9b41b157","slug":"转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.405Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍.json","keywords":null,"cover":null,"text":"实例：一个服务器程序的架构介绍本文将介绍我曾经做过的一个项目的服务器架构和服务器编程的一些重要细节。 一、程序运行环境操作系统：Centos 7.0 编译器：g...","permalink":"/post/转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}