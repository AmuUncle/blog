{"title":"【转载】实例：一个服务器程序的架构介绍","uid":"109d28235b9c7b6892c4c14f9b41b157","slug":"转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.405Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍.json","keywords":null,"cover":null,"content":"<h2 id=\"实例：一个服务器程序的架构介绍\"><a href=\"#实例：一个服务器程序的架构介绍\" class=\"headerlink\" title=\"实例：一个服务器程序的架构介绍\"></a>实例：一个服务器程序的架构介绍</h2><p>本文将介绍我曾经做过的一个项目的服务器架构和服务器编程的一些重要细节。</p>\n<h4 id=\"一、程序运行环境\"><a href=\"#一、程序运行环境\" class=\"headerlink\" title=\"一、程序运行环境\"></a>一、程序运行环境</h4><p>操作系统：<strong>Centos 7.0</strong></p>\n<p>编译器：<strong>gcc&#x2F;g++ 4.8.3</strong>、<strong>cmake 2.8.11</strong></p>\n<p>mysql数据库：<strong>5.5.47</strong></p>\n<p>项目代码管理工具：<strong>Visual Studio 2013</strong></p>\n<h4 id=\"一、程序结构\"><a href=\"#一、程序结构\" class=\"headerlink\" title=\"一、程序结构\"></a>一、程序结构</h4><p>该程序总共有 <strong>17</strong> 个线程，其中分为 <strong>9</strong> 个数据库工作线程 D 和一个日志线程 L，<strong>6</strong> 个普通工作线程 W，一个主线程 M。（以下会用这些字母来代指这些线程）</p>\n<h5 id=\"（一）、数据库工作线程的用途\"><a href=\"#（一）、数据库工作线程的用途\" class=\"headerlink\" title=\"（一）、数据库工作线程的用途\"></a>（一）、数据库工作线程的用途</h5><p><strong>9</strong> 个数据库工作线程在线程启动之初，与 mysql 建立连接，也就是说每个线程都与 mysql 保持一路连接，共 <strong>9</strong> 个数据库连接。</p>\n<p>每个数据库工作线程同时存在两个任务队列，第一个队列 A 存放需要执行数据库增删查改操作的任务 <strong>sqlTask</strong>，第二个队列 B 存放 <strong>sqlTask</strong> 执行完成后的结果。<strong>sqlTask</strong> 执行完成后立即放入结果队列中，因而结果队列中任务也是一个个的需要执行的任务。大致伪代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void db_thread_func()  &#123;  </span><br><span class=\"line\">    while (!m_bExit)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        if (NULL != (pTask = m_sqlTask.Pop()))  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            //从m_sqlTask中取出的任务先执行完成后，pTask将携带结果数据  </span><br><span class=\"line\">            pTask-&gt;Execute();              </span><br><span class=\"line\">            //得到结果后，立刻将该任务放入结果任务队列  </span><br><span class=\"line\">            m_resultTask.Push(pTask);  </span><br><span class=\"line\">            continue;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">        sleep(1000);  </span><br><span class=\"line\">    &#125;//end while-loop </span><br><span class=\"line\"> &#125;  </span><br></pre></td></tr></table></figure>\n\n<p>现在的问题来了：</p>\n<ol>\n<li>任务队列 A 中的任务从何而来，目前只有消费者，没有生产者，那么生产者是谁？</li>\n<li>任务队列 B 中的任务将去何方，目前只有生产者没有消费者。</li>\n</ol>\n<p>这两个问题先放一会儿，等到后面我再来回答。</p>\n<h5 id=\"（二）工作线程和主线程\"><a href=\"#（二）工作线程和主线程\" class=\"headerlink\" title=\"（二）工作线程和主线程\"></a>（二）工作线程和主线程</h5><p>在介绍主线程和工作线程具体做什么时，我们介绍下服务器编程中常常抽象出来的几个概念（这里以 tcp 连接为例）：</p>\n<ol>\n<li><strong>TcpServer</strong> 即 Tcp 服务，服务器需要绑定ip地址和端口号，并在该端口号上侦听客户端的连接（往往由一个成员变量 <strong>TcpListener</strong> 来管理侦听细节）。所以一个 <strong>TcpServer</strong> 要做的就是这些工作。除此之外，每当有新连接到来时，<strong>TcpServer</strong> 需要接收新连接，当多个新连接存在时，<strong>TcpServer</strong> 需要有条不紊地管理这些连接：连接的建立、断开等，即产生和管理下文中说的 <strong>TcpConnection</strong> 对象。</li>\n<li>一个连接对应一个 <strong>TcpConnection</strong> 对象，<strong>TcpConnection</strong> 对象管理着这个连接的一些信息：如连接状态、本端和对端的 ip 地址和端口号等。</li>\n<li>数据通道对象 <strong>Channel</strong>，<strong>Channel</strong> 记录了 socket 的句柄，因而是一个连接上执行数据收发的真正执行者，<strong>Channel</strong> 对象一般作为 <strong>TcpConnection</strong> 的成员变量。</li>\n<li><strong>TcpSession</strong> 对象，是将 <strong>Channel</strong> 收取的数据进行解包，或者对准备好的数据进行装包，并传给 <strong>Channel</strong> 发送。</li>\n</ol>\n<p><strong>归纳起来</strong>：一个 <strong>TcpServer</strong> 依靠 <strong>TcpListener</strong> 对新连接的侦听和处理，依靠 <strong>TcpConnection</strong> 对象对连接上的数据进行管理，<strong>TcpConnection</strong> 实际依靠 <strong>Channel</strong> 对数据进行收发，依靠 <strong>TcpSession</strong> 对数据进行装包和解包。也就是说一个 <strong>TcpServer</strong> 存在一个 <strong>TcpListener</strong>，对应多个 <strong>TcpConnection</strong>，有几个<strong>TcpConnection</strong> 就有几个 <strong>TcpSession</strong>，同时也就有几个 <strong>Channel</strong>。</p>\n<p>以上说的 <strong>TcpServer</strong>、<strong>TcpListener</strong>、<strong>TcpConnection</strong>、<strong>Channel</strong> 和 <strong>TcpSession</strong> 是服务器框架的网络层。一个好的网络框架，应该做到与业务代码脱耦。即上层代码只需要拿到数据，执行业务逻辑，而不用关注数据的收发和网络数据包的封包和解包以及网络状态的变化（比如网络断开与重连）。</p>\n<p><strong>拿数据的发送来说</strong>：</p>\n<p>当业务逻辑将数据交给 <strong>TcpSession</strong>，<strong>TcpSession</strong> 将数据装好包后（装包过程后可以有一些加密或压缩操作），交给 TcpConnection::SendData()，而TcpConnection::SendData() 实际是调用 **Channel::SendData()**，因为 <strong>Channel</strong> 含有 socket 句柄，所以 <strong>Channel::SendData()</strong> 真正调用send()&#x2F;sendto()&#x2F;write() 方法将数据发出去。</p>\n<p>对于数据的接收，稍微有一点不同：</p>\n<p>通过 select()&#x2F;poll()&#x2F;epoll() 等IO multiplex技术，确定好了哪些 <strong>TcpConnection</strong> 上有数据到来后，激活该 <strong>TcpConnection</strong> 的 <strong>Channel</strong> 对象去调用recv()&#x2F;recvfrom()&#x2F;read() 来收取数据。数据收到以后，将数据交由 <strong>TcpSession</strong>来处理，最终交给业务层。注意数据收取、解包乃至交给业务层是一定要分开的。我的意思是：最好不要解包并交给业务层和数据收取的逻辑放在一起。因为数据收取是 IO 操作，而解包和交给业务层是逻辑计算操作。IO 操作一般比逻辑计算要慢。到底如何安排要根据服务器业务来取舍，也就是说你要想好你的服务器程序的性能瓶颈在网络 IO 还是逻辑计算，即使是网络 IO，也可以分为上行操作和下行操作，上行操作即客户端发数据给服务器，下行即服务器发数据给客户端。有时候数据上行少，下行大。（如游戏服务器，一个 npc 移动了位置，上行是该客户端通知服务器自己最新位置，而下行确是服务器要告诉在场的每个客户端）。</p>\n<p>在我的文章《主线程与工作线程的分工》中介绍了，工作线程的流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (!m_bQuit)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    epoll_or_select_func();  </span><br><span class=\"line\"></span><br><span class=\"line\">    handle_io_events();  </span><br><span class=\"line\"></span><br><span class=\"line\">    handle_other_things();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>其中 epoll_or_select_func() 即是上文所说的通过 select()&#x2F;poll()&#x2F;epoll() 等 IO multiplex 技术，确定好了哪些 <strong>TcpConnection</strong> 上有数据到来。我的服务器代码中一般只会监测 socket 可读事件，而不会监测 socket 可写事件。至于如何发数据，文章后面会介绍。所以对于可读事件，以 epoll 为例，这里需要设置的标识位是：</p>\n<ul>\n<li><strong>EPOLLIN</strong> 普通可读事件（当连接正常时，产生这个事件，recv()&#x2F;read()函数返回收到的字节数；当连接关闭，这两个函数返回0，也就是说我们设置这个标识已经可以监测到新来数据和对端关闭事件）</li>\n<li><strong>EPOLLRDHUP</strong> 对端关闭事件（linux man 手册上说这个事件可以监测对端关闭，但我实际调试时发送即使对端关闭也没触发这个事件，仍然是EPOLLIN，只不过此时调用recv()&#x2F;read()函数，返回值会为0，所以实际项目中是否可以通过设置这个标识来监测对端关闭，仍然待考证）</li>\n<li><strong>EPOLLPRI</strong> 带外数据</li>\n</ul>\n<p>muduo 里面将 <strong>epoll_wait</strong> 的超时事件设置为 <strong>1</strong> 毫秒，我的另一个项目将 <strong>epoll_wait</strong> 超时时间设置为 <strong>10</strong> 毫秒。这两个数值供大家参考。</p>\n<p>这个项目中，工作线程和主线程都是上文代码中的逻辑，主线程监听侦听socket 上的可读事件，也就是监测是否有新连接来了。主线程和每个工作线程上都存在一个 epollfd。如果新连接来了，则在主线程的 handle_io_events() 中接受新连接。产生的新连接的socket句柄挂接到哪个线程的 epollfd 上呢？这里采取的做法是 <strong>round-robin</strong> 算法，即存在一个对象 <strong>CWorkerThreadManager</strong> 记录了各个工作线程上工作状态。伪码大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void attach_new_fd(int newsocketfd)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    workerthread = get_next_worker_thread(next);  </span><br><span class=\"line\">    workerthread.attach_to_epollfd(newsocketfd);  </span><br><span class=\"line\">    ++next;  </span><br><span class=\"line\">    if (next &gt; max_worker_thread_num)  </span><br><span class=\"line\">        next = 0;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>即先从第一个工作线程的 epollfd 开始挂接新来 socket，接着累加索引，这样下次就是第二个工作线程了。如果所以超出工作线程数目，则从第一个工作重新开始。这里解决了新连接 socket “负载均衡”的问题。在实际代码中还有个需要注意的细节就是：epoll_wait 的函数中的 struct epoll_event 数量开始到底要设置多少个才合理？存在的顾虑是，多了浪费，少了不够用，我在曾经一个项目中直接用的是 4096：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const int EPOLL_MAX_EVENTS = 4096;  </span><br><span class=\"line\">const int dwSelectTimeout = 10000;  </span><br><span class=\"line\">struct epoll_event events[EPOLL_MAX_EVENTS];  </span><br><span class=\"line\">int nfds = epoll_wait(m_fdEpoll, events, EPOLL_MAX_EVENTS, dwSelectTimeout / 1000);</span><br></pre></td></tr></table></figure>\n\n\n<p>我在陈硕的 muduo 网络库中发现作者才用了一个比较好的思路，即动态扩张数量：开始是 <strong>n</strong> 个，当发现有事件的 fd 数量已经到达 <strong>n</strong> 个后，将 struct epoll_event 数量调整成 <strong>2n</strong> 个，下次如果还不够，则变成 <strong>4n</strong> 个，以此类推，作者巧妙地利用 stl::vector 在内存中的连续性来实现了这种思路：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化代码  </span><br><span class=\"line\">std::vector&lt;struct epoll_event&gt; events_(16);  </span><br><span class=\"line\"></span><br><span class=\"line\">//线程循环里面的代码  </span><br><span class=\"line\">while (m_bExit)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    int numEvents = ::epoll_wait(epollfd_, &amp;*events_.begin(), static_cast&lt;int&gt;(events_.size()), 1);  </span><br><span class=\"line\">    if (numEvents &gt; 0)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        if (static_cast&lt;size_t&gt;(numEvents) == events_.size())  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            events_.resize(events_.size() * 2);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读到这里，你可能觉得工作线程所做的工作也不过就是调用 <strong>handle_io_events()</strong> 来接收网络数据，其实不然，工作线程也可以做程序业务逻辑上的一些工作。也就是在 <strong>handle_other_things()</strong> 里面。那如何将这些工作加到 <strong>handle_other_things()</strong> 中去做呢？写一个队列，任务先放入队列，再让 <strong>handle_other_things()</strong> 从队列中取出来做？我在该项目中也借鉴了muduo库的做法。即 <strong>handle_other_things()</strong> 中调用一系列函数指针，伪码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void do_other_things()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    somefunc();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//m_functors是一个stl::vector,其中每一个元素为一个函数指针  </span><br><span class=\"line\">void somefunc()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    for (size_t i = 0; i &lt; m_functors.size(); ++i)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        m_functors[i]();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    m_functors.clear();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当任务产生时，只要我们将执行任务的函数 <strong>push_back</strong> 到 <strong>m_functors</strong> 这个 stl::vector 对象中即可。但是问题来了，如果是其他线程产生的任务，两个线程同时操作 <strong>m_functors</strong>，必然要加锁，这也会影响效率。muduo 是这样做的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void add_task(const Functor&amp; cb)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    std::unique_lock&lt;std::mutex&gt; lock(mutex_);  </span><br><span class=\"line\">    m_functors.push_back(cb);     </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">void do_task()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    std::vector&lt;Functor&gt; functors;  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        std::unique_lock&lt;std::mutex&gt; lock(mutex_);  </span><br><span class=\"line\">        functors.swap(m_functors);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    for (size_t i = 0; i &lt; functors.size(); ++i)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        functors[i]();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>看到没有，利用一个栈变量 <strong>functors</strong> 将 <strong>m_functors</strong> 中的任务函数指针倒换（swap）过来了，这样大大减小了对 m_functors 操作时的加锁粒度。前后变化：变化前，相当于原来 A 给 B 多少东西，B 消耗多少，A 给的时候，B 不能消耗；B 消耗的时候A不能给。现在变成A将东西放到篮子里面去，B 从篮子里面拿，B 如果拿去一部分后，只有消耗完了才会来拿，或者 A 通知 B 去篮子里面拿，而 B 忙碌时，A 是不会通知 B 来拿，这个时候 A 只管将东西放在篮子里面就可以了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool bBusy = false;  </span><br><span class=\"line\">void add_task(const Functor&amp; cb)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    std::unique_lock&lt;std::mutex&gt; lock(mutex_);  </span><br><span class=\"line\">    m_functors_.push_back(cb);  </span><br><span class=\"line\"></span><br><span class=\"line\">    //B不忙碌时只管往篮子里面加，不要通知B  </span><br><span class=\"line\">    if (!bBusy)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        wakeup_to_do_task();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">void do_task()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    bBusy = true;  </span><br><span class=\"line\">    std::vector&lt;Functor&gt; functors;  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        std::unique_lock&lt;std::mutex&gt; lock(mutex_);  </span><br><span class=\"line\">        functors.swap(pendingFunctors_);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    for (size_t i = 0; i &lt; functors.size(); ++i)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        functors[i]();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    bBusy = false;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>看，多巧妙的做法！</p>\n<p>因为每个工作线程都存在一个 <strong>m_functors</strong>，现在问题来了，如何将产生的任务均衡地分配给每个工作线程。这个做法类似上文中如何将新连接的 socket 句柄挂载到工作线程的 epollfd 上，也是 round-robin 算法。上文已经描述，此处不再赘述。</p>\n<p>还有种情况，就是希望任务产生时，工作线程能够立马执行这些任务，而不是等 epoll_wait 超时返回之后。这个时候的做法，就是使用一些技巧唤醒epoll_wait，Linux 系统可以使用 <strong>socketpair</strong> 或 timerevent、eventfd 等技巧。</p>\n<p>上文中留下三个问题：</p>\n<ol>\n<li><strong>数据库线程任务队列A中的任务从何而来，目前只有消费者，没有生产者，那么生产者是谁？</strong></li>\n<li><strong>数据库线程任务队列B中的任务将去何方，目前只有生产者没有消费者。</strong></li>\n<li><strong>业务层的数据如何发送出去？</strong></li>\n</ol>\n<p>问题 1 的答案是：业务层产生任务可能会交给数据库任务队列A，这里的业务层代码可能就是工作线程中 <strong>do_other_things()</strong> 函数执行体中的调用。至于交给这个 9 个数据库线程的哪一个的任务队列，同样采用了 <strong>round-robin</strong> 算法。所以就存在一个对象 <strong>CDbThreadManager</strong> 来管理这九个数据库线程。下面的伪码是向数据库工作线程中加入任务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool CDbThreadManager::AddTask(IMysqlTask* poTask )  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (m_index &gt;= m_dwThreadsCount)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        m_index = 0;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    return m_aoMysqlThreads[m_index++].AddTask(poTask);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>同理问题 2 中的消费者也可能就是 <strong>do_other_things()</strong> 函数执行体中的调用。</p>\n<p>现在来说问题 3，业务层的数据产生后，经过 TcpSession 装包后，需要发送的话，产生任务丢给工作线程的 do_other_things()，然后在相关的 Channel 里面发送，因为没有监测该 socket 上的可写事件，所以该数据可能调用 send() 或者 write() 时会阻塞，没关系，sleep() 一会儿，继续发送，一直尝试，到数据发出去。伪码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool Channel::Send()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    int offset = 0;  </span><br><span class=\"line\">    while (true)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        int n = ::send(socketfd, buf + offset, length - offset);  </span><br><span class=\"line\">        if (n == -1)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            if (errno == EWOULDBLOCK)  </span><br><span class=\"line\">            &#123;  </span><br><span class=\"line\">                ::sleep(100);  </span><br><span class=\"line\">                continue;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        //对方关闭了socket，这端建议也关闭  </span><br><span class=\"line\">        else if (n == 0)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            close(socketfd);  </span><br><span class=\"line\">            return false;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">        offset += n;  </span><br><span class=\"line\">        if (offset &gt;= length)  </span><br><span class=\"line\">            break;  </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    return true;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"实例：一个服务器程序的架构介绍本文将介绍我曾经做过的一个项目的服务器架构和服务器编程的一些重要细节。 一、程序运行环境操作系统：Centos 7.0 编译器：g...","permalink":"/post/转载/高性能服务器框架设计/实例：一个服务器程序的架构介绍","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%EF%BC%9A%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">实例：一个服务器程序的架构介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">一、程序运行环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">一、程序结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%A8%E9%80%94\"><span class=\"toc-text\">（一）、数据库工作线程的用途</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E5%92%8C%E4%B8%BB%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">（二）工作线程和主线程</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】如何设计断线自动重连机制","uid":"f6cf431fde3fe424d56db6051dddeb05","slug":"转载/高性能服务器框架设计/如何设计断线自动重连机制","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.404Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/如何设计断线自动重连机制.json","keywords":null,"cover":[],"text":"如何设计断线自动重连机制在有连接依赖关系的服务与服务之间，或客户端与服务器之间，无论是出于方便使用、降低运维成本、提高工作效率（服务与服务之间），还是优化用户体...","permalink":"/post/转载/高性能服务器框架设计/如何设计断线自动重连机制","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】心跳包机制设计详解","uid":"dadb03aa4cb6e4085adc0ea3361dcdbd","slug":"转载/高性能服务器框架设计/心跳包机制设计详解","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.405Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/心跳包机制设计详解.json","keywords":null,"cover":null,"text":"心跳包机制设计详解存在下面两种情形： 情形一：一个客户端连接服务器以后，如果长期没有和服务器有数据来往，可能会被防火墙程序关闭连接，有时候我们并不想要被关闭连接...","permalink":"/post/转载/高性能服务器框架设计/心跳包机制设计详解","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}