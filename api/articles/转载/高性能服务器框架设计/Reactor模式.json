{"title":"【转载】Reactor模式","uid":"f49eefb0c9add12a3ac803e71934ac10","slug":"转载/高性能服务器框架设计/Reactor模式","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.402Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/Reactor模式.json","keywords":null,"cover":[],"content":"<h2 id=\"Reactor模式\"><a href=\"#Reactor模式\" class=\"headerlink\" title=\"Reactor模式\"></a>Reactor模式</h2><p>最近一直在看游双的《高性能Linux服务器编程》一书，下载链接： <a href=\"http://download.csdn.net/detail/analogous_love/9673008\">http://download.csdn.net/detail/analogous_love/9673008</a></p>\n<p>书上是这么介绍Reactor模式的：</p>\n<p><img src=\"/../imgs/reactor1.jpg\"></p>\n<p>按照这个思路，我写个简单的练习：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> *@desc:   用reactor模式练习服务器程序，main.cpp</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date:   2016.11.23</span><br><span class=\"line\"> */</span><br><span class=\"line\"> </span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;  //for htonl() and htons()</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;sys/epoll.h&gt;</span><br><span class=\"line\">#include &lt;signal.h&gt;     //for signal()</span><br><span class=\"line\">#include &lt;pthread.h&gt;</span><br><span class=\"line\">#include &lt;semaphore.h&gt;</span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\">#include &lt;iomanip&gt; //for std::setw()/setfill()</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#define WORKER_THREAD_NUM   5</span><br><span class=\"line\"> </span><br><span class=\"line\">#define min(a, b) ((a &lt;= b) ? (a) : (b)) </span><br><span class=\"line\"> </span><br><span class=\"line\">int g_epollfd = 0;</span><br><span class=\"line\">bool g_bStop = false;</span><br><span class=\"line\">int g_listenfd = 0;</span><br><span class=\"line\">pthread_t g_acceptthreadid = 0;</span><br><span class=\"line\">pthread_t g_threadid[WORKER_THREAD_NUM] = &#123; 0 &#125;;</span><br><span class=\"line\">pthread_cond_t g_acceptcond;</span><br><span class=\"line\">pthread_mutex_t g_acceptmutex;</span><br><span class=\"line\"> </span><br><span class=\"line\">pthread_cond_t g_cond /*= PTHREAD_COND_INITIALIZER*/;</span><br><span class=\"line\">pthread_mutex_t g_mutex /*= PTHREAD_MUTEX_INITIALIZER*/;</span><br><span class=\"line\"> </span><br><span class=\"line\">pthread_mutex_t g_clientmutex;</span><br><span class=\"line\"> </span><br><span class=\"line\">std::list&lt;int&gt; g_listClients;</span><br><span class=\"line\"> </span><br><span class=\"line\">void prog_exit(int signo)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ::signal(SIGINT, SIG_IGN);</span><br><span class=\"line\">    //::signal(SIGKILL, SIG_IGN);//该信号不能被阻塞、处理或者忽略</span><br><span class=\"line\">    ::signal(SIGTERM, SIG_IGN);</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; &quot;program recv signal &quot; &lt;&lt; signo &lt;&lt; &quot; to exit.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">    g_bStop = true;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::epoll_ctl(g_epollfd, EPOLL_CTL_DEL, g_listenfd, NULL);</span><br><span class=\"line\"> </span><br><span class=\"line\">    //TODO: 是否需要先调用shutdown()一下？</span><br><span class=\"line\">    ::shutdown(g_listenfd, SHUT_RDWR);</span><br><span class=\"line\">    ::close(g_listenfd);</span><br><span class=\"line\">    ::close(g_epollfd);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::pthread_cond_destroy(&amp;g_acceptcond);</span><br><span class=\"line\">    ::pthread_mutex_destroy(&amp;g_acceptmutex);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ::pthread_cond_destroy(&amp;g_cond);</span><br><span class=\"line\">    ::pthread_mutex_destroy(&amp;g_mutex);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::pthread_mutex_destroy(&amp;g_clientmutex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">bool create_server_listener(const char* ip, short port)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    g_listenfd = ::socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);</span><br><span class=\"line\">    if (g_listenfd == -1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"> </span><br><span class=\"line\">    int on = 1;</span><br><span class=\"line\">    ::setsockopt(g_listenfd, SOL_SOCKET, SO_REUSEADDR, (char *)&amp;on, sizeof(on));</span><br><span class=\"line\">    ::setsockopt(g_listenfd, SOL_SOCKET, SO_REUSEPORT, (char *)&amp;on, sizeof(on));</span><br><span class=\"line\"> </span><br><span class=\"line\">    struct sockaddr_in servaddr;</span><br><span class=\"line\">    memset(&amp;servaddr, 0, sizeof(servaddr)); </span><br><span class=\"line\">    servaddr.sin_family = AF_INET;</span><br><span class=\"line\">    servaddr.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\">    servaddr.sin_port = htons(port);</span><br><span class=\"line\">    if (::bind(g_listenfd, (sockaddr *)&amp;servaddr, sizeof(servaddr)) == -1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"> </span><br><span class=\"line\">    if (::listen(g_listenfd, 50) == -1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"> </span><br><span class=\"line\">    g_epollfd = ::epoll_create(1);</span><br><span class=\"line\">    if (g_epollfd == -1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"> </span><br><span class=\"line\">    struct epoll_event e;</span><br><span class=\"line\">    memset(&amp;e, 0, sizeof(e));</span><br><span class=\"line\">    e.events = EPOLLIN | EPOLLRDHUP;</span><br><span class=\"line\">    e.data.fd = g_listenfd;</span><br><span class=\"line\">    if (::epoll_ctl(g_epollfd, EPOLL_CTL_ADD, g_listenfd, &amp;e) == -1)</span><br><span class=\"line\">        return false;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void release_client(int clientfd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (::epoll_ctl(g_epollfd, EPOLL_CTL_DEL, clientfd, NULL) == -1)</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;release client socket failed as call epoll_ctl failed&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::close(clientfd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void* accept_thread_func(void* arg)</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    while (!g_bStop)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ::pthread_mutex_lock(&amp;g_acceptmutex);</span><br><span class=\"line\">        ::pthread_cond_wait(&amp;g_acceptcond, &amp;g_acceptmutex);</span><br><span class=\"line\">        //::pthread_mutex_lock(&amp;g_acceptmutex);</span><br><span class=\"line\"> </span><br><span class=\"line\">        //std::cout &lt;&lt; &quot;run loop in accept_thread_func&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">        struct sockaddr_in clientaddr;</span><br><span class=\"line\">        socklen_t addrlen;</span><br><span class=\"line\">        int newfd = ::accept(g_listenfd, (struct sockaddr *)&amp;clientaddr, &amp;addrlen);</span><br><span class=\"line\">        ::pthread_mutex_unlock(&amp;g_acceptmutex);</span><br><span class=\"line\">        if (newfd == -1)</span><br><span class=\"line\">            continue;</span><br><span class=\"line\"> </span><br><span class=\"line\">        std::cout &lt;&lt; &quot;new client connected: &quot; &lt;&lt; ::inet_ntoa(clientaddr.sin_addr) &lt;&lt; &quot;:&quot; &lt;&lt; ::ntohs(clientaddr.sin_port) &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //将新socket设置为non-blocking</span><br><span class=\"line\">        int oldflag = ::fcntl(newfd, F_GETFL, 0);</span><br><span class=\"line\">        int newflag = oldflag | O_NONBLOCK;</span><br><span class=\"line\">        if (::fcntl(newfd, F_SETFL, newflag) == -1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; &quot;fcntl error, oldflag =&quot; &lt;&lt; oldflag &lt;&lt; &quot;, newflag = &quot; &lt;&lt; newflag &lt;&lt; std::endl;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        struct epoll_event e;</span><br><span class=\"line\">        memset(&amp;e, 0, sizeof(e));</span><br><span class=\"line\">        e.events = EPOLLIN | EPOLLRDHUP | EPOLLET;</span><br><span class=\"line\">        e.data.fd = newfd;</span><br><span class=\"line\">        if (::epoll_ctl(g_epollfd, EPOLL_CTL_ADD, newfd, &amp;e) == -1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; &quot;epoll_ctl error, fd =&quot; &lt;&lt; newfd &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">void* worker_thread_func(void* arg)</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    while (!g_bStop)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int clientfd;</span><br><span class=\"line\">        ::pthread_mutex_lock(&amp;g_clientmutex);</span><br><span class=\"line\">        while (g_listClients.empty())</span><br><span class=\"line\">            ::pthread_cond_wait(&amp;g_cond, &amp;g_clientmutex);</span><br><span class=\"line\">        clientfd = g_listClients.front();</span><br><span class=\"line\">        g_listClients.pop_front();  </span><br><span class=\"line\">        pthread_mutex_unlock(&amp;g_clientmutex);</span><br><span class=\"line\"> </span><br><span class=\"line\">        //gdb调试时不能实时刷新标准输出，用这个函数刷新标准输出，使信息在屏幕上实时显示出来</span><br><span class=\"line\">        std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">        std::string strclientmsg;</span><br><span class=\"line\">        char buff[256];</span><br><span class=\"line\">        bool bError = false;</span><br><span class=\"line\">        while (true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            memset(buff, 0, sizeof(buff));</span><br><span class=\"line\">            int nRecv = ::recv(clientfd, buff, 256, 0);</span><br><span class=\"line\">            if (nRecv == -1)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (errno == EWOULDBLOCK)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    std::cout &lt;&lt; &quot;recv error, client disconnected, fd = &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span><br><span class=\"line\">                    release_client(clientfd);</span><br><span class=\"line\">                    bError = true;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //对端关闭了socket，这端也关闭。</span><br><span class=\"line\">            else if (nRecv == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                std::cout &lt;&lt; &quot;peer closed, client disconnected, fd = &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span><br><span class=\"line\">                release_client(clientfd);</span><br><span class=\"line\">                bError = true;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">            strclientmsg += buff;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //出错了，就不要再继续往下执行了</span><br><span class=\"line\">        if (bError)</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        </span><br><span class=\"line\">        std::cout &lt;&lt; &quot;client msg: &quot; &lt;&lt; strclientmsg;</span><br><span class=\"line\"> </span><br><span class=\"line\">        //将消息加上时间标签后发回</span><br><span class=\"line\">        time_t now = time(NULL);</span><br><span class=\"line\">        struct tm* nowstr = localtime(&amp;now);</span><br><span class=\"line\">        std::ostringstream ostimestr;</span><br><span class=\"line\">        ostimestr &lt;&lt; &quot;[&quot; &lt;&lt; nowstr-&gt;tm_year + 1900 &lt;&lt; &quot;-&quot; </span><br><span class=\"line\">                  &lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_mon + 1 &lt;&lt; &quot;-&quot; </span><br><span class=\"line\">                  &lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_mday &lt;&lt; &quot; &quot;</span><br><span class=\"line\">                  &lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_hour &lt;&lt; &quot;:&quot; </span><br><span class=\"line\">                  &lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_min &lt;&lt; &quot;:&quot; </span><br><span class=\"line\">                  &lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_sec &lt;&lt; &quot;]server reply: &quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">        strclientmsg.insert(0, ostimestr.str());</span><br><span class=\"line\">        </span><br><span class=\"line\">        while (true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            int nSent = ::send(clientfd, strclientmsg.c_str(), strclientmsg.length(), 0);</span><br><span class=\"line\">            if (nSent == -1)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (errno == EWOULDBLOCK)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ::sleep(10);</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    std::cout &lt;&lt; &quot;send error, fd = &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span><br><span class=\"line\">                    release_client(clientfd);</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                   </span><br><span class=\"line\">            &#125;          </span><br><span class=\"line\"> </span><br><span class=\"line\">            std::cout &lt;&lt; &quot;send: &quot; &lt;&lt; strclientmsg;</span><br><span class=\"line\">            strclientmsg.erase(0, nSent);</span><br><span class=\"line\"> </span><br><span class=\"line\">            if (strclientmsg.empty())</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void daemon_run()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int pid;</span><br><span class=\"line\">    signal(SIGCHLD, SIG_IGN);</span><br><span class=\"line\">    //1）在父进程中，fork返回新创建子进程的进程ID；</span><br><span class=\"line\">    //2）在子进程中，fork返回0；</span><br><span class=\"line\">    //3）如果出现错误，fork返回一个负值；</span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    if (pid &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std:: cout &lt;&lt; &quot;fork error&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        exit(-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //父进程退出，子进程独立运行</span><br><span class=\"line\">    else if (pid &gt; 0) &#123;</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //之前parent和child运行在同一个session里,parent是会话（session）的领头进程,</span><br><span class=\"line\">    //parent进程作为会话的领头进程，如果exit结束执行的话，那么子进程会成为孤儿进程，并被init收养。</span><br><span class=\"line\">    //执行setsid()之后,child将重新获得一个新的会话(session)id。</span><br><span class=\"line\">    //这时parent退出之后,将不会影响到child了。</span><br><span class=\"line\">    setsid();</span><br><span class=\"line\">    int fd;</span><br><span class=\"line\">    fd = open(&quot;/dev/null&quot;, O_RDWR, 0);</span><br><span class=\"line\">    if (fd != -1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dup2(fd, STDIN_FILENO);</span><br><span class=\"line\">        dup2(fd, STDOUT_FILENO);</span><br><span class=\"line\">        dup2(fd, STDERR_FILENO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (fd &gt; 2)</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    short port = 0;</span><br><span class=\"line\">    int ch;</span><br><span class=\"line\">    bool bdaemon = false;</span><br><span class=\"line\">    while ((ch = getopt(argc, argv, &quot;p:d&quot;)) != -1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch (ch)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        case &#x27;d&#x27;:</span><br><span class=\"line\">            bdaemon = true;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &#x27;p&#x27;:</span><br><span class=\"line\">            port = atol(optarg);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    if (bdaemon)</span><br><span class=\"line\">        daemon_run();</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    if (port == 0)</span><br><span class=\"line\">        port = 12345;</span><br><span class=\"line\">     </span><br><span class=\"line\">    if (!create_server_listener(&quot;0.0.0.0&quot;, port))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;Unable to create listen server: ip=0.0.0.0, port=&quot; &lt;&lt; port &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    </span><br><span class=\"line\">    //设置信号处理</span><br><span class=\"line\">    signal(SIGCHLD, SIG_DFL);</span><br><span class=\"line\">    signal(SIGPIPE, SIG_IGN);</span><br><span class=\"line\">    signal(SIGINT, prog_exit);</span><br><span class=\"line\">    //signal(SIGKILL, prog_exit);//该信号不能被阻塞、处理或者忽略</span><br><span class=\"line\"> </span><br><span class=\"line\">    signal(SIGTERM, prog_exit);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::pthread_cond_init(&amp;g_acceptcond, NULL);</span><br><span class=\"line\">    ::pthread_mutex_init(&amp;g_acceptmutex, NULL);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::pthread_cond_init(&amp;g_cond, NULL);</span><br><span class=\"line\">    ::pthread_mutex_init(&amp;g_mutex, NULL);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ::pthread_mutex_init(&amp;g_clientmutex, NULL);</span><br><span class=\"line\">     </span><br><span class=\"line\">    ::pthread_create(&amp;g_acceptthreadid, NULL, accept_thread_func, NULL);</span><br><span class=\"line\">    //启动工作线程</span><br><span class=\"line\">    for (int i = 0; i &lt; WORKER_THREAD_NUM; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ::pthread_create(&amp;g_threadid[i], NULL, worker_thread_func, NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    while (!g_bStop)</span><br><span class=\"line\">    &#123;       </span><br><span class=\"line\">        struct epoll_event ev[1024];</span><br><span class=\"line\">        int n = ::epoll_wait(g_epollfd, ev, 1024, 10);</span><br><span class=\"line\">        if (n == 0)</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        else if (n &lt; 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::cout &lt;&lt; &quot;epoll_wait error&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        int m = min(n, 1024);</span><br><span class=\"line\">        for (int i = 0; i &lt; m; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //通知接收连接线程接收新连接</span><br><span class=\"line\">            if (ev[i].data.fd == g_listenfd)</span><br><span class=\"line\">                pthread_cond_signal(&amp;g_acceptcond);</span><br><span class=\"line\">            //通知普通工作线程接收数据</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;               </span><br><span class=\"line\">                pthread_mutex_lock(&amp;g_clientmutex);              </span><br><span class=\"line\">                g_listClients.push_back(ev[i].data.fd);</span><br><span class=\"line\">                pthread_mutex_unlock(&amp;g_clientmutex);</span><br><span class=\"line\">                pthread_cond_signal(&amp;g_cond);</span><br><span class=\"line\">                //std::cout &lt;&lt; &quot;signal&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序的功能一个简单的echo服务：客户端连接上服务器之后，给服务器发送信息，服务器加上时间戳等信息后返回给客户端。</p>\n<p>使用到的知识点有：</p>\n<ol>\n<li><p>条件变量</p>\n</li>\n<li><p>epoll的边缘触发模式</p>\n</li>\n</ol>\n<p>程序的大致框架是：</p>\n<ol>\n<li>主线程只负责监听侦听socket上是否有新连接，如果有新连接到来，交给一个叫accept的工作线程去接收新连接，并将新连接socket绑定到主线程使用epollfd上去。</li>\n<li>主线程如果侦听到客户端的socket上有可读事件，则通知另外五个工作线程去接收处理客户端发来的数据，并将数据加上时间戳后发回给客户端。</li>\n<li>可以通过传递-p port来设置程序的监听端口号；可以通过传递-d来使程序以daemon模式运行在后台。这也是标准linux daemon模式的书写方法。</li>\n</ol>\n<p>程序难点和需要注意的地方是：</p>\n<ol>\n<li>条件变量为了防止虚假唤醒，一定要在一个循环里面调用pthread_cond_wait()函数，我在worker_thread_func()中使用了：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (g_listClients.empty())  </span><br><span class=\"line\">\t::pthread_cond_wait(&amp;g_cond, &amp;g_clientmutex); </span><br></pre></td></tr></table></figure>\n\n<p>在accept_thread_func()函数里面我没有使用循环，这样会有问题吗？</p>\n<ol>\n<li>使用条件变量pthread_cond_wait()函数的时候一定要先获得与该条件变量相关的mutex，即像下面这样的结构：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutex_lock(...);</span><br><span class=\"line\"> </span><br><span class=\"line\">while (condition is true)</span><br><span class=\"line\">    ::pthread_cond_wait(...);</span><br><span class=\"line\"> </span><br><span class=\"line\">//这里可以有其他代码...</span><br><span class=\"line\">mutex_unlock(...);</span><br><span class=\"line\"> </span><br><span class=\"line\">//这里可以有其他代码...</span><br></pre></td></tr></table></figure>\n\n<p>因为pthread_cond_wait()如果阻塞的话，它解锁相关mutex和阻塞当前线程这两个动作加在一起是原子的。</p>\n<ol>\n<li>作为服务器端程序最好对侦听socket调用setsocketopt()设置SO_REUSEADDR和SO_REUSEPORT两个标志，因为服务程序有时候会需要重启（比如调试的时候就会不断重启），如果不设置这两个标志的话，绑定端口时就会调用失败。因为一个端口使用后，即使不再使用，因为四次挥手该端口处于TIME_WAIT状态，有大约2min的MSL（Maximum Segment Lifetime，最大存活期）。这2min内，该端口是不能被重复使用的。你的服务器程序上次使用了这个端口号，接着重启，因为这个缘故，你再次绑定这个端口就会失败（bind函数调用失败）。要不你就每次重启时需要等待2min后再试（这在频繁重启程序调试是难以接收的），或者设置这种SO_REUSEADDR和SO_REUSEPORT立即回收端口使用。</li>\n</ol>\n<p>其实，SO_REUSEADDR在Windows上和Unix平台上还有些细微的区别，我在libevent源码中看到这样的描述：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int evutil_make_listen_socket_reuseable(evutil_socket_t sock)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifndef WIN32</span><br><span class=\"line\">\tint one = 1;</span><br><span class=\"line\">\t/* REUSEADDR on Unix means, &quot;don&#x27;t hang on to this address after the</span><br><span class=\"line\">\t * listener is closed.&quot;  On Windows, though, it means &quot;don&#x27;t keep other</span><br><span class=\"line\">\t * processes from binding to this address while we&#x27;re using it. */</span><br><span class=\"line\">\treturn setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void*) &amp;one,</span><br><span class=\"line\">\t    (ev_socklen_t)sizeof(one));</span><br><span class=\"line\">#else</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>注意注释部分，在Unix平台上设置这个选项意味着，任意进程可以复用该地址；而在windows，不要阻止其他进程复用该地址。也就是在在Unix平台上，如果不设置这个选项，任意进程在一定时间内，不能bind该地址；在windows平台上，在一定时间内，其他进程不能bind该地址，而本进程却可以再次bind该地址。</p>\n<ol>\n<li>epoll_wait对新连接socket使用的是边缘触发模式EPOLLET（edge trigger），而不是默认的水平触发模式（level trigger)。因为如果采取水平触发模式的话，主线程检测到某个客户端socket数据可读时，通知工作线程去收取该socket上的数据，这个时候主线程继续循环，只要在工作线程没有将该socket上数据全部收完，或者在工作线程收取数据的过程中，客户端有新数据到来，主线程会继续发通知（通过pthread_cond_signal()）函数，再次通知工作线程收取数据。这样会可能导致多个工作线程同时调用recv函数收取该客户端socket上的数据，这样产生的结果将会导致数据错乱。</li>\n</ol>\n<p>相反，采取边缘触发模式，只有等某个工作线程将那个客户端socket上数据全部收取完毕，主线程的epoll_wait才可能会再次触发来通知工作线程继续收取那个客户端socket新来的数据。</p>\n<ol>\n<li><p>代码中有这样一行：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//gdb调试时不能实时刷新标准输出，用这个函数刷新标准输出，使信息在屏幕上实时显示出来 </span><br><span class=\"line\">std::cout &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如果不加上这一行，正常运行服务器程序，程序中要打印到控制台的信息都会打印出来，但是如果用gdb调试状态下，程序的所有输出就不显示了。我不知道这是不是gdb的一个bug，所以这里加上std::endl来输出一个换行符并flush标准输出，让输出显示出来。（std::endl不仅是输出一个换行符而且是同时刷新输出，相当于fflush()函数）。</p>\n<p>程序我部署起来了，你可以使用linux的nc命令或自己写程序连接服务器来查看程序效果，当然也可以使用telnet命令，方法：</p>\n<p>Linux:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc 120.55.94.78 12345</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet 120.55.94.78 12345</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以给服务器自由发送数据了，服务器会给你发送的信息加上时间戳返回给你。效果如图：</p>\n<p><img src=\"/../imgs/reactor2.jpg\"></p>\n<p>另外我将这个代码改写了成纯C++11版本，使用CMake编译，为了支持编译必须加上这-std&#x3D;c++11：</p>\n<p>CMakeLists.txt代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 2.8)</span><br><span class=\"line\"> </span><br><span class=\"line\">PROJECT(myreactorserver)</span><br><span class=\"line\"> </span><br><span class=\"line\">AUX_SOURCE_DIRECTORY(./ SRC_LIST)</span><br><span class=\"line\">SET(EXECUTABLE_OUTPUT_PATH ./)</span><br><span class=\"line\"> </span><br><span class=\"line\">ADD_DEFINITIONS(-g -W -Wall -Wno-deprecated -DLINUX -D_REENTRANT -D_FILE_OFFSET_BITS=64 -DAC_HAS_INFO -DAC_HAS_WARNING -DAC_HAS_ERROR -DAC_HAS_CRITICAL -DTIXML_USE_STL -DHAVE_CXX_STDHEADERS $&#123;CMAKE_CXX_FLAGS&#125; -std=c++11)</span><br><span class=\"line\"> </span><br><span class=\"line\">INCLUDE_DIRECTORIES(</span><br><span class=\"line\">./</span><br><span class=\"line\">)</span><br><span class=\"line\">LINK_DIRECTORIES(</span><br><span class=\"line\">./</span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\">set(</span><br><span class=\"line\">main.cpp</span><br><span class=\"line\">myreator.cpp</span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\">ADD_EXECUTABLE(myreactorserver $&#123;SRC_LIST&#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">TARGET_LINK_LIBRARIES(myreactorserver pthread)</span><br></pre></td></tr></table></figure>\n\n<p>myreactor.h文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *@desc: myreactor头文件, myreactor.h</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date: 2016.12.03</span><br><span class=\"line\"> */</span><br><span class=\"line\">#ifndef __MYREACTOR_H__</span><br><span class=\"line\">#define __MYREACTOR_H__</span><br><span class=\"line\"> </span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\">#include &lt;thread&gt;</span><br><span class=\"line\">#include &lt;mutex&gt;</span><br><span class=\"line\">#include &lt;condition_variable&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define WORKER_THREAD_NUM   5</span><br><span class=\"line\"> </span><br><span class=\"line\">class CMyReactor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tCMyReactor();</span><br><span class=\"line\">\t~CMyReactor();</span><br><span class=\"line\"> </span><br><span class=\"line\">\tbool init(const char* ip, short nport);</span><br><span class=\"line\">\tbool uninit();</span><br><span class=\"line\"> </span><br><span class=\"line\">\tbool close_client(int clientfd);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstatic void* main_loop(void* p);</span><br><span class=\"line\"> </span><br><span class=\"line\">private:</span><br><span class=\"line\">\t//no copyable</span><br><span class=\"line\">\tCMyReactor(const CMyReactor&amp; rhs);</span><br><span class=\"line\">\tCMyReactor&amp; operator = (const CMyReactor&amp; rhs);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tbool create_server_listener(const char* ip, short port);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstatic void accept_thread_proc(CMyReactor* pReatcor);</span><br><span class=\"line\">\tstatic void worker_thread_proc(CMyReactor* pReatcor);</span><br><span class=\"line\"> </span><br><span class=\"line\">private:</span><br><span class=\"line\">\t//C11语法可以在这里初始化</span><br><span class=\"line\">\tint\t\t\t\t\t\t\t m_listenfd = 0;</span><br><span class=\"line\">\tint\t\t\t\t\t\t\t m_epollfd  = 0;</span><br><span class=\"line\">\tbool\t\t\t\t\t\t m_bStop    = false;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstd::shared_ptr&lt;std::thread&gt; m_acceptthread;</span><br><span class=\"line\">\tstd::shared_ptr&lt;std::thread&gt; m_workerthreads[WORKER_THREAD_NUM];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstd::condition_variable\t\t m_acceptcond;</span><br><span class=\"line\">\tstd::mutex\t\t\t\t\t m_acceptmutex;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::condition_variable\t\t m_workercond ;</span><br><span class=\"line\">\tstd::mutex\t\t\t\t\t m_workermutex;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::list&lt;int&gt;\t\t\t\t m_listClients;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">#endif //!__MYREACTOR_H__</span><br></pre></td></tr></table></figure>\n\n<p>myreactor.cpp文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> *@desc: myreactor实现文件, myreactor.cpp</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date: 2016.12.03</span><br><span class=\"line\"> */</span><br><span class=\"line\">#include &quot;myreactor.h&quot;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;  //for htonl() and htons()</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;sys/epoll.h&gt;</span><br><span class=\"line\">#include &lt;list&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\">#include &lt;time.h&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\">#include &lt;iomanip&gt; //for std::setw()/setfill()</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">#define min(a, b) ((a &lt;= b) ? (a) : (b))</span><br><span class=\"line\"> </span><br><span class=\"line\">CMyReactor::CMyReactor()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//m_listenfd = 0;</span><br><span class=\"line\">\t//m_epollfd = 0;</span><br><span class=\"line\">\t//m_bStop = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">CMyReactor::~CMyReactor()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">bool CMyReactor::init(const char* ip, short nport)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (!create_server_listener(ip, nport))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; &quot;Unable to bind: &quot; &lt;&lt; ip &lt;&lt; &quot;:&quot; &lt;&lt; nport &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;main thread id = &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t//启动接收新连接的线程</span><br><span class=\"line\">\tm_acceptthread.reset(new std::thread(CMyReactor::accept_thread_proc, this));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//启动工作线程</span><br><span class=\"line\">\tfor (auto&amp; t : m_workerthreads)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt.reset(new std::thread(CMyReactor::worker_thread_proc, this));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">bool CMyReactor::uninit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_bStop = true;</span><br><span class=\"line\">\tm_acceptcond.notify_one();</span><br><span class=\"line\">\tm_workercond.notify_all();</span><br><span class=\"line\"> </span><br><span class=\"line\">\tm_acceptthread-&gt;join();</span><br><span class=\"line\">\tfor (auto&amp; t : m_workerthreads)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tt-&gt;join();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t::epoll_ctl(m_epollfd, EPOLL_CTL_DEL, m_listenfd, NULL);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t//TODO: 是否需要先调用shutdown()一下？</span><br><span class=\"line\">\t::shutdown(m_listenfd, SHUT_RDWR);</span><br><span class=\"line\">\t::close(m_listenfd);</span><br><span class=\"line\">\t::close(m_epollfd);</span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">bool CMyReactor::close_client(int clientfd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (::epoll_ctl(m_epollfd, EPOLL_CTL_DEL, clientfd, NULL) == -1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; &quot;close client socket failed as call epoll_ctl failed&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t//return false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"> </span><br><span class=\"line\">\t::close(clientfd);</span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">void* CMyReactor::main_loop(void* p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;main thread id = &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; std::endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tCMyReactor* pReatcor = static_cast&lt;CMyReactor*&gt;(p);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\twhile (!pReatcor-&gt;m_bStop)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstruct epoll_event ev[1024];</span><br><span class=\"line\">\t\tint n = ::epoll_wait(pReatcor-&gt;m_epollfd, ev, 1024, 10);</span><br><span class=\"line\">\t\tif (n == 0)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\telse if (n &lt; 0)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; &quot;epoll_wait error&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tint m = min(n, 1024);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; m; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t//通知接收连接线程接收新连接</span><br><span class=\"line\">\t\t\tif (ev[i].data.fd == pReatcor-&gt;m_listenfd)</span><br><span class=\"line\">\t\t\t\tpReatcor-&gt;m_acceptcond.notify_one();</span><br><span class=\"line\">\t\t\t//通知普通工作线程接收数据</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstd::unique_lock&lt;std::mutex&gt; guard(pReatcor-&gt;m_workermutex);</span><br><span class=\"line\">\t\t\t\t\tpReatcor-&gt;m_listClients.push_back(ev[i].data.fd);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpReatcor-&gt;m_workercond.notify_one();</span><br><span class=\"line\">\t\t\t\t//std::cout &lt;&lt; &quot;signal&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\t&#125;// end if</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t&#125;// end for-loop</span><br><span class=\"line\">\t&#125;// end while</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;main loop exit ...&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void CMyReactor::accept_thread_proc(CMyReactor* pReatcor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;accept thread, thread id = &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\twhile (true)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint newfd;</span><br><span class=\"line\">\t\tstruct sockaddr_in clientaddr;</span><br><span class=\"line\">\t\tsocklen_t addrlen;</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstd::unique_lock&lt;std::mutex&gt; guard(pReatcor-&gt;m_acceptmutex);</span><br><span class=\"line\">\t\t\tpReatcor-&gt;m_acceptcond.wait(guard);</span><br><span class=\"line\">\t\t\tif (pReatcor-&gt;m_bStop)</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\t//std::cout &lt;&lt; &quot;run loop in accept_thread_proc&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tnewfd = ::accept(pReatcor-&gt;m_listenfd, (struct sockaddr *)&amp;clientaddr, &amp;addrlen);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (newfd == -1)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tstd::cout &lt;&lt; &quot;new client connected: &quot; &lt;&lt; ::inet_ntoa(clientaddr.sin_addr) &lt;&lt; &quot;:&quot; &lt;&lt; ::ntohs(clientaddr.sin_port) &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t//将新socket设置为non-blocking</span><br><span class=\"line\">\t\tint oldflag = ::fcntl(newfd, F_GETFL, 0);</span><br><span class=\"line\">\t\tint newflag = oldflag | O_NONBLOCK;</span><br><span class=\"line\">\t\tif (::fcntl(newfd, F_SETFL, newflag) == -1)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; &quot;fcntl error, oldflag =&quot; &lt;&lt; oldflag &lt;&lt; &quot;, newflag = &quot; &lt;&lt; newflag &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tstruct epoll_event e;</span><br><span class=\"line\">\t\tmemset(&amp;e, 0, sizeof(e));</span><br><span class=\"line\">\t\te.events = EPOLLIN | EPOLLRDHUP | EPOLLET;</span><br><span class=\"line\">\t\te.data.fd = newfd;</span><br><span class=\"line\">\t\tif (::epoll_ctl(pReatcor-&gt;m_epollfd, EPOLL_CTL_ADD, newfd, &amp;e) == -1)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; &quot;epoll_ctl error, fd =&quot; &lt;&lt; newfd &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;accept thread exit ...&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void CMyReactor::worker_thread_proc(CMyReactor* pReatcor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;new worker thread, thread id = &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\twhile (true)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint clientfd;</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstd::unique_lock&lt;std::mutex&gt; guard(pReatcor-&gt;m_workermutex);</span><br><span class=\"line\">\t\t\twhile (pReatcor-&gt;m_listClients.empty())</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tif (pReatcor-&gt;m_bStop)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstd::cout &lt;&lt; &quot;worker thread exit ...&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\t\t\treturn;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpReatcor-&gt;m_workercond.wait(guard);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\tclientfd = pReatcor-&gt;m_listClients.front();</span><br><span class=\"line\">\t\t\tpReatcor-&gt;m_listClients.pop_front();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t//gdb调试时不能实时刷新标准输出，用这个函数刷新标准输出，使信息在屏幕上实时显示出来</span><br><span class=\"line\">\t\tstd::cout &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tstd::string strclientmsg;</span><br><span class=\"line\">\t\tchar buff[256];</span><br><span class=\"line\">\t\tbool bError = false;</span><br><span class=\"line\">\t\twhile (true)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmemset(buff, 0, sizeof(buff));</span><br><span class=\"line\">\t\t\tint nRecv = ::recv(clientfd, buff, 256, 0);</span><br><span class=\"line\">\t\t\tif (nRecv == -1)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tif (errno == EWOULDBLOCK)</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstd::cout &lt;&lt; &quot;recv error, client disconnected, fd = &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\t\t\tpReatcor-&gt;close_client(clientfd);</span><br><span class=\"line\">\t\t\t\t\tbError = true;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t//对端关闭了socket，这端也关闭。</span><br><span class=\"line\">\t\t\telse if (nRecv == 0)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tstd::cout &lt;&lt; &quot;peer closed, client disconnected, fd = &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\t\tpReatcor-&gt;close_client(clientfd);</span><br><span class=\"line\">\t\t\t\tbError = true;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\tstrclientmsg += buff;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t//出错了，就不要再继续往下执行了</span><br><span class=\"line\">\t\tif (bError)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tstd::cout &lt;&lt; &quot;client msg: &quot; &lt;&lt; strclientmsg;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t//将消息加上时间标签后发回</span><br><span class=\"line\">\t\ttime_t now = time(NULL);</span><br><span class=\"line\">\t\tstruct tm* nowstr = localtime(&amp;now);</span><br><span class=\"line\">\t\tstd::ostringstream ostimestr;</span><br><span class=\"line\">\t\tostimestr &lt;&lt; &quot;[&quot; &lt;&lt; nowstr-&gt;tm_year + 1900 &lt;&lt; &quot;-&quot;</span><br><span class=\"line\">\t\t\t&lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_mon + 1 &lt;&lt; &quot;-&quot;</span><br><span class=\"line\">\t\t\t&lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_mday &lt;&lt; &quot; &quot;</span><br><span class=\"line\">\t\t\t&lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_hour &lt;&lt; &quot;:&quot;</span><br><span class=\"line\">\t\t\t&lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_min &lt;&lt; &quot;:&quot;</span><br><span class=\"line\">\t\t\t&lt;&lt; std::setw(2) &lt;&lt; std::setfill(&#x27;0&#x27;) &lt;&lt; nowstr-&gt;tm_sec &lt;&lt; &quot;]server reply: &quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\tstrclientmsg.insert(0, ostimestr.str());</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\twhile (true)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tint nSent = ::send(clientfd, strclientmsg.c_str(), strclientmsg.length(), 0);</span><br><span class=\"line\">\t\t\tif (nSent == -1)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tif (errno == EWOULDBLOCK)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(10));</span><br><span class=\"line\">\t\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstd::cout &lt;&lt; &quot;send error, fd = &quot; &lt;&lt; clientfd &lt;&lt; std::endl;</span><br><span class=\"line\">\t\t\t\t\tpReatcor-&gt;close_client(clientfd);</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; &quot;send: &quot; &lt;&lt; strclientmsg;</span><br><span class=\"line\">\t\t\tstrclientmsg.erase(0, nSent);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t\t\tif (strclientmsg.empty())</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">bool CMyReactor::create_server_listener(const char* ip, short port)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_listenfd = ::socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);</span><br><span class=\"line\">\tif (m_listenfd == -1)</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tint on = 1;</span><br><span class=\"line\">\t::setsockopt(m_listenfd, SOL_SOCKET, SO_REUSEADDR, (char *)&amp;on, sizeof(on));</span><br><span class=\"line\">\t::setsockopt(m_listenfd, SOL_SOCKET, SO_REUSEPORT, (char *)&amp;on, sizeof(on));</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstruct sockaddr_in servaddr;</span><br><span class=\"line\">\tmemset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class=\"line\">\tservaddr.sin_family = AF_INET;</span><br><span class=\"line\">\tservaddr.sin_addr.s_addr = inet_addr(ip);</span><br><span class=\"line\">\tservaddr.sin_port = htons(port);</span><br><span class=\"line\">\tif (::bind(m_listenfd, (sockaddr *)&amp;servaddr, sizeof(servaddr)) == -1)</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tif (::listen(m_listenfd, 50) == -1)</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tm_epollfd = ::epoll_create(1);</span><br><span class=\"line\">\tif (m_epollfd == -1)</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tstruct epoll_event e;</span><br><span class=\"line\">\tmemset(&amp;e, 0, sizeof(e));</span><br><span class=\"line\">\te.events = EPOLLIN | EPOLLRDHUP;</span><br><span class=\"line\">\te.data.fd = m_listenfd;</span><br><span class=\"line\">\tif (::epoll_ctl(m_epollfd, EPOLL_CTL_ADD, m_listenfd, &amp;e) == -1)</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.cpp文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> *@desc:   用reactor模式练习服务器程序</span><br><span class=\"line\"> *@author: zhangyl</span><br><span class=\"line\"> *@date:   2016.12.03</span><br><span class=\"line\"> */</span><br><span class=\"line\"> </span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;signal.h&gt;     //for signal()</span><br><span class=\"line\">#include&lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;\t\t//for exit()</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &quot;myreactor.h&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">CMyReactor g_reator;</span><br><span class=\"line\"> </span><br><span class=\"line\">void prog_exit(int signo)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;program recv signal &quot; &lt;&lt; signo &lt;&lt; &quot; to exit.&quot; &lt;&lt; std::endl; </span><br><span class=\"line\"> </span><br><span class=\"line\">\tg_reator.uninit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void daemon_run()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int pid;</span><br><span class=\"line\">    signal(SIGCHLD, SIG_IGN);</span><br><span class=\"line\">    //1）在父进程中，fork返回新创建子进程的进程ID；</span><br><span class=\"line\">    //2）在子进程中，fork返回0；</span><br><span class=\"line\">    //3）如果出现错误，fork返回一个负值；</span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    if (pid &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std:: cout &lt;&lt; &quot;fork error&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        exit(-1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //父进程退出，子进程独立运行</span><br><span class=\"line\">    else if (pid &gt; 0) &#123;</span><br><span class=\"line\">        exit(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //之前parent和child运行在同一个session里,parent是会话（session）的领头进程,</span><br><span class=\"line\">    //parent进程作为会话的领头进程，如果exit结束执行的话，那么子进程会成为孤儿进程，并被init收养。</span><br><span class=\"line\">    //执行setsid()之后,child将重新获得一个新的会话(session)id。</span><br><span class=\"line\">    //这时parent退出之后,将不会影响到child了。</span><br><span class=\"line\">    setsid();</span><br><span class=\"line\">    int fd;</span><br><span class=\"line\">    fd = open(&quot;/dev/null&quot;, O_RDWR, 0);</span><br><span class=\"line\">    if (fd != -1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dup2(fd, STDIN_FILENO);</span><br><span class=\"line\">        dup2(fd, STDOUT_FILENO);</span><br><span class=\"line\">        dup2(fd, STDERR_FILENO);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (fd &gt; 2)</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\t//设置信号处理</span><br><span class=\"line\">\tsignal(SIGCHLD, SIG_DFL);</span><br><span class=\"line\">\tsignal(SIGPIPE, SIG_IGN);</span><br><span class=\"line\">\tsignal(SIGINT, prog_exit);</span><br><span class=\"line\">\tsignal(SIGKILL, prog_exit);</span><br><span class=\"line\">\tsignal(SIGTERM, prog_exit);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tshort port = 0;</span><br><span class=\"line\">\tint ch;</span><br><span class=\"line\">\tbool bdaemon = false;</span><br><span class=\"line\">\twhile ((ch = getopt(argc, argv, &quot;p:d&quot;)) != -1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tswitch (ch)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tcase &#x27;d&#x27;:</span><br><span class=\"line\">\t\t\tbdaemon = true;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\tcase &#x27;p&#x27;:</span><br><span class=\"line\">\t\t\tport = atol(optarg);</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tif (bdaemon)</span><br><span class=\"line\">\t\tdaemon_run();</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">\tif (port == 0)</span><br><span class=\"line\">\t\tport = 12345;</span><br><span class=\"line\"> </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif (!g_reator.init(&quot;0.0.0.0&quot;, 12345))</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tg_reator.main_loop(&amp;g_reator);</span><br><span class=\"line\"> </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整实例代码下载地址：</p>\n<p>普通版本：<a href=\"https://pan.baidu.com/s/1o82Mkno\">https://pan.baidu.com/s/1o82Mkno</a></p>\n<p>C++11版本：<a href=\"https://pan.baidu.com/s/1dEJdrih\">https://pan.baidu.com/s/1dEJdrih</a></p>\n","text":"Reactor模式最近一直在看游双的《高性能Linux服务器编程》一书，下载链接： http://download.csdn.net/detail/analog...","permalink":"/post/转载/高性能服务器框架设计/Reactor模式","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reactor%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">Reactor模式</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】C++高性能服务器网络框架设计细节","uid":"51dbd98ea18bf4e97e2efcaab62e6cec","slug":"转载/高性能服务器框架设计/C++高性能服务器网络框架设计细节","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.402Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/C++高性能服务器网络框架设计细节.json","keywords":null,"cover":null,"text":"C++ 高性能服务器网络框架设计细节这篇文章我们将介绍服务器的开发，并从多个方面探究如何开发一款高性能高并发的服务器程序。需要注意的是一般大型服务器，其复杂程度...","permalink":"/post/转载/高性能服务器框架设计/C++高性能服务器网络框架设计细节","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"47 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】主线程与工作线程的分工","uid":"429b34147de6862baa596a57a6482f88","slug":"转载/高性能服务器框架设计/主线程与工作线程的分工","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.403Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/主线程与工作线程的分工.json","keywords":null,"cover":null,"text":"主线程与工作线程的分工服务器端为了能流畅处理多个客户端链接，一般在某个线程A里面accept新的客户端连接并生成新连接的socket fd，然后将这些新连接的s...","permalink":"/post/转载/高性能服务器框架设计/主线程与工作线程的分工","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}