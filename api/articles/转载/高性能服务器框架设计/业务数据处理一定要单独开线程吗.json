{"title":"【转载】业务数据处理一定要单独开线程吗","uid":"c1e8331f572d9e5ea51efac83edeef24","slug":"转载/高性能服务器框架设计/业务数据处理一定要单独开线程吗","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.888Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/业务数据处理一定要单独开线程吗.json","keywords":null,"cover":[],"content":"<h2 id=\"业务数据处理一定要单独开线程吗\"><a href=\"#业务数据处理一定要单独开线程吗\" class=\"headerlink\" title=\"业务数据处理一定要单独开线程吗\"></a>业务数据处理一定要单独开线程吗</h2><p>在 《<a href=\"http://mp.weixin.qq.com/s?__biz=MzU2MTkwMTE4Nw==&mid=2247487973&idx=2&sn=140004b0dfde45745091ab5c6522dcba&chksm=fc70ea09cb07631f2a06d5be464c3b3c88dc309a16f797f548ec49971ef60b946d2b6e46fcf1&scene=21#wechat_redirect\">one thread one loop 思想</a>》一文我们介绍了一个 loop 的主要结构一般如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (!m_bQuitFlag)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tepoll_or_select_func();</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle_io_events();</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle_other_things();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于一些业务逻辑处理比较简单、不会太耗时的应用来说，<strong>handle_io_events()</strong> 方法除了收发数据也可以直接用来直接做业务的处理，即其结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void handle_io_events()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//收发数据</span><br><span class=\"line\">\trecv_or_send_data();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//解包并处理数据</span><br><span class=\"line\">\tdecode_packages_and_process();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>recv_or_send_data()</strong> 方法中调用 send&#x2F;recv API 进行实际的网络数据收发。以收数据为例，收完数据存入接收缓冲区后，接下来进行解包处理，然后进行业务处理，例如一个登陆数据包，其业务就是验证登陆的账户密码是否正确、记录其登陆行为等等。从程序函数调用堆栈来看，这些业务处理逻辑其实是直接在网络收发数据线程中处理的。我的意思是：网络线程调用 handle_io_events() 方法，handle_io_events() 方法调用 decode_packages_and_process() 方法，decode_packages_and_process() 方法做具体的业务逻辑处理。</p>\n<p>需要注意的是，为了让网络层与业务层脱耦，网络层中通常会提供一些回调函数的接口，这些回调函数我们将其指向具体的业务处理函数。以 libevent 网络库的用法为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstruct event_base *base;</span><br><span class=\"line\">\tstruct evconnlistener *listener;</span><br><span class=\"line\">\tstruct event *signal_event;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstruct sockaddr_in sin;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbase = event_base_new();</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemset(&amp;sin, 0, sizeof(sin));</span><br><span class=\"line\">\tsin.sin_family = AF_INET;</span><br><span class=\"line\">\tsin.sin_port = htons(PORT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t//listener_cb是我们自定义回调函数</span><br><span class=\"line\">\tlistener = evconnlistener_new_bind(base, listener_cb, (void *)base,</span><br><span class=\"line\">\t    LEV_OPT_REUSEABLE|LEV_OPT_CLOSE_ON_FREE, -1,</span><br><span class=\"line\">\t    (struct sockaddr*)&amp;sin,</span><br><span class=\"line\">\t    sizeof(sin));</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!listener) &#123;</span><br><span class=\"line\">\t\tfprintf(stderr, &quot;Could not create a listener!\\n&quot;);</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//signal_cb是我们自定义回调函数</span><br><span class=\"line\">\tsignal_event = evsignal_new(base, SIGINT, signal_cb, (void *)base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!signal_event || event_add(signal_event, NULL)&lt;0) &#123;</span><br><span class=\"line\">\t\tfprintf(stderr, &quot;Could not create/add a signal event!\\n&quot;);</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//启动loop</span><br><span class=\"line\">\tevent_base_dispatch(base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tevconnlistener_free(listener);</span><br><span class=\"line\">\tevent_free(signal_event);</span><br><span class=\"line\">\tevent_base_free(base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;done\\n&quot;);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码根据 libevent 自带的 helloworld 示例修改而来，其中 <strong>listener_cb</strong> 和 <strong>signal_cb</strong> 是自定义的回调函数，有相应的事件触发后，libevent 的事件循环会调用我们设置的回调，在这些回调函数中，我们可以编写自己的业务逻辑代码。</p>\n<p>这种基本的服务器结构，我们可以绘制成如下流程图：</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/bz1.png\"></p>\n<p>这是这个结构的最基本逻辑，在这基础上可以延伸出很多变体。不知道读者有没有发现，上述流程图中第三步解包和业务逻辑处理这一步中（位于 <strong>handle_io_events()</strong> 中的 <strong>decode_packages_and_process()</strong> 方法中），如果业务逻辑处理过程比较耗时（例如，从数据库取大量数据、写文件），那么会导致 网络线程在这个步骤停留时间很长，导致很久以后才能执行下一次循环，影响网络数据的检测和收发，最终导致整个程序的效率低下。</p>\n<p>因此，对于这种情形，我们需要将业务处理逻辑单独拆出来交给另外的业务工作线程处理，业务工作线程可以是一个线程池，这个过程业务数据从网络线程组流向业务线程组。</p>\n<p>这样的程序结构图如下图所示：</p>\n<p><img src=\"/../imgs/bz2.webp\"></p>\n<p>上图中，对于网络线程将业务数据包交给业务线程，可以使用一个共享的业务数据队列来实现，此时网络线程是生产者，业务线程从业务数据队列中取出任务去处理，业务线程是消费者。业务线程处理完成后如果需要将结果数据发出去，则再将数据交给网络线程。这里处理后的数据从业务线程再次流向网络线程，那么如何将数据从业务线程交给网络线程呢？这里以发数据为例，一般有三种方法：</p>\n<p><strong>方法一</strong></p>\n<p>直接调用相应的的发数据的方法，如果你的网络线程本身也会调用这些发数据的方法，那么此时就可能会出现网络线程和业务线程同时对发方法进行调用，相当于多个线程同时调用 socket send 函数，这样可能会导致同一个连接上的数据顺序有问题，此时的做法时，利用锁机制，同一时刻只有一个线程可以调用 socket send 方法。这里给出一段伪代码，假设 TcpConnection 对象表示某路连接，无论网络线程还是业务线程处理完数据后需要发送数据，则使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void TcpConnection::sendData(const std::string&amp; data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//加上锁</span><br><span class=\"line\">\tstd::lock_guard&lt;std::mutex&gt; scoped_lock(m_mutexForConnection);</span><br><span class=\"line\">\t//在这里调用 send</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法一的做法在设计上来说，存在让人不满意的地方，即数据发送应该属于网络层自己的事情，而不是其他模块（这里指的是业务线程）强行抢夺过来越俎代庖。</p>\n<p><strong>方法二</strong></p>\n<p>前面章节介绍了存在定时器结构的情况，网络线程结构变成如下流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (!m_bQuitFlag)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcheck_and_handle_timers();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tepoll_or_select_func();</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle_io_events();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务线程可以将需要发送的数据放入另外一个共享区域中（例如相应的 TcpConnection 对象的一个成员变量中），定时器定时从这个共享区域取出来，再发送出去，这种方案的优点是网络线程做了它该做的事情，缺点是需要添加定时器，让程序逻辑变得复杂，且定时器是每隔一段时间才会触发，发送的数据可能会有一定的延迟。</p>\n<p><strong>方法三</strong></p>\n<p>利用线程执行流中的 <strong>handle_other_things()</strong> 方法，再来看下前面章节中介绍的基本结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (!m_bQuitFlag)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tepoll_or_select_func();</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle_io_events();</span><br><span class=\"line\"></span><br><span class=\"line\">\thandle_other_things();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在《one thread one loop 思想》章节介绍了 <strong>handle_other_things()</strong> 函数可以做一些“其他事情”，这个函数可以在需要执行时通过前面章节介绍的唤醒机制立即被唤醒执行。业务线程将数据放入某个共享区域中（这一步和<strong>方法二</strong>介绍的一样），然后添加 “other_things” ，在 <strong>handle_other_things()</strong> 中执行数据的发送。</p>\n<p>如果读者能清晰明白地看到这里，说明您大致明白了一个不错的服务器框架是怎么回事了。上面介绍的服务器结构是目前主流的基于 Reactor 模式的服务程序的通用结构，例如 libevent、libuv。</p>\n<p>如果读者有兴趣，咱们可以再进一步深入讨论一下。</p>\n<p>实际应用中，很多程序的业务逻辑处理其实是不耗时的，也就是说这些业务逻辑处理速度很快。由于 CPU 核数有限，当线程数量超过 CPU 数量时，各个线程（网络线程和业务线程）也不是真正地并行执行，那么即使开了一组业务线程也不一定能真正地并发执行，而业务逻辑处理并不耗时，不会影响网络线程的执行效率，那么我们不如就在网络线程里面直接处理。</p>\n<p>上文介绍了在 handle_io_events() 方法中直接处理，如果处理的业务逻辑会产生新的其他任务，那么我们可以投递 “other_things”，最终交给 <strong>handle_other_things()</strong> 方法来处理。此时的服务器程序结构如下：</p>\n<p>特别说明一下：这种方式仅限于 handle_io_events() 或 handle_other_things() 里面不会有耗时的逻辑，才可以替代专门开业务线程，如果有耗时操作还得老老实实单独开业务线程。虽然线程数量超过 CPU 数量时，各个线程不会得到真正的并行，但那是操作系统线程调度的事情了，应用层开发不必关心这点。</p>\n","text":"业务数据处理一定要单独开线程吗在 《one thread one loop 思想》一文我们介绍了一个 loop 的主要结构一般如下所示： 12345678whi...","permalink":"/post/转载/高性能服务器框架设计/业务数据处理一定要单独开线程吗","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%9A%E5%8A%A1%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B8%80%E5%AE%9A%E8%A6%81%E5%8D%95%E7%8B%AC%E5%BC%80%E7%BA%BF%E7%A8%8B%E5%90%97\"><span class=\"toc-text\">业务数据处理一定要单独开线程吗</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】libevent源码深度剖析13","uid":"467347dafd8ded07c13ba37241779bf0","slug":"转载/libevent/libevent源码深度剖析13","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.362Z","comments":true,"path":"api/articles/转载/libevent/libevent源码深度剖析13.json","keywords":null,"cover":[],"text":"libevent源码深度剖析13libevent信号处理注意点 前面讲到了 libevent 实现多线程的方法，然而在多线程的环境中注册信号事件，还是有一些情况...","permalink":"/post/转载/libevent/libevent源码深度剖析13","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"libevent","slug":"libevent","count":13,"path":"api/tags/libevent.json"},{"name":"源码解析","slug":"源码解析","count":13,"path":"api/tags/源码解析.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】C++高性能服务器网络框架设计细节","uid":"51dbd98ea18bf4e97e2efcaab62e6cec","slug":"转载/高性能服务器框架设计/C++高性能服务器网络框架设计细节","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.402Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/C++高性能服务器网络框架设计细节.json","keywords":null,"cover":null,"text":"C++ 高性能服务器网络框架设计细节这篇文章我们将介绍服务器的开发，并从多个方面探究如何开发一款高性能高并发的服务器程序。需要注意的是一般大型服务器，其复杂程度...","permalink":"/post/转载/高性能服务器框架设计/C++高性能服务器网络框架设计细节","photos":[],"count_time":{"symbolsCount":"52k","symbolsTime":"47 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}