{"title":"【转载】libevent源码深度剖析03","uid":"dd54cd62e1387361117c63cf12445709","slug":"转载/libevent/libevent源码深度剖析03","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.340Z","comments":true,"path":"api/articles/转载/libevent/libevent源码深度剖析03.json","keywords":null,"cover":[],"content":"<h1 id=\"libevent源码深度剖析03\"><a href=\"#libevent源码深度剖析03\" class=\"headerlink\" title=\"libevent源码深度剖析03\"></a>libevent源码深度剖析03</h1><h3 id=\"libevent基本使用场景和事件流程\"><a href=\"#libevent基本使用场景和事件流程\" class=\"headerlink\" title=\"libevent基本使用场景和事件流程\"></a>libevent基本使用场景和事件流程</h3><h3 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h3><p>学习源代码该从哪里入手？我觉得从程序的基本使用场景和代码的整体处理流程入手是个不错的方法，至少从个人的经验上讲，用此方法分析libevent是比较有效的。</p>\n<h3 id=\"2-基本应用场景\"><a href=\"#2-基本应用场景\" class=\"headerlink\" title=\"2. 基本应用场景\"></a>2. 基本应用场景</h3><p>基本应用场景也是使用libevnet的基本流程，下面来考虑一个最简单的场景，使用livevent设置定时器，应用程序只需要执行下面几个简单的步骤即可。<br>1）首先初始化libevent库，并保存返回的指针</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct event_base* base = event_init();</span><br></pre></td></tr></table></figure>\n\n<p>实际上这一步相当于初始化一个Reactor实例；在初始化libevent后，就可以注册事件了。</p>\n<p>2）初始化事件event，设置回调函数和关注的事件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evtimer_set(&amp;ev, timer_cb, NULL);</span><br></pre></td></tr></table></figure>\n\n<p>事实上这等价于调用 <code>event_set(&amp;ev, -1, 0, timer_cb, NULL);</code><br>event_set的函数原型是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void event_set(struct event *ev, int fd, short event, void (*cb)(int, short, void *), void *arg)</span><br></pre></td></tr></table></figure>\n\n<p>ev：执行要初始化的event对象；<br>fd：该event绑定的“句柄”，对于信号事件，它就是关注的信号；<br>event：在该fd上关注的事件类型，它可以是<strong>EV_READ, EV_WRITE, EV_SIGNAL</strong>；<br>cb：这是一个函数指针，当fd上的事件event发生时，调用该函数执行处理，它有三个参数，调用时由<strong>event_base</strong>负责传入，按顺序，实际上就是event_set时的fd, event和arg；<br>arg：传递给cb函数指针的参数；<br>由于定时事件不需要fd，并且定时事件是根据添加时<strong>（event_add）</strong>的超时值设定的，因此这里event也不需要设置。<br>这一步相当于初始化一个<strong>event handler</strong>，在libevent中事件类型保存在event结构体中。<br>注意：libevent并不会管理event事件集合，这需要应用程序自行管理；</p>\n<p>3）设置event从属的event_base</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_base_set(base, &amp;ev); </span><br></pre></td></tr></table></figure>\n\n<p>这一步相当于指明event要注册到哪个event_base实例上；</p>\n<p>4）是正式的添加事件的时候了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_add(&amp;ev, timeout);</span><br></pre></td></tr></table></figure>\n\n<p>基本信息都已设置完成，只要简单的调用**event_add()<strong>函数即可完成，其中timeout是定时值；<br>这一步相当于调用</strong>Reactor::register_handler()**函数注册事件。</p>\n<p>5）程序进入无限循环，等待就绪事件并执行事件处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_base_dispatch(base);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实例代码\"><a href=\"#3-实例代码\" class=\"headerlink\" title=\"3. 实例代码\"></a>3. 实例代码</h3><p>上面例子的程序代码如下所示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct event ev;</span><br><span class=\"line\">struct timeval tv;</span><br><span class=\"line\">void time_cb(int fd, short event, void *argc)&#123;</span><br><span class=\"line\">    printf(&quot;timer wakeup/n&quot;);</span><br><span class=\"line\">    event_add(&amp;ev, &amp;tv); // reschedule timer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    struct event_base *base = event_init();</span><br><span class=\"line\">    tv.tv_sec = 10; // 10s period</span><br><span class=\"line\">    tv.tv_usec = 0;</span><br><span class=\"line\">    evtimer_set(&amp;ev, time_cb, NULL);</span><br><span class=\"line\">    event_add(&amp;ev, &amp;tv);</span><br><span class=\"line\">    event_base_dispatch(base);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-事件处理流程\"><a href=\"#4-事件处理流程\" class=\"headerlink\" title=\"4. 事件处理流程\"></a>4. 事件处理流程</h3><p>当应用程序向libevent注册一个事件后，libevent内部是怎么样进行处理的呢？下面的图就给出了这一基本流程。<br>1）首先应用程序准备并初始化event，设置好事件类型和回调函数；这对应于前面第步骤2和3；<br>2）向libevent添加该事件event。对于定时事件，libevent使用一个小根堆管理，key为超时时间；对于Signal和I&#x2F;O事件，libevent将其放入到等待链表（wait list）中，这是一个双向链表结构；<br>3）程序调用**event_base_dispatch()**系列函数进入无限循环，等待事件，以select()函数为例；每次循环前libevent会检查定时事件的最小超时时间tv，根据tv设置select()的最大等待时间，以便于后面及时处理超时事件；<br>当select()返回后，首先检查超时事件，然后检查I&#x2F;O事件；<br>Libevent将所有的就绪事件，放入到激活链表中；<br>然后对激活链表中的事件，调用事件的回调函数执行事件处理；<br> <img src=\"/../imgs/libevent3.webp\"></p>\n<h3 id=\"5-小结\"><a href=\"#5-小结\" class=\"headerlink\" title=\"5. 小结\"></a>5. 小结</h3><p>本节介绍了libevent的简单实用场景，并旋风般的介绍了libevent的事件处理流程，读者应该对libevent有了基本的印象，下面将会详细介绍libevent的事件管理框架（Reactor模式中的Reactor框架）做详细的介绍，在此之前会对源代码文件做简单的分类。</p>\n","text":"libevent源码深度剖析03libevent基本使用场景和事件流程1. 前言学习源代码该从哪里入手？我觉得从程序的基本使用场景和代码的整体处理流程入手是个不...","permalink":"/post/转载/libevent/libevent源码深度剖析03","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"libevent","slug":"libevent","count":13,"path":"api/tags/libevent.json"},{"name":"源码解析","slug":"源码解析","count":13,"path":"api/tags/源码解析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#libevent%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%9003\"><span class=\"toc-text\">libevent源码深度剖析03</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#libevent%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">libevent基本使用场景和事件流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">1. 前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2. 基本应用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">3. 实例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4. 事件处理流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">5. 小结</span></a></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】libevent源码深度剖析02","uid":"0b2fd1ebe4476d5c0bbc97c748eb6d3b","slug":"转载/libevent/libevent源码深度剖析02","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.340Z","comments":true,"path":"api/articles/转载/libevent/libevent源码深度剖析02.json","keywords":null,"cover":[],"text":"libevent源码深度剖析02Reactor模式 前面讲到，整个libevent本身就是一个Reactor，因此本节将专门对Reactor模式进行必要的介绍，...","permalink":"/post/转载/libevent/libevent源码深度剖析02","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"libevent","slug":"libevent","count":13,"path":"api/tags/libevent.json"},{"name":"源码解析","slug":"源码解析","count":13,"path":"api/tags/源码解析.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】libevent源码深度剖析04","uid":"21cc3849aa98d79b1da8af8304100d2a","slug":"转载/libevent/libevent源码深度剖析04","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.341Z","comments":true,"path":"api/articles/转载/libevent/libevent源码深度剖析04.json","keywords":null,"cover":null,"text":"libevent源码深度剖析041. 前言详细分析源代码之前，如果能对其代码文件的基本结构有个大概的认识和分类，对于代码的分析将是大有裨益的。本节内容不多，我想...","permalink":"/post/转载/libevent/libevent源码深度剖析04","photos":[],"count_time":{"symbolsCount":935,"symbolsTime":"1 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"libevent","slug":"libevent","count":13,"path":"api/tags/libevent.json"},{"name":"源码解析","slug":"源码解析","count":13,"path":"api/tags/源码解析.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}