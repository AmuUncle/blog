{"title":"【转载】Linuxtcpdump使用介绍","uid":"6f9f848d419f584cbff23ed4ace411b4","slug":"转载/学习资料/Linuxtcpdump使用介绍","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:27.041Z","comments":true,"path":"api/articles/转载/学习资料/Linuxtcpdump使用介绍.json","keywords":null,"cover":[],"content":"<h2 id=\"Linux-tcpdump-使用介绍\"><a href=\"#Linux-tcpdump-使用介绍\" class=\"headerlink\" title=\"Linux tcpdump 使用介绍\"></a>Linux tcpdump 使用介绍</h2><p><strong>tcpdump</strong> 是 Linux 系统提供一个非常强大的抓包工具，熟练使用它，对我们排查网络问题非常有用。如果你的机器上还没有安装，可以使用如下命令安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tcpdump</span><br></pre></td></tr></table></figure>\n\n<p>如果要使用 <strong>tcpdump</strong> 命令必须具有 <strong>sudo</strong> 权限。</p>\n<p><strong>tcpdump</strong> 常用的选项有：</p>\n<ul>\n<li><p><strong>-i</strong> 指定要捕获的目标网卡名，网卡名可以使用前面章节中介绍的 <strong>ifconfig</strong> 命令获得；如果要抓所有网卡的上的包，可以使用 <strong>any</strong> 关键字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 抓取网卡ens33上的包</span><br><span class=\"line\">tcpdump -i ens33</span><br><span class=\"line\">## 抓取所有网卡上的包</span><br><span class=\"line\">tcpdump -i any</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>-X</strong> 以 ASCII 和十六进制的形式输出捕获的数据包内容，减去链路层的包头信息；**-XX** 以 ASCII 和十六进制的形式输出捕获的数据包内容，包括链路层的包头信息。</p>\n</li>\n<li><p><strong>-n</strong> 不要将 ip 地址显示成别名的形式；**-nn** 不要将 ip 地址和端口以别名的形式显示。</p>\n</li>\n<li><p><strong>-S</strong> 以绝对值显示包的 ISN 号（包序列号），默认以上一包的偏移量显示。</p>\n</li>\n<li><p><strong>-vv</strong> 抓包的信息详细地显示；**-vvv** 抓包的信息更详细地显示。</p>\n</li>\n<li><p><strong>-w</strong> 将抓取的包的原始信息（不解析，也不输出）写入文件中，后跟文件名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i any -w filename  </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>-r</strong> 从利用 <strong>-w</strong> 选项保存的包文件中读取数据包信息。</p>\n</li>\n</ul>\n<p>除了可以使用选项以外，<strong>tcpdump</strong> 还支持各种数据包过滤的表达式，常见的形式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 仅显示经过端口 8888 上的数据包（包括tcp:8888和udp:8888）</span><br><span class=\"line\">tcpdump -i any &#x27;port 8888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">## 仅显示经过端口是 tcp:8888 上的数据包</span><br><span class=\"line\">tcpdump -i any &#x27;tcp port 8888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">## 仅显示从源端口是 tcp:8888 的数据包</span><br><span class=\"line\">tcpdump -i any &#x27;tcp src port 8888&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">## 仅显示源端口是 tcp:8888 或目标端口是 udp:9999 的包 </span><br><span class=\"line\">tcpdump -i any &#x27;tcp src port 8888 or udp dst port 9999&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">## 仅显示地址是127.0.0.1 且源端口是 tcp:9999 的包 ，以 ASCII 和十六进制显示详细输出，</span><br><span class=\"line\">## 不显示 ip 地址和端口号的别名</span><br><span class=\"line\">tcpdump -i any &#x27;src host 127.0.0.1 and tcp src port 9999&#x27; -XX -nn -vv</span><br></pre></td></tr></table></figure>\n\n<p>下面我们通过三个具体的操作实例来演示一下使用 <strong>tcpdump</strong> 的抓包过程。</p>\n<p><strong>实例一 ：连接一个正常的侦听端口</strong></p>\n<p>假设我的服务器端的地址是 <strong>127.0.0.0.1:12345</strong>，使用 nc 命令在一个 shell 窗口创建一个服务器程序并在这个地址上进行侦听。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc –v -l 127.0.0.0.112345</span><br></pre></td></tr></table></figure>\n\n<p>效果如下图所示：</p>\n<p><img src=\"/../imgs/tcpdump1.webp\"></p>\n<p>在另外一个 shell 窗口开启 tcpdump 抓包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i any &#x27;port 12345&#x27; -XX -nn -vv</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/../imgs/tcpdump2.webp\"></p>\n<p>然后再开一个 shell 窗口，利用 nc 命令创建一个客户端去连接服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -v 127.0.0.1 12345</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/../imgs/tcpdump3.webp\"></p>\n<p>我们抓到的包如下：</p>\n<p><img src=\"/../imgs/tcpdump4.webp\"></p>\n<p>由于我们没有在客户端和服务器之间发送任何消息，其实抓到的包就是 TCP 连接的三次握手数据包，分析如下：</p>\n<p>三次握手过程是客户端先给服务器发送一个 <strong>SYN</strong>，然后服务器应答一个 <strong>SYN + ACK</strong>，应答的序列号是递增 <strong>1</strong> 的，表示应答哪个请求，即从 <strong>4004096087</strong> 递增到 <strong>4004096088</strong>，接着客户端再应答一个 <strong>ACK</strong>。这个时候，我们发现发包序列号和应答序列号都变成 <strong>1</strong>了，这是 tcpdump 使用相对序号，我们加上 <strong>-S</strong> 选项后就变成绝对序列号了。</p>\n<p>我们按 Ctrl + C 中断 tcpdump 抓包过程，并停止用 nc 开启的客户端和服务器程序，然后在前面的 tcpdump 命令后面加上 <strong>-S</strong> 选项重新开启抓包，使用命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i any &#x27;port 12345&#x27; -XX -nn -vv -S</span><br></pre></td></tr></table></figure>\n\n<p>然后再按顺序用 nc 命令再次启动下服务器和客户端程序。再次得到抓包结果：</p>\n<p><img src=\"/../imgs/tcpdump5.webp\"></p>\n<p>这次得到的包的序号就是绝对序号了。</p>\n<p><strong>实例二：连接一个不存在的侦听端口</strong></p>\n<p><strong>实例一</strong>演示的是正常的 TCP 连接三次握手过程捕获到的数据包。假如我们连接的<strong>服务器 ip 地址存在</strong>，但<strong>监听端口号不存在</strong>，我们看下 tcpdump 抓包结果。除了在一个 shell 窗口启动一个 tcpdump 抓包监测，在另外一个 shell 窗口用 nc 命令去连接一个不存在的侦听端口即可。</p>\n<p><img src=\"/../imgs/tcpdump6.webp\"></p>\n<p>抓包数据如下：</p>\n<p><img src=\"/../imgs/tcpdump7.webp\"></p>\n<p>这个时候客户端发送 <strong>SYN</strong>，服务器应答 <strong>ACK+RST</strong>，这个应答包会导致客户端的 connect 连接失败返回。</p>\n<p><strong>实例三：连接一个很遥远的 ip，或者网络繁忙的情形</strong></p>\n<p>实际情形中，还存在一种情况就是客户端访问一个很遥远的 ip，或者网络繁忙，服务器对客户端发送的 TCP 三次握手的网络 SYN 报文没有应答，会出现什么情况呢？</p>\n<p>我们通过设置防火墙规则来模拟一下这种情况。使用 <strong>iptables -F</strong> 先将防火墙的已有规则都清理掉，然后给防火墙的 INPUT 链上增加一个规则：丢弃本地网卡 lo（也就是 127.0.0.1 这个回环地址）上的所有 SYN 包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables -I INPUT -p tcp --syn -i lo -j DROP</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/tcpdump8.png\"></p>\n<blockquote>\n<p>如果读者对 CentOS 的防火墙 iptables 命令有兴趣，可以使用 man iptables 在 man 手册中查看更详细的帮助。</p>\n</blockquote>\n<p>在开启 tcpdump 抓包之后和设置防火墙规则之后，利用 nc 命令去连接 127.0.0.1:12345 这个地址。整个过程操作效果图如下：</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/tcpdump9.png\"></p>\n<p>接着，我们得到 tcpdump 抓到的数据包如下：</p>\n<p><img src=\"/../imgs/tcpdump10.webp\"></p>\n<p>通过抓包数据我们可以看到：如果连接不上，一共重试了 <strong>5</strong> 次，重试的时间间隔是 1 秒，2秒，4秒，8秒，16秒，最后返回超时失败。这个重试次数在 <strong>&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_syn_retries</strong> 内核参数中设置，默认为 <strong>6</strong> 。</p>\n<blockquote>\n<p>TCP 四次挥手与三次握手基本上类似，这里就不贴出 tcpdump 抓包的详情了，强烈建议不熟悉这块的读者实际练习一遍。</p>\n</blockquote>\n","text":"Linux tcpdump 使用介绍tcpdump 是 Linux 系统提供一个非常强大的抓包工具，熟练使用它，对我们排查网络问题非常有用。如果你的机器上还没有...","permalink":"/post/转载/学习资料/Linuxtcpdump使用介绍","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux-tcpdump-%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Linux tcpdump 使用介绍</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】高性能服务器架构设计总结","uid":"10a9cf5937dc7bc9f3410b780f114a73","slug":"转载/高性能服务器框架设计/高性能服务器架构设计总结","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.407Z","comments":true,"path":"api/articles/转载/高性能服务器框架设计/高性能服务器架构设计总结.json","keywords":null,"cover":[],"text":"高性能服务器架构设计总结系列目录 第01篇 主线程与工作线程的分工 第02篇 Reactor模式 第03篇 一个服务器程序的架构介绍 第04篇 如何将socke...","permalink":"/post/转载/高性能服务器框架设计/高性能服务器架构设计总结","photos":[],"count_time":{"symbolsCount":"62k","symbolsTime":"57 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"高性能服务器框架设计","slug":"高性能服务器框架设计","count":10,"path":"api/tags/高性能服务器框架设计.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】Linux网络故障排查的瑞士军刀","uid":"e29cafb5ee3b6ecc425a0d63d3989d66","slug":"转载/学习资料/Linux网络故障排查的瑞士军刀","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:27.041Z","comments":true,"path":"api/articles/转载/学习资料/Linux网络故障排查的瑞士军刀.json","keywords":null,"cover":[],"text":"Linux 网络故障排查的瑞士军刀nc 即 netcat 命令，这个工具在排查网络故障时非常有用，功能非常强大，因而被业绩称为网络界的“瑞士军刀”，请读者务必掌...","permalink":"/post/转载/学习资料/Linux网络故障排查的瑞士军刀","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}