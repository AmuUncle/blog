{"title":"【转载】Linux网络故障排查的瑞士军刀","uid":"e29cafb5ee3b6ecc425a0d63d3989d66","slug":"转载/学习资料/Linux网络故障排查的瑞士军刀","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:27.041Z","comments":true,"path":"api/articles/转载/学习资料/Linux网络故障排查的瑞士军刀.json","keywords":null,"cover":[],"content":"<h2 id=\"Linux-网络故障排查的瑞士军刀\"><a href=\"#Linux-网络故障排查的瑞士军刀\" class=\"headerlink\" title=\"Linux 网络故障排查的瑞士军刀\"></a>Linux 网络故障排查的瑞士军刀</h2><p><strong>nc</strong> 即 <strong>n</strong>et<strong>c</strong>at 命令，这个工具在排查网络故障时非常有用，功能非常强大，因而被业绩称为网络界的“瑞士军刀”，请读者务必掌握。默认系统是没有这个命令的，你需要安装一下，安装方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nc</span><br></pre></td></tr></table></figure>\n\n<p><strong>nc</strong> 命令常见的用法是模拟一个服务器程序被其他客户端连接，或者模拟一个客户端连接其他服务器，连接之后就可以进行数据收发。我们来逐一介绍一下：</p>\n<ul>\n<li><p><strong>模拟一个服务器程序</strong></p>\n<p>使用 <strong>-l</strong> 选项（单词 <strong>l</strong>isten 的第一个字母）在某个 ip 地址和端口号上开启一个侦听服务，以便让其他客户端连接。通常为了显示更详细的信息，会带上 <strong>-v</strong> 选项。</p>\n<p>示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ238vnojlyZ ~]# nc -v -l 127.0.0.1 6000</span><br><span class=\"line\">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class=\"line\">Ncat: Listening on 127.0.0.1:6000</span><br></pre></td></tr></table></figure>\n\n<p>这样就在 <strong>6000</strong> 端口开启了一个侦听服务器，我们可以通过 <strong>127.0.0.1:6000</strong> 去连接上去；如果你的机器可以被外网访问，你可以使用 <strong>0.0.0.0</strong> 这样的侦听地址，示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ238vnojlyZ ~]# nc -v -l 0.0.0.0 6000</span><br><span class=\"line\">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class=\"line\">Ncat: Listening on 0.0.0.0:6000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>模拟一个客户端程序</p>\n<p>用 <strong>nc</strong> 命令模拟一个客户端程序时，我们不需要使用 <strong>-l</strong> 选项，直接写上 ip 地址（或域名，<strong>nc</strong> 命令可以自动解析域名）和端口号即可，示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 连接百度 web 服务器</span><br><span class=\"line\">[root@iZ238vnojlyZ ~]# nc -v www.baidu.com 80</span><br><span class=\"line\">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class=\"line\">Ncat: Connected to 115.239.211.112:80.</span><br></pre></td></tr></table></figure>\n\n<p>输出提示我们成功连接上百度 Web 服务器。</p>\n</li>\n</ul>\n<p>我们知道客户端连接服务器一般都是操作系统随机分配一个可用的端口号连接到服务器上去，使用 <strong>nc</strong> 命令作为客户端时可以使用 <strong>-p</strong> 选项指定使用哪个端口号连接服务器，例如，我们希望通过本地 5555 端口连接百度的 Web 服务器，可以这么输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ238vnojlyZ ~]# nc -v -p 5555 www.baidu.com 80</span><br><span class=\"line\">Ncat: Version 6.40 ( http://nmap.org/ncat )</span><br><span class=\"line\">Ncat: Connected to 115.239.211.112:80.</span><br></pre></td></tr></table></figure>\n\n<p>再开一个 shell 窗口，我们使用上文中介绍的 <strong>lsof</strong> 命令验证一下，是否确实通过 <strong>5555</strong> 端口连接上了百度 Web 服务器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ238vnojlyZ ~]# lsof -Pni | grep nc</span><br><span class=\"line\">nc        32610    root    3u  IPv4 113369437      0t0  TCP 120.55.94.78:5555-&gt;115.239.211.112:80 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n\n<p>结果确实如我们所期望的。</p>\n<p>当然，当使用 <strong>nc</strong> 命令与对端建立连接后，我们可以发送消息。下面通过一个具体的例子来演示一下这个过程</p>\n<ol>\n<li>使用 <strong>nc -v -l 0.0.0.0 6000</strong> 模拟一个侦听服务，再新建一个 shell 窗口利用 <strong>nc -v 127.0.0.1 6000</strong> 模拟一个客户端程序连接刚才的服务器。</li>\n<li>此时在客户端和服务器就可以相互发消息了。我们可以达到一个简化版的 IM 软件聊天效果：</li>\n</ol>\n<p><strong>客户端效果：</strong></p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/nc1.png\"></p>\n<p><strong>服务器端效果：</strong></p>\n<p><img src=\"/../imgs/nc2.jpeg\"></p>\n<blockquote>\n<p>果你在使用 nc 命令发消息时不小心输入错误，可以使用 <strong>Ctrl + Backspace</strong> 键删除。</p>\n</blockquote>\n<p><strong>nc</strong> 命令默认会将 <strong>\\n</strong> 作为每条消息的结束标志，如果你指定了 <strong>-C</strong> 选项，将会使用 <strong>\\r\\n</strong> 作为消息结束标志。</p>\n<p><strong>nc</strong> 命令不仅可以发消息，同时也能发文件。我们也来演示一下：</p>\n<p>需要注意的是是<strong>接收文件的一方是服务器端，发送文件的一方是客户端</strong>。</p>\n<ol>\n<li><p>服务器端命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l ip地址 端口号 &gt; 接收的文件名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc ip地址 端口号 &lt; 发送的文件名</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>服务器端效果</strong>：</p>\n<p><img src=\"/../imgs/nc3.jpeg\" alt=\"img\"></p>\n<p><strong>客户端效果：</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/ic8RqseyjxMM4O9PrQeYEZ96kC0aP9fXq02fwwzmOXVibyIyH5Qa4Sc7BMZrOBjibg4wibnWmdFalicBMXpNicR3MOjA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<blockquote>\n<p>意：这里客户端发送一个文件叫 <strong>index.html</strong>，服务器端以文件名 <strong>xxx.html</strong> 来保存，也就是说服务器端保存接收的文件名时不一定要使用客户端发送的文件名。</p>\n</blockquote>\n<p>根据上面的介绍，当我们需要调试我们自己的服务器或者客户端程序时，又不想自己开发相应的对端，我们就可以使用 <strong>nc</strong> 命令去模拟。</p>\n<p>当然，<strong>nc</strong> 命令非常强大，其功能远非本节介绍的这些，读者如果有兴趣可以去 <strong>nc</strong> 的 man 手册上获取更多的信息。</p>\n","text":"Linux 网络故障排查的瑞士军刀nc 即 netcat 命令，这个工具在排查网络故障时非常有用，功能非常强大，因而被业绩称为网络界的“瑞士军刀”，请读者务必掌...","permalink":"/post/转载/学习资料/Linux网络故障排查的瑞士军刀","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux-%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E7%9A%84%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80\"><span class=\"toc-text\">Linux 网络故障排查的瑞士军刀</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】Linuxtcpdump使用介绍","uid":"6f9f848d419f584cbff23ed4ace411b4","slug":"转载/学习资料/Linuxtcpdump使用介绍","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:27.041Z","comments":true,"path":"api/articles/转载/学习资料/Linuxtcpdump使用介绍.json","keywords":null,"cover":[],"text":"Linux tcpdump 使用介绍tcpdump 是 Linux 系统提供一个非常强大的抓包工具，熟练使用它，对我们排查网络问题非常有用。如果你的机器上还没有...","permalink":"/post/转载/学习资料/Linuxtcpdump使用介绍","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】从抓包的角度分析connect函数的连接过程","uid":"c9d344dfed244a58bff8099c6790dfe5","slug":"转载/学习资料/从抓包的角度分析connect函数的连接过程","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.995Z","comments":true,"path":"api/articles/转载/学习资料/从抓包的角度分析connect函数的连接过程.json","keywords":null,"cover":[],"text":"从抓包的角度分析connect()函数的连接过程这篇文章主要是从tcp连接建立的角度来分析客户端程序如何利用connect函数和服务端程序建立tcp连接的，了解...","permalink":"/post/转载/学习资料/从抓包的角度分析connect函数的连接过程","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}