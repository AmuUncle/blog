{"title":"【转载】从抓包的角度分析connect函数的连接过程","uid":"c9d344dfed244a58bff8099c6790dfe5","slug":"转载/学习资料/从抓包的角度分析connect函数的连接过程","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:26.995Z","comments":true,"path":"api/articles/转载/学习资料/从抓包的角度分析connect函数的连接过程.json","keywords":null,"cover":[],"content":"<h2 id=\"从抓包的角度分析connect-函数的连接过程\"><a href=\"#从抓包的角度分析connect-函数的连接过程\" class=\"headerlink\" title=\"从抓包的角度分析connect()函数的连接过程\"></a>从抓包的角度分析connect()函数的连接过程</h2><p>这篇文章主要是从<strong>tcp</strong>连接建立的角度来分析客户端程序如何利用<strong>connect</strong>函数和服务端程序建立tcp连接的，了解<strong>connect</strong>函数在建立连接的过程中底层协议栈做了哪些事情。</p>\n<h3 id=\"tcp三次握手\"><a href=\"#tcp三次握手\" class=\"headerlink\" title=\"tcp三次握手\"></a>tcp三次握手</h3><p>在正式介绍connect函数时，我们先来看一下tcp三次握手的过程，下面这个实验是客户端通过telnet远程登录服务端的例子，telnet协议是基于tcp协议，我们可以通过<strong>wireshark</strong>抓包工具看到客户端和服务端之间三次握手的过程，<strong>12.1.1.1</strong>是客户端的ip地址，<strong>12.1.1.2</strong>是服务端的ip地址。</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/connect1.png\"></p>\n<p>下面是我们通过<strong>wireshark</strong>抓取到的tcp三次握手的数据包：</p>\n<p><img src=\"/../imgs/connect2.webp\"></p>\n<p>我们看到客户端远程登录服务端时，首先发送了一个<strong>SYN</strong>报文，其中目标端口为<strong>23</strong>（远程登录telnet协议使用23端口），初始序号<strong>seq &#x3D; 0</strong>，并设置自己的窗口<strong>rwnd &#x3D; 4128</strong>（rwnd是一个对端通告的接收窗口，用于流量控制）<strong>。</strong></p>\n<p>然后服务端回复了一个<strong>SYN + ACK</strong>报文，初始序号<strong>seq &#x3D; 0</strong>，<strong>ack &#x3D; 1（在前一个包的seq基础上加1）</strong>，同时也设置自己的窗口<strong>rwnd &#x3D; 4128</strong>。</p>\n<p>然后客户端收到服务端的<strong>SYN + ACK</strong>报文时，回复了一个<strong>ACK</strong>报文，表示确认建立tcp连接，序号为<strong>seq &#x3D; 1</strong>， **ack &#x3D; 1**（在前一个包的seq基础上加1）*<em><strong>， 设置窗口</strong>rwnd &#x3D; 4128</em>*，此时客户端和服务端之间已经建立tcp连接。</p>\n<h3 id=\"connect函数\"><a href=\"#connect函数\" class=\"headerlink\" title=\"connect函数\"></a>connect函数</h3><p>前面我们在介绍tcp三次握手的时候说过，客户端在跟服务端建立tcp连接时，通常是由客户端主动向目标服务端发起tcp连接建立请求，服务端被动接受tcp连接请求；同时服务端也会发起tcp连接建立请求，表示服务端希望和客户端建立连接，然后客户端会接受连接并发送一个确认，这样双方就已经建立好连接，可以开始通信。</p>\n<p>这里说明一下：可能有的小伙伴会感到疑惑，为啥服务端也要跟客户端建立连接呢？其实这跟tcp采用全双工通信的方式有关。对于全双工通信，简单来说就是两端可以同时收发数据，如下图所示：</p>\n<p><img src=\"/../imgs/connect3.webp\"></p>\n<p>我们再回到正题，那么在网络编程中，肯定也有对应的函数做到跟上面一样的事情，没错，就是connect（连接）。顾名思义，connect函数就是用于客户端程序和服务端程序建立tcp连接的。</p>\n<p>一般来说，客户端使用connect函数跟服务端建立连接，肯定要指定一个ip地址和端口号（相当于客户端的身份标识），要不然服务端都不知道你是谁？凭什么跟你建立连接。同时还得指明服务端的ip地址和端口号，也就是说，你要跟谁建立连接。</p>\n<p><strong>connect</strong>函数原型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：<br><strong>sockfd</strong>：客户端的套接字文件描述符<br><strong>addr</strong>：要连接的套接字地址，这是一个传入参数，指定了要连接的套接字地址信息（例如IP地址和端口号）<br><strong>addrlen</strong>：是一个传入参数，参数addr的大小，即sizeof(addr)</p>\n<p><strong>返回值说明</strong>：连接建立成功返回0，失败返回-1并设置errno</p>\n<p>connect函数在建立tcp连接的过程中用到了一个非常重要的队列，那就是未决连接队列，这个队列用来管理tcp的连接，包括已完成三次握手的tcp连接和未完成三次握手的tcp连接，下面我们就来详细介绍一下未决连接队列。</p>\n<p><strong>未决连接队列</strong><br>未决连接队列是指服务器接收到客户端的连接请求，但是<strong>尚未被处理</strong>（也就是未被<strong>accept</strong>，后面会说）的连接，可以理解为未决连接队列是一个容器，这个容器存储着这些尚未被处理的链接。</p>\n<p>当一个客户端进程使用 connect 函数发起请求后，服务器进程就会收到连接请求，然后检查未决连接队列是否有空位，如果未决队列满了，就会拒绝连接，那么客户端调用的connect 函数返回失败。</p>\n<p>如果未决连接队列有空位，就将该连接加入未决连接队列。<strong>当 connect 函数成功返回后，表明tcp的“三次握手”连接已完成，此时accept函数获取到一个客户端连接并返回。</strong></p>\n<p><img src=\"/../imgs/connect4.webp\"></p>\n<p>在上图中，在未决连接队列中又分为2个队列：</p>\n<p><strong>未完成队列（未决队列）</strong>：即客户端已经发出SYN报文并到达服务器，但是在tcp三次握手连接完成之前，这些套接字处于SYN_RCVD状态，服务器会将这些套接字加入到未完成队列。</p>\n<p><strong>已完成队列</strong>：即刚刚完成tcp三次握手的tcp连接，这些套接字处于ESTABLISHED状态，服务器会将这些套接字加入到已完成队列。</p>\n<p>我们来看一下连接建立的具体过程，如图所示：</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/connect5.png\"></p>\n<p>服务端首先调用<strong>listen</strong>函数监听客户端的连接请求，然后调用<strong>accept</strong>函数阻塞等待取出未决连接队列中的客户端连接，如果未决连接队列一直为空，这意味着没有客户端和服务器建立连接，那么<strong>accept</strong>就会一直阻塞。</p>\n<p>当客户端一调用<strong>connect</strong>函数发起连接时，如果完成tcp三次握手，那么<strong>accept</strong>函数会取出一个客户端连接（注意：是已经建立好的连接）然后立即返回。</p>\n<p>上面就是客户端和服务端在网络中的状态变迁的具体过程，前面我们在学习tcp三次握手的过程中还知道，服务端和客户端在建立连接的时候会设置自己的一个接收缓冲区窗口rwnd的大小。</p>\n<p>服务端在发送SYN + ACK数据报文时会设置并告知对方自己的接收缓冲区窗口大小，客户端在发送ACK数据报文时也会设置并告知对方自己的接收缓冲区窗口大小。</p>\n<p>注意，accept函数调用成功，返回的是一个已经完成tcp三次握手的客户端连接。如果在三次握手的过程中(最后一步)，服务端没有接收到客户端的ACK，则说明三次握手还没有建立完成，accept函数依然会阻塞。</p>\n<p>关于tcp三次握手连接建立的几种状态：<strong>SYN_SENT</strong>，<strong>SYN_RCVD</strong>，<strong>ESTABLISHED</strong>。<br><strong>SYN_SENT</strong>：当客户端调用connect函数向服务端发送<strong>SYN</strong>包时，客户端就会进入 <strong>SYN_SENT</strong>状态，并且还会等待服务器发送第二个<strong>SYN + ACK</strong>包，因此<strong>SYN_SENT</strong>状态就是表示客户端已经发送<strong>SYN</strong>包。</p>\n<p><strong>SYN_RCVD</strong>：当服务端接收到客户端发送的<strong>SYN</strong>包并确认时，服务端就会进入 <strong>SYN_RCVD</strong>状态，这是tcp三次握手建立的一个很短暂的中间状态，一般很难看到， <strong>SYN_RCVD</strong>状态表示服务端已经确认收到客户端发送的<strong>SYN</strong>包。</p>\n<p><strong>ESTABLISHED</strong>：该状态表示tcp三次握手连接建立完成。</p>\n<p>对于这两个队列需要注意几点注意：</p>\n<p><strong>1.</strong> 未完成队列和已完成队列的总和不超过listen函数的backlog参数的大小。<strong>listen</strong>函数的签名如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int listen(int sockfd, int backlog);</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.</strong> 一旦该连接的tcp三次握手完成，就会从未完成队列加入到已完成队列中</p>\n<p><strong>3.</strong> 如果未决连接队列已满，当又接收到一个客户端SYN时，服务端的tcp将会忽略该SYN，也就是不会理客户端的SYN，但是服务端并不会发送RST报文，原因是：客户端tcp可以重传SYN，并期望在超时前未决连接队列找到空位与服务端建立连接，这当然是我们所希望看到的。如果服务端直接发送一个RST的话，那么客户端的connect函数将会立即返回一个错误，而不会让tcp有机会重传SYN，显然我们也并不希望这样做。</p>\n<p>但是不排除有些linux实现在未决连接队列满时，的确会发送RST。但是这种做法是不正确的，因此我们最好忽略这种情况，处理这种额外情况的代码也会降低客户端程序的健壮性。</p>\n<h3 id=\"connect函数出错情况\"><a href=\"#connect函数出错情况\" class=\"headerlink\" title=\"connect函数出错情况\"></a>connect函数出错情况</h3><p>由于<strong>connect</strong>函数是在建立tcp连接成功或失败才返回，返回成功的情况本文上面已经介绍过了。这里我们介绍<strong>connect</strong>函数返回失败的几种情况：<br><strong>第一种</strong><br>当客户端发送了<strong>SYN</strong>报文后，没有收到确认则返回<strong>ETIMEDOUT</strong>错误，值得注意的是，失败一次并不会马上返回<strong>ETIMEDOUT</strong>错误。即当你调用了connect函数，客户端发送了一个<strong>SYN</strong>报文，没有收到确认就等6s后再发一个<strong>SYN</strong>报文，还没有收到就等24s再发一个（不同的linux系统设置的时间可能有所不同，这里以BSD系统为主）。这个时间是累加的，如果总共等了75s后还是没收到确认，那么客户端将返回ETIMEDOUT错误。</p>\n<p>对于linux系统，改变这个系统上限值也比较容易，由于需要改变系统配置参数，你需要root权限。<br>相关的命令是<strong>sysctl net.ipv4.tcp_syn_retries</strong>(针对于ipv4)。<br>在设置该值时还是要比较保守的，因为每次syn包重试的间隔都会增大(比如BSD类的系统实现中间隔会以2到3倍增加)，所有tcp_syn_retries的一个微小变化对connect超时时间的影响都非常大，不过扩大这个值也不会有什么坏处，因为你代码中设置的超时值都能够生效。但是如果代码中没有设置connect的超时值，那么connect就会阻塞很久，你发现对端机器down掉的间隔就更长。<br>作者建议设置这个值到6或者7，最多8。6对应的connect超时为45s，7对应90s，8对应190s。</p>\n<p>你能通过以下命令修改该值:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w net.ipv4.tcp_syn_retries=6</span><br></pre></td></tr></table></figure>\n\n<p>查看该值的命令是:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_syn_retries</span><br></pre></td></tr></table></figure>\n\n<p>如果希望重启后生效，将<strong>net.ipv4.tcp_syn_retries &#x3D; 6</strong>放入**&#x2F;etc&#x2F;sysctl.conf**中。</p>\n<p>这种情况一般是发生在服务端的可能性比较大，也就是服务端当前所处网络环境流量负载过高，网络拥塞了，然后服务端收到了客户端的<strong>SYN</strong>报文却来不及响应，或者发送的响应报文在网络传输过程中老是丢失，导致客户端迟迟收不到确认，最后返回ETIMEDOUT错误。</p>\n<p>我们可以简单复现一下这种情况，这个实验是基于CentOS系统进行的，具体过程如下所示：</p>\n<ol>\n<li>首先通过<strong>iptables -F</strong>把Centos上的防火墙规则清理掉，然后再通过<strong>iptables -I INPUT -p tcp –syn -i lo -j DROP</strong>命令把本地的所有SYN包都过滤掉（模拟服务端当前网络不稳定）。</li>\n</ol>\n<p>执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1iptables -F</span><br><span class=\"line\">2iptables -I INPUT -p tcp --syn -i lo -j DROP</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>然后通过<strong>nc</strong>命令向本地的环回地址<strong>127.0.0.1</strong>发起tcp连接请求（相当于自己跟自己发起tcp连接），来模拟客户端跟服务端发起tcp连接，但是服务器端就是不响应，最后导致客户端的tcp连接建立请求超时，并终止tcp连接。</p>\n<p> <img src=\"/../imgs/connect6.webp\"></p>\n</li>\n<li><p>然后再通过<strong>tcpdump</strong>工具把客户端和服务端建立tcp连接过程中的数据报都抓取下来，由于我们设置的服务器侦听端口号是10086，这里我们可以通过<strong>tcpdump -i any port 10086</strong>命令来过滤所有网卡的10086端口的数据包。</p>\n<p> <img src=\"/../imgs/connect7.webp\"></p>\n<p> 如上图所示，<strong>localhost.39299</strong>代表客户端，<strong>localhost.10086</strong>代表服务端，客户端总共向服务端发送了6个<strong>SYN</strong>报文，这6个<strong>SYN</strong>包的间隔时间分别是1s，2s，4s，8s，16s，这些时间累积加起来总共为31s，其实客户端在发送最后一个<strong>SYN</strong>报文时还等待了一段时间，然后才超时。也就是说，客户端在发送了第一个<strong>SYN</strong>报文时，会设置了一个计时器并开始计时，在最后一个<strong>SYN</strong>报文还没收到服务端的确认时，这个计时器就会超时，然后关闭tcp连接。</p>\n</li>\n</ol>\n<p><strong>第二种</strong><br>客户端连接一个服务器没有侦听的端口。</p>\n<p>过程是：客户端发送了一个<strong>SYN</strong>报文后，然后服务端回复了一个<strong>RST</strong>报文，说明这是一个异常的tcp连接，服务端发送了<strong>RST</strong>报文重置这个异常的tcp连接。</p>\n<p>这种情况一般为拒绝连接请求，比如：客户端想和服务端建立tcp连接，但是客户端的连接请求中使用了一个不存在或没有侦听的端口（比如：这个端口超出<strong>65535</strong>的范围），那么服务端就可以发送<strong>RST</strong>报文段拒绝这个请求。</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/connect8.png\"></p>\n<p>拒绝连接一般是由服务器主动发起的，因为客户端发起请求连接携带的目的端口，可能服务器并没有开启<strong>LISTEN</strong>状态。因此服务器在收到这样的报文段后会发送一个<strong>RST</strong>报文段，在这个报文里把<strong>RST</strong>和<strong>ACK</strong>都置为1，它确认了<strong>SYN</strong>报文段并同时重置了该tcp连接，然后服务器等待另一个连接。客户端在收到<strong>RST+ACK</strong>报文段后就会进入<strong>CLOSED</strong>状态。</p>\n<p>这里以通过20000不存在的端口远程登录为例：</p>\n<p><img src=\"/../imgs/connect9.webp\"></p>\n<p><strong>tcpdump</strong>抓取到的数据包如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">113:35:08.609549 IP 192.168.98.137.49057 &gt; 192.168.0.102.dnp: Flags [S], seq 2919679902, win 14600, options [mss 1460,sackOK,TS val 39134059 ecr 0,nop,wscale 6], length 0</span><br><span class=\"line\">213:35:09.610018 IP 192.168.98.137.49057 &gt; 192.168.0.102.dnp: Flags [S], seq 2919679902, win 14600, options [mss 1460,sackOK,TS val 39135059 ecr 0,nop,wscale 6], length 0</span><br><span class=\"line\">313:35:09.610115 IP 192.168.0.102.dnp &gt; 192.168.98.137.49057: Flags [R.], seq 1766537774, ack 2919679903, win 64240, length 0</span><br><span class=\"line\">413:35:10.610188 IP 192.168.0.102.dnp &gt; 192.168.98.137.49057: Flags [R.], seq 3482791532, ack 1, win 64240, length 0</span><br></pre></td></tr></table></figure>\n\n<p>通过分析<strong>tcpdump</strong>工具抓取的数据发现，<strong>RST</strong>报文段不携带数据。</p>\n<p><strong>第三种</strong><br>如果客户端调用<strong>connect</strong>函数向服务端发送了一个<strong>SYN</strong>报文，这个SYN报文在网络传输过程中经过某个路由器时，正好这个路由器出问题了，缺少到达目的地的路由，不能把这个<strong>SYN</strong>报文转发给目的地址，那么该路由器会丢弃这个<strong>SYN</strong>报文，并同时给客户端发送一个<strong>Destination unreachable</strong>（主机不可达）的<strong>ICMP</strong>差错报文。客户端的linux内核会保存这个Destination unreachable的ICMP差错报文，同时按第一种情况继续发送SYN报文，如果在规定的时间超时后还没收到服务端的响应报文，那么linux内核会把保存的ICMP差错报文作为<strong>EHOSTUNREACH</strong>或<strong>ENETUNREACH</strong>错误返回给客户端的应用进程。</p>\n<p>下面的这个实验就是用来说明第三种情况，帮助理解，大家能看明白就行了，可以不用去做这个实验，当然，有兴趣的同学可以去模拟一下。</p>\n<p><img src=\"/../imgs/connect10.webp\"></p>\n<p>然后client远程登录server成功。</p>\n<p><img src=\"/images/posts/%E8%BD%AC%E8%BD%BD/imgs/../imgs/connect11.png\"></p>\n<p>上图中没有指定telnet端口号，使用默认端口号23。</p>\n<p>这是抓取到的数据包，<strong>client</strong>在远程登录<strong>server</strong>时，发起了SYN连接请求。</p>\n<p><img src=\"/../imgs/connect12.webp\"></p>\n<p>现在我们来模拟<strong>client</strong>设备出故障，删除R1设备到server的路由信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">no ip route 12.1.3.0 255.255.255.0 12.1.2.2</span><br></pre></td></tr></table></figure>\n\n<p><strong>client</strong>再登录<strong>server</strong>时就会失败，我们从抓取到的数据包可以发现，<strong>client</strong>发送了一个<strong>SYN</strong>报文，然后R1设备收到这个<strong>SYN</strong>报文时，发现自己不能到达<strong>server</strong>，于是会把这个<strong>SYN</strong>报文丢弃掉，并向<strong>client</strong>发送了一个目标主机不可达的ICMP差错报文，于是client发送了RST报文来关闭这条异常的tcp连接。</p>\n<p><img src=\"/../imgs/connect13.webp\"></p>\n<p><strong>学习知识不仅要知其然也要知其所以然，这是我想通过这篇文章传达的一个理念，文中一步步的实验探索体现了学习知识动手实践的重要性，这是非常值得提倡的。</strong></p>\n","text":"从抓包的角度分析connect()函数的连接过程这篇文章主要是从tcp连接建立的角度来分析客户端程序如何利用connect函数和服务端程序建立tcp连接的，了解...","permalink":"/post/转载/学习资料/从抓包的角度分析connect函数的连接过程","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E6%8A%93%E5%8C%85%E7%9A%84%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90connect-%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">从抓包的角度分析connect()函数的连接过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">tcp三次握手</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#connect%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">connect函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#connect%E5%87%BD%E6%95%B0%E5%87%BA%E9%94%99%E6%83%85%E5%86%B5\"><span class=\"toc-text\">connect函数出错情况</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】Linux网络故障排查的瑞士军刀","uid":"e29cafb5ee3b6ecc425a0d63d3989d66","slug":"转载/学习资料/Linux网络故障排查的瑞士军刀","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:27.041Z","comments":true,"path":"api/articles/转载/学习资料/Linux网络故障排查的瑞士军刀.json","keywords":null,"cover":[],"text":"Linux 网络故障排查的瑞士军刀nc 即 netcat 命令，这个工具在排查网络故障时非常有用，功能非常强大，因而被业绩称为网络界的“瑞士军刀”，请读者务必掌...","permalink":"/post/转载/学习资料/Linux网络故障排查的瑞士军刀","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】做Java或者C++开发都应该知道的lsof命令","uid":"a6f27f59fbfda9509fed1c4003d071f5","slug":"转载/学习资料/做Java或者C++开发都应该知道的lsof命令","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.366Z","comments":true,"path":"api/articles/转载/学习资料/做Java或者C++开发都应该知道的lsof命令.json","keywords":null,"cover":[],"text":"做 Java 或者 C++ 开发都应该知道的 lsof 命令lsof 命令是 Linux 系统的扩展工具，它的含义是 list opened filedesci...","permalink":"/post/转载/学习资料/做Java或者C++开发都应该知道的lsof命令","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}