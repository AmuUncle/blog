{"title":"【转载】详解C++11中的智能指针","uid":"ca4f18d64c449f5b0232c48e6847b463","slug":"转载/cpp/详解C++11中的智能指针","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.199Z","comments":true,"path":"api/articles/转载/cpp/详解C++11中的智能指针.json","keywords":null,"cover":[],"content":"<h2 id=\"详解-C-11-中的智能指针\"><a href=\"#详解-C-11-中的智能指针\" class=\"headerlink\" title=\"详解 C++ 11 中的智能指针\"></a>详解 C++ 11 中的智能指针</h2><p>C&#x2F;C++ 语言最为人所诟病的特性之一就是存在内存泄露问题，因此后来的大多数语言都提供了内置内存分配与释放功能，有的甚至干脆对语言的使用者屏蔽了内存指针这一概念。这里不置贬褒，手动分配内存与手动释放内存有利也有弊，自动分配内存和自动释放内存亦如此，这是两种不同的设计哲学。有人认为，内存如此重要的东西怎么能放心交给用户去管理呢？而另外一些人则认为，内存如此重要的东西怎么能放心交给系统去管理呢？在 C&#x2F;C++ 语言中，内存泄露的问题一直困扰着广大的开发者，因此各类库和工具的一直在努力尝试各种方法去检测和避免内存泄露，如 boost，智能指针技术应运而生。</p>\n<h4 id=\"C-98-03-的尝试——std-auto-ptr\"><a href=\"#C-98-03-的尝试——std-auto-ptr\" class=\"headerlink\" title=\"C++ 98&#x2F;03 的尝试——std::auto_ptr\"></a>C++ 98&#x2F;03 的尝试——std::auto_ptr</h4><p>在 2019 年讨论 <strong>std::auto_ptr</strong> 不免有点让人怀疑是不是有点过时了，确实如此，随着 C++11 标准的出现（最新标准是 C++20），<strong>std::auto_ptr</strong> 已经被彻底废弃了，取而代之是 <strong>std::unique_ptr</strong>。然而，我之所以还向你介绍一下 <strong>std::auto_ptr</strong> 的用法以及它的设计不足之处是想让你了解 C++ 语言中智能指针的发展过程，一项技术如果我们了解它过去的样子和发展的轨迹，我们就能更好地掌握它，不是吗？</p>\n<p><strong>std::auto_ptr</strong> 的基本用法如下代码所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //初始化方式1</span><br><span class=\"line\">    std::auto_ptr&lt;int&gt; sp1(new int(8));</span><br><span class=\"line\">    //初始化方式2</span><br><span class=\"line\">    std::auto_ptr&lt;int&gt; sp2;</span><br><span class=\"line\">    sp2.reset(new int(8));</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>智能指针对象 <strong>sp1</strong> 和 <strong>sp2</strong> 均持有一个在堆上分配 int 对象，其值均是 8，这两块堆内存均可以在 <strong>sp1</strong> 和 <strong>sp2</strong> 释放时得到释放。这是 <strong>std::auto_ptr</strong> 的基本用法。</p>\n<blockquote>\n<p>sp 是 smart pointer（智能指针）的简写。</p>\n</blockquote>\n<p><strong>std::auto_ptr</strong> 真正让人容易误用的地方是其不常用的复制语义，即当复制一个 <strong>std::auto_ptr</strong> 对象时（拷贝复制或 operator &#x3D; 复制），原对象所持有的堆内存对象也会转移给复制出来的对象。示例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //测试拷贝构造</span><br><span class=\"line\">    std::auto_ptr&lt;int&gt; sp1(new int(8));</span><br><span class=\"line\">    std::auto_ptr&lt;int&gt; sp2(sp1);</span><br><span class=\"line\">    if (sp1.get() != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp1 is not empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp1 is empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (sp2.get() != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp2 is not empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp2 is empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //测试赋值构造</span><br><span class=\"line\">    std::auto_ptr&lt;int&gt; sp3(new int(8));</span><br><span class=\"line\">    std::auto_ptr&lt;int&gt; sp4;</span><br><span class=\"line\">    sp4 = sp3;</span><br><span class=\"line\">    if (sp3.get() != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp3 is not empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp3 is empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (sp4.get() != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp4 is not empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;sp4 is empty.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中分别利用拷贝构造（sp1 &#x3D;&gt; sp2）和 赋值构造（sp3 &#x3D;&gt; sp4）来创建新的 std::auto_ptr 对象，因此 sp1 持有的堆对象被转移给 sp2，sp3 持有的堆对象被转移给 sp4。我们得到程序执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ238vnojlyZ testx]# g++ -g -o test_auto_ptr test_auto_ptr.cpp</span><br><span class=\"line\">[root@iZ238vnojlyZ testx]# ./test_auto_ptr </span><br><span class=\"line\">sp1 is empty.</span><br><span class=\"line\">sp2 is not empty.</span><br><span class=\"line\">sp3 is empty.</span><br><span class=\"line\">sp4 is not empty.</span><br></pre></td></tr></table></figure>\n\n<p>由于 <strong>std::auto_ptr</strong> 这种不常用的复制语义，我们应该避免在 stl 容器中使用 <strong>std::auto_ptr</strong>，例如我们绝不应该写出如下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::vector&lt;std::auto_ptr&lt;int&gt;&gt; myvectors;</span><br></pre></td></tr></table></figure>\n\n<p>当用算法对容器操作的时候（如最常见的容器元素遍历），很难避免不对容器中的元素实现赋值传递，这样便会使容器中多个元素被置为空指针，这不是我们想看到的，会造成很多意想不到的错误。</p>\n<p>以史为鉴，作为 <strong>std::auto_ptr</strong> 的替代者 <strong>std::unique_ptr</strong> 吸取了这个经验教训。下文会来详细介绍。</p>\n<p>正因为 <strong>std::auto_ptr</strong> 的设计存在如此重大缺陷，C++11 标准在充分借鉴和吸收了 boost 库中智能指针的设计思想，引入了三种类型的智能指针，即 <strong>std::unique_ptr</strong>、<strong>std::shared_ptr</strong> 和 <strong>std::weak_ptr</strong>。</p>\n<blockquote>\n<p>boost 还有 scoped_ptr，C++11 并没有全部照搬，而是选择了三个最实用的指针类型。在 C++11 中可以通过 std::unique_ptr 达到与 boost::scoped_ptr 一样的效果。</p>\n</blockquote>\n<p>所有的智能指针类（包括 std::unique_ptr）均包含于头文件 **** 中。</p>\n<blockquote>\n<p>正因为存在上述设计上的缺陷，在 C++11及后续语言规范中 std::auto_ptr 已经被废弃，你的代码不应该再使用它。</p>\n</blockquote>\n<h4 id=\"std-unique-ptr\"><a href=\"#std-unique-ptr\" class=\"headerlink\" title=\"std::unique_ptr\"></a>std::unique_ptr</h4><p><strong>std::unique_ptr</strong> 对其持有的堆内存具有唯一拥有权，也就是说引用计数永远是 1，<strong>std::unique_ptr</strong> 对象销毁时会释放其持有的堆内存。可以使用以下方式初始化一个 <strong>std::unique_ptr</strong> 对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化方式1</span><br><span class=\"line\">std::unique_ptr&lt;int&gt; sp1(new int(123));</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化方式2</span><br><span class=\"line\">std::unique_ptr&lt;int&gt; sp2;</span><br><span class=\"line\">sp2.reset(new int(123));</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化方式3</span><br><span class=\"line\">std::unique_ptr&lt;int&gt; sp3 = std::make_unique&lt;int&gt;(123);</span><br></pre></td></tr></table></figure>\n\n<p>你应该尽量使用初始化方式 3 的方式去创建一个 <strong>std::unique_ptr</strong> 而不是方式 1 和 2，因为形式 3 更安全，原因 Scott Meyers 在其《Effective Modern C++》中已经解释过了，有兴趣的读者可以阅读此书相关章节。</p>\n<blockquote>\n<p>令很多人对 C++11 规范不满的地方是，C++11 新增了 std::make_shared() 方法创建一个 std::shared_ptr 对象，却没有提供相应的 std::make_unique() 方法创建一个 std::unique_ptr 对象，这个方法直到 C++14 才被添加进来。当然，在 C++11 中你很容易实现出这样一个方法来：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template&lt;typename T, typename... Ts&gt;</span><br><span class=\"line\">std::unique_ptr&lt;T&gt; make_unique(Ts&amp;&amp; ...params)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Ts&gt;(params)...));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>鉴于 <strong>std::auto_ptr</strong> 的前车之鉴，<strong>std::unique_ptr</strong> 禁止复制语义，为了达到这个效果，<strong>std::unique_ptr</strong> 类的拷贝构造函数和赋值运算符（operator &#x3D;）被标记为 <strong>delete</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">class unique_ptr</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //省略其他代码...</span><br><span class=\"line\"></span><br><span class=\"line\">    //拷贝构造函数和赋值运算符被标记为delete</span><br><span class=\"line\">    unique_ptr(const unique_ptr&amp;) = delete;</span><br><span class=\"line\">    unique_ptr&amp; operator=(const unique_ptr&amp;) = delete;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>因此，下列代码是无法通过编译的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::unique_ptr&lt;int&gt; sp1(std::make_unique&lt;int&gt;(123));;</span><br><span class=\"line\"></span><br><span class=\"line\">//以下代码无法通过编译</span><br><span class=\"line\">//std::unique_ptr&lt;int&gt; sp2(sp1);</span><br><span class=\"line\">std::unique_ptr&lt;int&gt; sp3;</span><br><span class=\"line\">//以下代码无法通过编译</span><br><span class=\"line\">//sp3 = sp1;</span><br></pre></td></tr></table></figure>\n\n<p>禁止复制语义也存在特例，即可以通过一个函数返回一个 std::unique_ptr：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">std::unique_ptr&lt;int&gt; func(int val)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::unique_ptr&lt;int&gt; up(new int(val));</span><br><span class=\"line\">    return up;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::unique_ptr&lt;int&gt; sp1 = func(123);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码从 func 函数中得到一个 <strong>std::unique_ptr</strong> 对象，然后返回给 sp1。</p>\n<p>既然 <strong>std::unique_ptr</strong> 不能复制，那么如何将一个 <strong>std::unique_ptr</strong> 对象持有的堆内存转移给另外一个呢？答案是使用移动构造，示例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::unique_ptr&lt;int&gt; sp1(std::make_unique&lt;int&gt;(123));</span><br><span class=\"line\"></span><br><span class=\"line\">    std::unique_ptr&lt;int&gt; sp2(std::move(sp1));</span><br><span class=\"line\"></span><br><span class=\"line\">    std::unique_ptr&lt;int&gt; sp3;</span><br><span class=\"line\">    sp3 = std::move(sp2);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码利用 std::move 将 sp1 持有的堆内存（值为 123）转移给 sp2，再把 sp2 转移给 sp3。最后，sp1 和 sp2 不再持有堆内存的引用，变成一个空的智能指针对象。并不是所有的对象的 std::move 操作都有意义，只有实现了移动构造函数（Move Constructor）或移动赋值运算符（operator &#x3D;）的类才行，而 <strong>std::unique_ptr</strong> 正好实现了这二者，以下是实现伪码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template&lt;typename T, typename Deletor&gt;</span><br><span class=\"line\">class unique_ptr</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //其他函数省略...</span><br><span class=\"line\">public:</span><br><span class=\"line\">    unique_ptr(unique_ptr&amp;&amp; rhs)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this-&gt;m_pT = rhs.m_pT;</span><br><span class=\"line\">        //源对象释放</span><br><span class=\"line\">        rhs.m_pT = nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unique_ptr&amp; operator=(unique_ptr&amp;&amp; rhs)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this-&gt;m_pT = rhs.m_pT;</span><br><span class=\"line\">        //源对象释放</span><br><span class=\"line\">        rhs.m_pT = nullptr;</span><br><span class=\"line\">        return *this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    T*    m_pT;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这是 <strong>std::unique_ptr</strong> 具有移动语义的原因，希望读者可以理解之。关于移动构造和 <strong>std::move</strong>，我们将在后面章节详细介绍。</p>\n<p><strong>std::unique_ptr</strong> 不仅可以持有一个堆对象，也可以持有一组堆对象，示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //创建10个int类型的堆对象</span><br><span class=\"line\">    //形式1</span><br><span class=\"line\">    std::unique_ptr&lt;int[]&gt; sp1(new int[10]);</span><br><span class=\"line\"></span><br><span class=\"line\">    //形式2</span><br><span class=\"line\">    std::unique_ptr&lt;int[]&gt; sp2;</span><br><span class=\"line\">    sp2.reset(new int[10]);</span><br><span class=\"line\">    //形式3</span><br><span class=\"line\">    std::unique_ptr&lt;int[]&gt; sp3(std::make_unique&lt;int[]&gt;(10));</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i = 0; i &lt; 10; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sp1[i] = i;</span><br><span class=\"line\">        sp2[i] = i;</span><br><span class=\"line\">        sp3[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i = 0; i &lt; 10; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; sp1[i] &lt;&lt; &quot;, &quot; &lt;&lt; sp2[i] &lt;&lt; &quot;, &quot; &lt;&lt; sp3[i] &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@myaliyun testmybook]# g++ -g -o test_unique_ptr_with_array test_unique_ptr_with_array.cpp -std=c++17</span><br><span class=\"line\">[root@myaliyun testmybook]# ./test_unique_ptr_with_array </span><br><span class=\"line\">0, 0, 0</span><br><span class=\"line\">1, 1, 1</span><br><span class=\"line\">2, 2, 2</span><br><span class=\"line\">3, 3, 3</span><br><span class=\"line\">4, 4, 4</span><br><span class=\"line\">5, 5, 5</span><br><span class=\"line\">6, 6, 6</span><br><span class=\"line\">7, 7, 7</span><br><span class=\"line\">8, 8, 8</span><br><span class=\"line\">9, 9, 9</span><br></pre></td></tr></table></figure>\n\n<p><strong>std::shared_ptr</strong> 和 <strong>std::weak_ptr</strong> 也可以持有一组堆对象，用法与 <strong>std::unique_ptr</strong> 相同，下文不再赘述。</p>\n<p><strong>自定义智能指针对象持有的资源的释放函数</strong></p>\n<p>默认情况下，智能指针对象在析构时只会释放其持有的堆内存（调用 delete 或者 delete[]），但是假设这块堆内存代表的对象还对应一种需要回收的资源（如操作系统的套接字句柄、文件句柄等），我们可以通过自定义智能指针的资源释放函数。假设现在有一个 Socket 类，对应着操作系统的套接字句柄，在回收时需要关闭该对象，我们可以如下自定义智能指针对象的资源析构函数，这里以 <strong>std::unique_ptr</strong> 为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class Socket</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Socket()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~Socket()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //关闭资源句柄</span><br><span class=\"line\">    void close()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    auto deletor = [](Socket* pSocket) &#123;</span><br><span class=\"line\">        //关闭句柄</span><br><span class=\"line\">        pSocket-&gt;close();</span><br><span class=\"line\">        //TODO: 你甚至可以在这里打印一行日志...</span><br><span class=\"line\">        delete pSocket;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::unique_ptr&lt;Socket, void(*)(Socket * pSocket)&gt; spSocket(new Socket(), deletor);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义 <strong>std::unique_ptr</strong> 的资源释放函数其规则是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::unique_ptr&lt;T, DeletorFuncPtr&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 T 是你要释放的对象类型，DeletorPtr 是一个自定义函数指针。上述代码 <strong>33</strong> 行表示 DeletorPtr 有点复杂，我们可以使用 <strong>decltype(deletor)</strong> 让编译器自己推导 deletor 的类型，因此可以将 <strong>33</strong> 行代码修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::unique_ptr&lt;Socket, decltype(deletor)&gt; spSocket(new Socket(), deletor);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"std-shared-ptr\"><a href=\"#std-shared-ptr\" class=\"headerlink\" title=\"std::shared_ptr\"></a>std::shared_ptr</h4><p><strong>std::unique_ptr</strong> 对其持有的资源具有独占性，而 <strong>std::shared_ptr</strong> 持有的资源可以在多个 <strong>std::shared_ptr</strong> 之间共享，每多一个 <strong>std::shared_ptr</strong> 对资源的引用，资源引用计数将增加 1，每一个指向该资源的 <strong>std::shared_ptr</strong> 对象析构时，资源引用计数减 1，最后一个 <strong>std::shared_ptr</strong> 对象析构时，发现资源计数为 0，将释放其持有的资源。多个线程之间，递增和减少资源的引用计数是安全的。（注意：这不意味着多个线程同时操作 <strong>std::shared_ptr</strong> 引用的对象是安全的）。<strong>std::shared_ptr</strong> 提供了一个 <strong>use_count()</strong> 方法来获取当前持有资源的引用计数。除了上面描述的，<strong>std::shared_ptr</strong> 用法和 <strong>std::unique_ptr</strong> 基本相同。</p>\n<p>下面是一个初始化 <strong>std::shared_ptr</strong> 的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初始化方式1</span><br><span class=\"line\">std::shared_ptr&lt;int&gt; sp1(new int(123));</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化方式2</span><br><span class=\"line\">std::shared_ptr&lt;int&gt; sp2;</span><br><span class=\"line\">sp2.reset(new int(123));</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化方式3</span><br><span class=\"line\">std::shared_ptr&lt;int&gt; sp3;</span><br><span class=\"line\">sp3 = std::make_shared&lt;int&gt;(123);</span><br></pre></td></tr></table></figure>\n\n<p>和 <strong>std::unique_ptr</strong> 一样，你应该优先使用 <strong>std::make_shared</strong> 去初始化一个 <strong>std::shared_ptr</strong> 对象。</p>\n<p>再来看另外一段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;A constructor&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;A destructor&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //初始化方式1</span><br><span class=\"line\">        std::shared_ptr&lt;A&gt; sp1(new A());</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        //初始化方式2</span><br><span class=\"line\">        std::shared_ptr&lt;A&gt; sp2(sp1);</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        sp2.reset();</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            std::shared_ptr&lt;A&gt; sp3 = sp1;</span><br><span class=\"line\">            std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上述代码 <strong>22</strong> 行 sp1 构造时，同时触发对象 A 的构造，因此 A 的构造函数会执行；</li>\n<li>此时只有一个 sp1 对象引用 <strong>22</strong> 行 new 出来的 A 对象（为了叙述方便，下文统一称之为<strong>资源对象 A</strong>），因此代码 <strong>24</strong> 行打印出来的引用计数值为 <strong>1</strong>；</li>\n<li>代码 <strong>27</strong> 行，利用 sp1 拷贝一份 sp2，导致代码 <strong>28</strong> 行打印出来的引用计数为 <strong>2</strong>；</li>\n<li>代码 <strong>30</strong> 行调用 sp2 的 reset() 方法，sp2 释放对资源对象 A 的引用，因此代码 <strong>31</strong> 行打印的引用计数值再次变为 <strong>1</strong>；</li>\n<li>代码 <strong>34</strong> 行 利用 sp1 再次 创建 sp3，因此代码 <strong>35</strong> 行打印的引用计数变为 <strong>2</strong>；</li>\n<li>程序执行到 <strong>36</strong> 行以后，sp3 出了其作用域被析构，资源 A 的引用计数递减 1，因此 代码 <strong>38</strong> 行打印的引用计数为 <strong>1</strong>；</li>\n<li>程序执行到 <strong>39</strong> 行以后，sp1 出了其作用域被析构，在其析构时递减资源 A 的引用计数至 <strong>0</strong>，并析构资源 A 对象，因此类 A 的析构函数被调用。</li>\n</ul>\n<p>所以整个程序的执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@myaliyun testmybook]# ./test_shared_ptr_use_count </span><br><span class=\"line\">A constructor</span><br><span class=\"line\">use count: 1</span><br><span class=\"line\">use count: 2</span><br><span class=\"line\">use count: 1</span><br><span class=\"line\">use count: 2</span><br><span class=\"line\">use count: 1</span><br><span class=\"line\">A destructor</span><br></pre></td></tr></table></figure>\n\n<p><strong>std::enable_shared_from_this</strong></p>\n<p>实际开发中，有时候需要在类中返回包裹当前对象（this）的一个 <strong>std::shared_ptr</strong> 对象给外部使用，C++ 新标准也为我们考虑到了这一点，有如此需求的类只要继承自 <strong>std::enable_shared_from_this</strong> 模板对象即可。用法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class A : public std::enable_shared_from_this&lt;A&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;A constructor&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;A destructor&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::shared_ptr&lt;A&gt; getSelf()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return shared_from_this();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::shared_ptr&lt;A&gt; sp1(new A());</span><br><span class=\"line\"></span><br><span class=\"line\">    std::shared_ptr&lt;A&gt; sp2 = sp1-&gt;getSelf();</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，类 A 的继承 <strong>std::enable_shared_from_this</strong> 并提供一个 <strong>getSelf()</strong> 方法返回自身的 <strong>std::shared_ptr</strong> 对象，在 <strong>getSelf()</strong> 中调用 <strong>shared_from_this()</strong> 即可。</p>\n<p><strong>std::enable_shared_from_this</strong> 用起来比较方便，但是也存在很多不易察觉的陷阱。</p>\n<p><strong>陷阱一：不应该共享栈对象的 this 给智能指针对象</strong></p>\n<p>假设我们将上面代码 main 函数 <strong>25</strong> 行生成 A 对象的方式改成一个栈变量，即：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//其他相同代码省略...</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::shared_ptr&lt;A&gt; sp2 = a.getSelf();</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp2.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行修改后的代码会发现程序在 <code>std::shared_ptr sp2 = a.getSelf();</code> 产生崩溃。这是因为，智能指针管理的是堆对象，栈对象会在函数调用结束后自行销毁，因此不能通过 <strong>shared_from_this()</strong> 将该对象交由智能指针对象管理。切记：<strong>智能指针最初设计的目的就是为了管理堆对象的（即那些不会自动释放的资源）</strong>。</p>\n<p><strong>陷阱二：避免 std::enable_shared_from_this 的循环引用问题</strong></p>\n<p>再来看另外一段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// test_std_enable_shared_from_this.cpp : This file contains the &#x27;main&#x27; function. Program execution begins and ends there.</span><br><span class=\"line\">//</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class A : public std::enable_shared_from_this&lt;A&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_i = 9;</span><br><span class=\"line\">        //注意:</span><br><span class=\"line\">        //比较好的做法是在构造函数里面调用shared_from_this()给m_SelfPtr赋值</span><br><span class=\"line\">        //但是很遗憾不能这么做,如果写在构造函数里面程序会直接崩溃</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; &quot;A constructor&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~A()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_i = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        std::cout &lt;&lt; &quot;A destructor&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    void func()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_SelfPtr = shared_from_this();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    int                 m_i;</span><br><span class=\"line\">    std::shared_ptr&lt;A&gt;  m_SelfPtr;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::shared_ptr&lt;A&gt; spa(new A());</span><br><span class=\"line\">        spa-&gt;func();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>乍一看上面的代码好像看不出什么问题，让我们来实际运行一下看看输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@myaliyun testmybook]# g++ -g -o test_std_enable_shared_from_this_problem test_std_enable_shared_from_this_problem.cpp</span><br><span class=\"line\">[root@myaliyun testmybook]# ./test_std_enable_shared_from_this_problem</span><br><span class=\"line\">A constructor</span><br></pre></td></tr></table></figure>\n\n<p>我们发现在程序的整个生命周期内，只有 A 类构造函数的调用输出，没有 A 类析构函数的调用输出，这意味着 new 出来的 A 对象产生了内存泄漏了！</p>\n<p>我们来分析一下为什么 new 出来的 A 对象得不到释放。当程序执行到 <strong>42</strong> 行后，spa 出了其作用域准备析构，在析构时其发现仍然有另外的一个 std::shared_ptr 对象即 A::m_SelfPtr 引用了 A，因此 spa 只会将 A 的引用计数递减为 1，然后就销毁自身了。现在留下一个矛盾的处境：必须销毁 A 才能销毁其成员变量 m_SelfPtr，而销毁 m_SelfPtr 必须先销毁 A。这就是所谓的 std::enable_shared_from_this 的循环引用问题。我们在实际开发中应该避免做出这样的逻辑设计，这种情形下即使使用了智能指针也会造成内存泄漏。也就是说一个资源的生命周期可以交给一个智能指针对象，但是该智能指针的生命周期不可以再交给整个资源来管理。</p>\n<h4 id=\"std-weak-ptr\"><a href=\"#std-weak-ptr\" class=\"headerlink\" title=\"std::weak_ptr\"></a>std::weak_ptr</h4><p><strong>std::weak_ptr</strong> 是一个不控制资源生命周期的智能指针，是对对象的一种弱引用，只是提供了对其管理的资源的一个访问手段，引入它的目的为协助 <strong>std::shared_ptr</strong> 工作。</p>\n<p><strong>std::weak_ptr</strong> 可以从一个 <strong>std::shared_ptr</strong> 或另一个 <strong>std::weak_ptr</strong> 对象构造，<strong>std::shared_ptr</strong> 可以直接赋值给 <strong>std::weak_ptr</strong> ，也可以通过 <strong>std::weak_ptr</strong> 的 <strong>lock()</strong> 函数来获得 <strong>std::shared_ptr</strong>。它的构造和析构不会引起引用计数的增加或减少。<strong>std::weak_ptr</strong> 可用来解决 <strong>std::shared_ptr</strong> 相互引用时的死锁问题（即两个<strong>std::shared_ptr</strong> 相互引用，那么这两个指针的引用计数永远不可能下降为 0， 资源永远不会释放）。</p>\n<p>示例代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //创建一个std::shared_ptr对象</span><br><span class=\"line\">    std::shared_ptr&lt;int&gt; sp1(new int(123));</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过构造函数得到一个std::weak_ptr对象</span><br><span class=\"line\">    std::weak_ptr&lt;int&gt; sp2(sp1);</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过赋值运算符得到一个std::weak_ptr对象</span><br><span class=\"line\">    std::weak_ptr&lt;int&gt; sp3 = sp1;</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    //通过一个std::weak_ptr对象得到另外一个std::weak_ptr对象</span><br><span class=\"line\">    std::weak_ptr&lt;int&gt; sp4 = sp2;</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;use count: &quot; &lt;&lt; sp1.use_count() &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@myaliyun testmybook]# g++ -g -o test_weak_ptr test_weak_ptr.cpp </span><br><span class=\"line\">[root@myaliyun testmybook]# ./test_weak_ptr</span><br><span class=\"line\">use count: 1</span><br><span class=\"line\">use count: 1</span><br><span class=\"line\">use count: 1</span><br><span class=\"line\">use count: 1</span><br></pre></td></tr></table></figure>\n\n<p>无论通过何种方式创建 <strong>std::weak_ptr</strong> 都不会增加资源的引用计数，因此每次输出引用计数的值都是 1。</p>\n<p>既然，<strong>std::weak_ptr</strong> 不管理对象的生命周期，那么其引用的对象可能在某个时刻被销毁了，如何得知呢？<strong>std::weak_ptr</strong> 提供了一个 <strong>expired()</strong> 方法来做这一项检测，返回 true，说明其引用的资源已经不存在了；返回 false，说明该资源仍然存在，这个时候可以使用 <strong>std::weak_ptr</strong> 的 <strong>lock()</strong> 方法得到一个 <strong>std::shared_ptr</strong> 对象然后继续操作资源，以下代码演示了该用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//tmpConn_ 是一个 std::weak_ptr&lt;TcpConnection&gt; 对象</span><br><span class=\"line\">//tmpConn_引用的TcpConnection已经销毁，直接返回</span><br><span class=\"line\">if (tmpConn_.expired())</span><br><span class=\"line\">    return;</span><br><span class=\"line\"></span><br><span class=\"line\">std::shared_ptr&lt;TcpConnection&gt; conn = tmpConn_.lock();</span><br><span class=\"line\">if (conn)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //对conn进行操作，省略...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有读者可能对上述代码产生疑问，既然使用了 <strong>std::weak_ptr</strong> 的 <strong>expired()</strong> 方法判断了对象是否存在，为什么不直接使用 <strong>std::weak_ptr</strong> 对象对引用资源进行操作呢？实际上这是行不通的，<strong>std::weak_ptr</strong> 类没有重写 <strong>operator-&gt;</strong> 和 <strong>operator</strong>* 方法，因此不能像 <strong>std::shared_ptr</strong> 或 <strong>std::unique_ptr</strong> 一样直接操作对象，同时 <strong>std::weak_ptr</strong> 类也没有重写 <strong>operator!</strong> 操作，因此也不能通过 <strong>std::weak_ptr</strong> 对象直接判断其引用的资源是否存在：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void doSomething()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    std::shared_ptr&lt;A&gt; sp1(new A());</span><br><span class=\"line\"></span><br><span class=\"line\">    std::weak_ptr&lt;A&gt; sp2(sp1);</span><br><span class=\"line\"></span><br><span class=\"line\">    //正确代码</span><br><span class=\"line\">    if (sp1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //正确代码</span><br><span class=\"line\">        sp1-&gt;doSomething();</span><br><span class=\"line\">        (*sp1).doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //正确代码</span><br><span class=\"line\">    if (!sp1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //错误代码，无法编译通过</span><br><span class=\"line\">    //if (sp2)</span><br><span class=\"line\">    //&#123;</span><br><span class=\"line\">    //    //错误代码，无法编译通过</span><br><span class=\"line\">    //    sp2-&gt;doSomething();</span><br><span class=\"line\">    //    (*sp2).doSomething();</span><br><span class=\"line\">    //&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //错误代码，无法编译通过</span><br><span class=\"line\">    //if (!sp2)</span><br><span class=\"line\">    //&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之所以 <strong>std::weak_ptr</strong> 不增加引用资源的引用计数不管理资源的生命周期，是因为，即使它实现了以上说的几个方法，调用它们也是不安全的，因为在调用期间，引用的资源可能恰好被销毁了，这会造成棘手的错误和麻烦。</p>\n<p>因此，<strong>std::weak_ptr</strong> 的正确使用场景是那些资源如果可能就使用，如果不可使用则不用的场景，它不参与资源的生命周期管理。例如，网络分层结构中，Session 对象（会话对象）利用 Connection 对象（连接对象）提供的服务工作，但是 Session 对象不管理 Connection 对象的生命周期，Session 管理 Connection 的生命周期是不合理的，因为网络底层出错会导致 Connection 对象被销毁，此时 Session 对象如果强行持有 Connection 对象与事实矛盾。</p>\n<p><strong>std::weak_ptr</strong> 的应用场景，经典的例子是订阅者模式或者观察者模式中。这里以订阅者为例来说明，消息发布器只有在某个订阅者存在的情况下才会向其发布消息，而不能管理订阅者的生命周期。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Subscriber</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class SubscribeManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void publish()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (const auto&amp; iter : m_subscribers)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (!iter.expired())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //TODO：给订阅者发送消息</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    std::vector&lt;std::weak_ptr&lt;Subscriber&gt;&gt;   m_subscribers;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"智能指针对象的大小\"><a href=\"#智能指针对象的大小\" class=\"headerlink\" title=\"智能指针对象的大小\"></a>智能指针对象的大小</h4><p>一个 <strong>std::unique_ptr</strong> 对象大小与裸指针大小相同（即 sizeof(std::unique_ptr<T>) &#x3D;&#x3D; sizeof(void*)），而 <strong>std::shared_ptr</strong> 的大小是 <strong>std::unique_ptr</strong> 的一倍。以下是我分别在 Visual Studio 2019 和 gcc&#x2F;g++ 4.8 上（二者都编译成 x64 程序）的测试结果：</p>\n<p><strong>测试代码</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::shared_ptr&lt;int&gt; sp0;</span><br><span class=\"line\">    std::shared_ptr&lt;std::string&gt; sp1;</span><br><span class=\"line\">    sp1.reset(new std::string());</span><br><span class=\"line\">    std::unique_ptr&lt;int&gt; sp2;</span><br><span class=\"line\">    std::weak_ptr&lt;int&gt; sp3;</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; &quot;sp0 size: &quot; &lt;&lt; sizeof(sp0) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;sp1 size: &quot; &lt;&lt; sizeof(sp1) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;sp2 size: &quot; &lt;&lt; sizeof(sp2) &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;sp3 size: &quot; &lt;&lt; sizeof(sp3) &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Visual Studio 2019 运行结果：</p>\n<p><img src=\"/../imgs/sp1.webp\"></p>\n<p>gcc&#x2F;g++ 运行结果：</p>\n<p><img src=\"/../imgs/sp2.webp\"></p>\n<p>在 32 位机器上，<strong>std_unique_ptr</strong> 占 4 字节，<strong>std::shared_ptr</strong> 和 <strong>std::weak_ptr</strong> 占 8 字节；在 64 位机器上，<strong>std_unique_ptr</strong> 占 8 字节，<strong>std::shared_ptr</strong> 和 <strong>std::weak_ptr</strong> 占 16 字节。也就是说，<strong>std_unique_ptr</strong> 的大小总是和原始指针大小一样，<strong>std::shared_ptr</strong> 和 <strong>std::weak_ptr</strong> 大小是原始指针的一倍。</p>\n<h4 id=\"智能指针使用注意事项\"><a href=\"#智能指针使用注意事项\" class=\"headerlink\" title=\"智能指针使用注意事项\"></a>智能指针使用注意事项</h4><p>C++ 新标准提倡的理念之一是不应该再手动调用 delete 或者 free 函数去释放内存了，而应该把它们交给新标准提供的各种智能指针对象。C++ 新标准中的各种智能指针是如此的实用与强大，在现代 C++ 项目开发中，读者应该尽量去使用它们。智能指针虽然好用，但稍不注意，也可能存在许多难以发现的 bug，这里我根据经验总结了几条：</p>\n<ul>\n<li><p>一旦一个对象使用智能指针管理后，就不该再使用原始裸指针去操作；</p>\n<p>看一段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class Subscriber</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">  Subscriber* pSubscriber = new Subscriber();</span><br><span class=\"line\"></span><br><span class=\"line\">  std::unique_ptr&lt;Subscriber&gt; spSubscriber(pSubscriber);</span><br><span class=\"line\"></span><br><span class=\"line\">  delete pSubscriber;</span><br><span class=\"line\"></span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码利用创建了一个堆对象 Subscriber，然后利用智能指针 spSubscriber 去管理之，可以却私下利用原始指针销毁了该对象，这让智能指针对象 <strong>spSubscriber</strong> 情何以堪啊？</p>\n<p>记住，一旦智能指针对象接管了你的资源，所有对资源的操作都应该通过智能指针对象进行，不建议再通过原始指针进行操作了。当然，除了 <strong>std::weak_ptr</strong>，<strong>std::unique_ptr</strong> 和 <strong>std::shared_ptr</strong> 都提供了获取原始指针的方法——<strong>get()</strong> 函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">  Subscriber* pSubscriber = new Subscriber();</span><br><span class=\"line\"></span><br><span class=\"line\">  std::unique_ptr&lt;Subscriber&gt; spSubscriber(pSubscriber);</span><br><span class=\"line\"></span><br><span class=\"line\">  //pTheSameSubscriber和pSubscriber指向同一个对象</span><br><span class=\"line\">  Subscriber* pTheSameSubscriber= spSubscriber.get();</span><br><span class=\"line\"></span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分清楚场合应该使用哪种类型的智能指针；</p>\n<p>通常情况下，如果你的资源不需要在其他地方共享，那么应该优先使用 <strong>std::unique_ptr</strong>，反之使用 <strong>std::shared_ptr</strong>，当然这是在该智能指针需要管理资源的生命周期的情况下；如果不需要管理对象的生命周期，请使用 <strong>std::weak_ptr</strong>。</p>\n</li>\n<li><p>认真考虑，避免操作某个引用资源已经释放的智能指针；</p>\n<p>前面的例子，一定让你觉得非常容易知道一个智能指针的持有的资源是否还有效，但是还是建议在不同场景谨慎一点，有些场景是很容易造成误判。例如下面的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class T</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  void doSomething()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; &quot;T do something...&quot; &lt;&lt; m_i &lt;&lt; std::endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">  int     m_i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">  std::shared_ptr&lt;T&gt; sp1(new T());</span><br><span class=\"line\">  const auto&amp; sp2 = sp1;</span><br><span class=\"line\"></span><br><span class=\"line\">  sp1.reset();</span><br><span class=\"line\"></span><br><span class=\"line\">  //由于sp2已经不再持有对象的引用，程序会在这里出现意外的行为</span><br><span class=\"line\">  sp2-&gt;doSomething();</span><br><span class=\"line\"></span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，sp2 是 sp1 的引用，sp1 被置空后，sp2 也一同为空。这时候调用 sp2-&gt;doSomething()，sp2-&gt;（即 **operator-&gt;**）在内部会调用 <strong>get()</strong> 方法获取原始指针对象，这时会得到一个空指针（地址为 0），继续调用 doSomething() 导致程序崩溃。</p>\n<p>你一定仍然觉得这个例子也能很明显地看出问题，ok，让我们把这个例子放到实际开发中再来看一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//连接断开</span><br><span class=\"line\">void MonitorServer::OnClose(const std::shared_ptr&lt;TcpConnection&gt;&amp; conn)</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">  std::lock_guard&lt;std::mutex&gt; guard(m_sessionMutex);</span><br><span class=\"line\">  for (auto iter = m_sessions.begin(); iter != m_sessions.end(); ++iter)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      //通过比对connection对象找到对应的session</span><br><span class=\"line\">      if ((*iter)-&gt;GetConnectionPtr() == conn)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          m_sessions.erase(iter);</span><br><span class=\"line\">          //注意这里：程序在此处崩溃</span><br><span class=\"line\">          LOGI(&quot;monitor client disconnected: %s&quot;, conn-&gt;peerAddress().toIpPort().c_str());</span><br><span class=\"line\">          break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码不是我杜撰的，而是来自于我实际的一个商业项目中。注意代码中我提醒注意的地方，该段程序会在代码 <strong>12</strong> 行处崩溃，崩溃原因是调用了 <code>conn-&gt;peerAddress()</code> 方法。为什么这个方法的调用可能会引起崩溃？现在可以一目了然地看出了吗？</p>\n<p>崩溃原因是传入的 conn 对象和上一个例子中的 sp2 一样都是另外一个 <strong>std::shared_ptr</strong> 的引用，当连接断开时，对应的 TcpConnection 对象可能早已被销毁，而 conn 引用就会变成空指针（严格来说是不再拥有一个 TcpConnection 对象），此时调用 TcpConnection 的 peerAddress() 方法就会产生和上一个示例一样的错误。</p>\n</li>\n<li><p>作为类成员变量时，应该优先使用前置声明（forward declarations）</p>\n<p>我们知道，为了减小编译依赖加快编译速度和生成二进制文件的大小，C&#x2F;C++ 项目中一般在 *.h 文件对于指针类型尽量使用前置声明，而不是直接包含对应类的头文件。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Test.h</span><br><span class=\"line\">//在这里使用A的前置声明，而不是直接包含A.h文件</span><br><span class=\"line\">class A;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  Test();</span><br><span class=\"line\">  ~Test();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">  A*      m_pA;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同样的道理，在头文件中当使用智能指针对象作为类成员变量时，也应该优先使用前置声明去引用智能指针对象的包裹类，而不是直接包含包裹类的头文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Test.h</span><br><span class=\"line\">#include &lt;memory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//智能指针包裹类A，这里优先使用A的前置声明，而不是直接包含A.h</span><br><span class=\"line\">class A;</span><br><span class=\"line\"></span><br><span class=\"line\">class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  Test();</span><br><span class=\"line\">  ~Test();</span><br><span class=\"line\"></span><br><span class=\"line\">private:  </span><br><span class=\"line\">  std::unique_ptr&lt;A&gt;  m_spA;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>C++ 新标准中的智能指针我想介绍的就这么多了，Modern C&#x2F;C++ 已经变为 C&#x2F;C++ 开发的趋势，希望读者能善用和熟练使用本节介绍的后三种智能指针对象。</p>\n","text":"详解 C++ 11 中的智能指针C/C++ 语言最为人所诟病的特性之一就是存在内存泄露问题，因此后来的大多数语言都提供了内置内存分配与释放功能，有的甚至干脆对语...","permalink":"/post/转载/cpp/详解C++11中的智能指针","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%A6%E8%A7%A3-C-11-%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\"><span class=\"toc-text\">详解 C++ 11 中的智能指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#C-98-03-%E7%9A%84%E5%B0%9D%E8%AF%95%E2%80%94%E2%80%94std-auto-ptr\"><span class=\"toc-text\">C++ 98&#x2F;03 的尝试——std::auto_ptr</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#std-unique-ptr\"><span class=\"toc-text\">std::unique_ptr</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#std-shared-ptr\"><span class=\"toc-text\">std::shared_ptr</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#std-weak-ptr\"><span class=\"toc-text\">std::weak_ptr</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">智能指针对象的大小</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">智能指针使用注意事项</span></a></li></ol></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】用VisualStudio调试Linux程序","uid":"c1544df243e5ebe89f100e61b30feb98","slug":"转载/cpp/用VisualStudio调试Linux程序","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.197Z","comments":true,"path":"api/articles/转载/cpp/用VisualStudio调试Linux程序.json","keywords":null,"cover":[],"text":"用Visual Studio调试Linux程序用Visual Studio调试Linux程序？你真的没看错，这个是真的，不是标题党。当然如果你说VS2015及以...","permalink":"/post/转载/cpp/用VisualStudio调试Linux程序","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】libevent源码深度剖析01","uid":"8ecb216f8fd8194ddd13637de67a4f14","slug":"转载/libevent/libevent源码深度剖析01","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:22.339Z","comments":true,"path":"api/articles/转载/libevent/libevent源码深度剖析01.json","keywords":null,"cover":null,"text":"libevent源码深度剖析一1. 前言libevent是一个轻量级的开源高性能网络库，使用者众多，研究者更甚，相关文章也不少。写这一系列文章的用意在于，一则分...","permalink":"/post/转载/libevent/libevent源码深度剖析01","photos":[],"count_time":{"symbolsCount":864,"symbolsTime":"1 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"libevent","slug":"libevent","count":13,"path":"api/tags/libevent.json"},{"name":"源码解析","slug":"源码解析","count":13,"path":"api/tags/源码解析.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}