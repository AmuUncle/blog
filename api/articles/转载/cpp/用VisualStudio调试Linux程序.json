{"title":"【转载】用VisualStudio调试Linux程序","uid":"c1544df243e5ebe89f100e61b30feb98","slug":"转载/cpp/用VisualStudio调试Linux程序","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.197Z","comments":true,"path":"api/articles/转载/cpp/用VisualStudio调试Linux程序.json","keywords":null,"cover":[],"content":"<h1 id=\"用Visual-Studio调试Linux程序\"><a href=\"#用Visual-Studio调试Linux程序\" class=\"headerlink\" title=\"用Visual Studio调试Linux程序\"></a>用Visual Studio调试Linux程序</h1><p>用Visual Studio调试Linux程序？你真的没看错，这个是真的，不是标题党。当然如果你说VS2015及以上版本自带的Linux调试插件，那就算了。这些自带的插件调试一个有简单的main函数程序还凑合，稍微复杂点的程序，根本无法编译调试。</p>\n<p>而本文介绍的主角是VS的另外一款插件Visual GDB，让我们欢迎主角登场，下面是正文。</p>\n<h2 id=\"使用Visual-Studio-VisualGDB调试远程Linux程序\"><a href=\"#使用Visual-Studio-VisualGDB调试远程Linux程序\" class=\"headerlink\" title=\"使用Visual Studio+VisualGDB调试远程Linux程序\"></a>使用Visual Studio+VisualGDB调试远程Linux程序</h2><p>需要工具：</p>\n<ol>\n<li>Visual Studio 2013或以上版本（以下简称VS）</li>\n<li>VisualGDB（一款VS插件，官网为：<a href=\"http://visualgdb.com/%EF%BC%89\">http://visualgdb.com/）</a></li>\n<li>含有调试符号的Linux程序文件（该程序文件为调试目标）</li>\n<li>Visual Assistant（番茄助手，另外一款VS插件）</li>\n</ol>\n<p>在VS上安装完VisualGDB插件以后，有如下几种方式来对远程Linux机器上的程序进行调试：</p>\n<ul>\n<li><strong>方法一、</strong>如果该程序已经启动，则可以使用VS菜单【Debug】-&gt;【Attach to Process…】。</li>\n</ul>\n<p><img src=\"/../imgs/vsdebuglinux1.webp\"></p>\n<p><img src=\"/../imgs/vsdebuglinux2.jpeg\" alt=\"img\"></p>\n<p><img src=\"/../imgs/vsdebuglinux3.webp\"></p>\n<p><img src=\"/../imgs/vsdebuglinux4.webp\"></p>\n<p><img src=\"/../imgs/vsdebuglinux5.webp\"></p>\n<p>这种方法有个缺点是，不能从开始启动的main函数处添加断点，自始至终地调试程序，查看完整程序运行脉络，所以下面推荐方法二。</p>\n<ul>\n<li>方法二、利用VS启动远程Linux机器上一个Linux程序文件进行调试。选择VS菜单【Debug】 -&gt;【Quick Debugwith GDB】。</li>\n</ul>\n<p><img src=\"/../imgs/vsdebuglinux6.webp\"></p>\n<p>需要注意的地方，已经在上图中标红框。这里简单地解释一下：</p>\n<p>如果你安装了交叉编译环境Target可以选择MinGW&#x2F;Cygwin，否则就选择远程Linux系统。这里如果不存在一个ssh连接，则需要创建一个。 </p>\n<p>Debugged program是需要设置的被调试程序的路径，位于远程Linux机器上。</p>\n<p>Arguments是该调试程序需要设置的命令行参数，如果被调试程序不需要命令行参数可以不设置。</p>\n<p>Working directory是被调试程序运行的工作目录。</p>\n<p>另外建议勾选上Initial breakpoint in main，这样启动调试时，程序就会停在程序入口处。</p>\n<p>这样，我们就可以利用VS强大的功能去查看程序的各种状态了，常用的面板，如【内存】【线程】【观察】【堆栈】【GDB Session】【断点】等窗口位于VS 菜单【Debug】-&gt;【Windows】菜单下，注意，有些窗口只有在调试状态下才可见。这里有两个值得强调一下的功能是：</p>\n<ol>\n<li><strong>GDB Session****窗口</strong>，在这个窗口里面可以像原来直接使用gdb调试一样输入gdb指令来进行调试。</li>\n</ol>\n<p><img src=\"/../imgs/vsdebuglinux7.jpeg\" alt=\"img\"></p>\n<ol>\n<li><strong>SSH console****窗口</strong>，这个窗口类似一个远程操作Linux系统的应用程序如xshell、SecureCRT。</li>\n</ol>\n<p><img src=\"/../imgs/vsdebuglinux8.webp\"></p>\n<p>现在还剩下一个问题，就是我们虽然在调试时可视化地远程查看一个Linux进程的状态信息，但很多类型的定义和什么却无法看到。解决这个问题的方法就是你可以先在VS里面建立一个工程，导入你要调试的程序的源代码目录。然后利用方法一或者方法二去启动调试程序。这个时候你想查看某个类型的定义或什么只要利用Visual Assit的查看源码功能即可，快捷键是Alt + G。</p>\n<p><img src=\"/../imgs/vsdebuglinux9.webp\"></p>\n<p>需要注意的时：同时安装了Visual Assist和VisualGDB后，后者也会提供一个go按钮去查找源码定义，但这个功能远不如Visual Assist按钮好用，我们可以禁用掉它来使用Visual Assist的Go功能。禁用方法，打开菜单：【Tools】-&gt;【Option…】:</p>\n<p><img src=\"/../imgs/vsdebuglinux10.webp\"></p>\n<p>然后重启VS即可。</p>\n<p>到这里，既可以查看源码，也可以调试程序了。</p>\n<p>VisualGDB 下载地址：</p>\n<p>链接：<a href=\"https://share.weiyun.com/57aGHLM\">https://share.weiyun.com/57aGHLM</a> 密码：kj9ahs</p>\n","text":"用Visual Studio调试Linux程序用Visual Studio调试Linux程序？你真的没看错，这个是真的，不是标题党。当然如果你说VS2015及以...","permalink":"/post/转载/cpp/用VisualStudio调试Linux程序","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8Visual-Studio%E8%B0%83%E8%AF%95Linux%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">用Visual Studio调试Linux程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Visual-Studio-VisualGDB%E8%B0%83%E8%AF%95%E8%BF%9C%E7%A8%8BLinux%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">使用Visual Studio+VisualGDB调试远程Linux程序</span></a></li></ol></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】深入理解CC++中的指针","uid":"171b5e45338b6064c4b33120174da47b","slug":"转载/cpp/深入理解CC++中的指针","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.197Z","comments":true,"path":"api/articles/转载/cpp/深入理解CC++中的指针.json","keywords":null,"cover":[],"text":"深入理解C/C++中的指针C和C++中最强大的功能莫过于指针了（pointer），但是对于大多数人尤其是新手来说，指针是一个最容易出错、也最难掌握的概念了。本文...","permalink":"/post/转载/cpp/深入理解CC++中的指针","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】详解C++11中的智能指针","uid":"ca4f18d64c449f5b0232c48e6847b463","slug":"转载/cpp/详解C++11中的智能指针","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.199Z","comments":true,"path":"api/articles/转载/cpp/详解C++11中的智能指针.json","keywords":null,"cover":[],"text":"详解 C++ 11 中的智能指针C/C++ 语言最为人所诟病的特性之一就是存在内存泄露问题，因此后来的大多数语言都提供了内置内存分配与释放功能，有的甚至干脆对语...","permalink":"/post/转载/cpp/详解C++11中的智能指针","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}