{"title":"【转载】C++必须掌握的pimpl惯用法","uid":"674a06ff970318ba143bc66d58326f5d","slug":"转载/cpp/C++必须掌握的pimpl惯用法","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.026Z","comments":true,"path":"api/articles/转载/cpp/C++必须掌握的pimpl惯用法.json","keywords":null,"cover":null,"content":"<h1 id=\"pimpl-惯用法\"><a href=\"#pimpl-惯用法\" class=\"headerlink\" title=\"pimpl 惯用法\"></a>pimpl 惯用法</h1><p>现在这里有一个名为 <strong>CSocketClient</strong> 的网络通信类，定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 网络通信的基础类, SocketClient.h</span><br><span class=\"line\"> * zhangyl 2017.07.11</span><br><span class=\"line\"> */</span><br><span class=\"line\">class CSocketClient</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CSocketClient();</span><br><span class=\"line\">    ~CSocketClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public:  </span><br><span class=\"line\">    void SetProxyWnd(HWND hProxyWnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    bool    Init(CNetProxy* pNetProxy);</span><br><span class=\"line\">    bool    Uninit();</span><br><span class=\"line\">    </span><br><span class=\"line\">    int Register(const char* pszUser, const char* pszPassword); </span><br><span class=\"line\">    void GuestLogin();  </span><br><span class=\"line\">    </span><br><span class=\"line\">    BOOL    IsClosed();</span><br><span class=\"line\">    BOOL\tConnect(int timeout = 3);</span><br><span class=\"line\">    void    AddData(int cmd, const std::string&amp; strBuffer);</span><br><span class=\"line\">    void    AddData(int cmd, const char* pszBuff, int nBuffLen);</span><br><span class=\"line\">    void    Close();</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL    ConnectServer(int timeout = 3);</span><br><span class=\"line\">    BOOL    SendLoginMsg();</span><br><span class=\"line\">    BOOL    RecvLoginMsg(int&amp; nRet);</span><br><span class=\"line\">    BOOL    Login(int&amp; nRet);</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    void LoadConfig();</span><br><span class=\"line\">    static UINT CALLBACK SendDataThreadProc(LPVOID lpParam);</span><br><span class=\"line\">    static UINT CALLBACK RecvDataThreadProc(LPVOID lpParam);</span><br><span class=\"line\">    bool Send();</span><br><span class=\"line\">    bool Recv();</span><br><span class=\"line\">    bool CheckReceivedData();</span><br><span class=\"line\">    void SendHeartbeatPackage();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    SOCKET                          m_hSocket;</span><br><span class=\"line\">    short                           m_nPort;</span><br><span class=\"line\">    char                            m_szServer[64];</span><br><span class=\"line\">    long                            m_nLastDataTime;        //最近一次收发数据的时间</span><br><span class=\"line\">    long                            m_nHeartbeatInterval;   //心跳包时间间隔，单位秒</span><br><span class=\"line\">    CRITICAL_SECTION                m_csLastDataTime;       //保护m_nLastDataTime的互斥体 </span><br><span class=\"line\">    HANDLE                          m_hSendDataThread;      //发送数据线程</span><br><span class=\"line\">    HANDLE                          m_hRecvDataThread;      //接收数据线程</span><br><span class=\"line\">    std::string                     m_strSendBuf;</span><br><span class=\"line\">    std::string                     m_strRecvBuf;</span><br><span class=\"line\">    HANDLE                          m_hExitEvent;</span><br><span class=\"line\">    bool                            m_bConnected;</span><br><span class=\"line\">    CRITICAL_SECTION                m_csSendBuf;</span><br><span class=\"line\">    HANDLE                          m_hSemaphoreSendBuf;</span><br><span class=\"line\">    HWND                            m_hProxyWnd;</span><br><span class=\"line\">    CNetProxy*                      m_pNetProxy;</span><br><span class=\"line\">    int                             m_nReconnectTimeInterval;    //重连时间间隔</span><br><span class=\"line\">    time_t                          m_nLastReconnectTime;        //上次重连时刻</span><br><span class=\"line\">    CFlowStatistics*                m_pFlowStatistics;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码来源于笔者实际项目中开发的一个股票客户端的软件。</p>\n<p><strong>CSocketClient</strong> 类的 <strong>public</strong> 方法提供对外接口供第三方使用，每个函数的具体实现在 <strong>SocketClient.cpp</strong> 中，对第三方使用者不可见。在 Windows 系统上作为提供给第三方使用的库，一般需要提供给使用者 <em><strong>.h</strong>、</em><strong>.lib</strong> 和 <strong><em>.dll</em>* 文件，在 Linux 系统上需要提供 ***.h**、</strong><em>.a  或 <em>.so</em></em> 文件。</p>\n<p>不管是在哪个操作系统平台上，像 SocketClient.h 这样的头文件提供给第三方使用时，都会让库的作者心里<strong>隐隐不安</strong>——因为 SocketClient.h 文件中 SocketClient 类大量的成员变量和私有函数暴露了这个类太多的实现细节，很容易让使用者看出实现原理。这样的头文件，对于一些不想对使用者暴露核心技术实现的库和 sdk，是非常不好的。</p>\n<p>那有没有什么办法既能保持对外的接口不变，又能尽量不暴露一些关键性的成员变量和私有函数的实现方法呢？有的。我们可以将代码稍微修改一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 网络通信的基础类, SocketClient.h</span><br><span class=\"line\"> * zhangyl 2017.07.11</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Impl;</span><br><span class=\"line\"></span><br><span class=\"line\">class CSocketClient</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CSocketClient();</span><br><span class=\"line\">    ~CSocketClient();</span><br><span class=\"line\"> </span><br><span class=\"line\">public:</span><br><span class=\"line\">    void SetProxyWnd(HWND hProxyWnd);</span><br><span class=\"line\"></span><br><span class=\"line\">    bool    Init(CNetProxy* pNetProxy);</span><br><span class=\"line\">    bool    Uninit();</span><br><span class=\"line\"></span><br><span class=\"line\">    int Register(const char* pszUser, const char* pszPassword);    </span><br><span class=\"line\">    void GuestLogin();  </span><br><span class=\"line\">    </span><br><span class=\"line\">    BOOL    IsClosed();</span><br><span class=\"line\">    BOOL\tConnect(int timeout = 3);</span><br><span class=\"line\">    void    AddData(int cmd, const std::string&amp; strBuffer);</span><br><span class=\"line\">    void    AddData(int cmd, const char* pszBuff, int nBuffLen);</span><br><span class=\"line\">    void    Close();</span><br><span class=\"line\"></span><br><span class=\"line\">    BOOL    ConnectServer(int timeout = 3);</span><br><span class=\"line\">    BOOL    SendLoginMsg();</span><br><span class=\"line\">    BOOL    RecvLoginMsg(int&amp; nRet);</span><br><span class=\"line\">    BOOL    Login(int&amp; nRet);</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    Impl*\tm_pImpl;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中，所有的关键性成员变量已经没有了，取而代之的是一个类型为 <strong>Impl</strong> 的指针成员变量 <strong>m_pImpl</strong>。</p>\n<blockquote>\n<p>具体采用什么名称，读者完全可以根据自己的实际情况来定，不一定非要使用这里的 <strong>Impl</strong> 和 <strong>m_pImpl</strong>。</p>\n</blockquote>\n<p><strong>Impl</strong> 类型现在是完全对使用者透明，为了在当前类中可以使用 <strong>Impl</strong>，使用了一个前置声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//原代码第5行</span><br><span class=\"line\">class Impl;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们就可以将刚才隐藏的成员变量放到这个类中去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Impl</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tImpl()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        //TODO: 你可以在这里对成员变量做一些初始化工作</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t~Impl()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        //TODO: 你可以在这里做一些清理工作</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSOCKET                          m_hSocket;</span><br><span class=\"line\">    short                           m_nPort;</span><br><span class=\"line\">    char                            m_szServer[64];</span><br><span class=\"line\">    long                            m_nLastDataTime;        //最近一次收发数据的时间</span><br><span class=\"line\">    long                            m_nHeartbeatInterval;   //心跳包时间间隔，单位秒</span><br><span class=\"line\">    CRITICAL_SECTION                m_csLastDataTime;       //保护m_nLastDataTime的互斥体 </span><br><span class=\"line\">    HANDLE                          m_hSendDataThread;      //发送数据线程</span><br><span class=\"line\">    HANDLE                          m_hRecvDataThread;      //接收数据线程</span><br><span class=\"line\">    std::string                     m_strSendBuf;</span><br><span class=\"line\">    std::string                     m_strRecvBuf;</span><br><span class=\"line\">    HANDLE                          m_hExitEvent;</span><br><span class=\"line\">    bool                            m_bConnected;</span><br><span class=\"line\">    CRITICAL_SECTION                m_csSendBuf;</span><br><span class=\"line\">    HANDLE                          m_hSemaphoreSendBuf;</span><br><span class=\"line\">    HWND                            m_hProxyWnd;</span><br><span class=\"line\">    CNetProxy*                      m_pNetProxy;</span><br><span class=\"line\">    int                             m_nReconnectTimeInterval;    //重连时间间隔</span><br><span class=\"line\">    time_t                          m_nLastReconnectTime;        //上次重连时刻</span><br><span class=\"line\">    CFlowStatistics*                m_pFlowStatistics;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>接着我们在 <strong>CSocketClient</strong> 的构造函数中创建这个 <strong>m_pImpl</strong> 对象，在 <strong>CSocketClient</strong> 析构函数中释放这个对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSocketClient::CSocketClient()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_pImpl = new Impl();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CSocketClient::~CSocketClient()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdelete m_pImpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，原来需要引用的成员变量，可以在 <strong>CSocketClient</strong> 内部使用 <strong>m_pImpl-&gt;变量名</strong> 来引用了。 </p>\n<blockquote>\n<p>这里仅仅以演示隐藏 <strong>CSocketClient</strong> 的成员变量为例，隐藏其私有方法与此类似，都是变成类 <strong>Impl</strong> 的方法。</p>\n</blockquote>\n<p>需要强调的是，在实际开发中，由于 <strong>Impl</strong> 类是 <strong>CSocketClient</strong> 的辅助类， <strong>Impl</strong> 类没有独立存在的必要，所以一般会将 <strong>Impl</strong> 类定义成 <strong>CSocketClient</strong> 的内部类。即采用如下形式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 网络通信的基础类, SocketClient.h</span><br><span class=\"line\"> * zhangyl 2017.07.11</span><br><span class=\"line\"> */</span><br><span class=\"line\">class CSocketClient</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CSocketClient();</span><br><span class=\"line\">    ~CSocketClient();</span><br><span class=\"line\"></span><br><span class=\"line\"> //重复的代码省略...</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">\tclass   Impl;</span><br><span class=\"line\">    Impl*\tm_pImpl;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <strong>ClientSocket.cpp</strong> 中定义 <strong>Impl</strong> 类的实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 网络通信的基础类, SocketClient.cpp</span><br><span class=\"line\"> * zhangyl 2017.07.11</span><br><span class=\"line\"> */</span><br><span class=\"line\">class  CSocketClient::Impl</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void LoadConfig()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t//方法的具体实现</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //其他方法省略...</span><br><span class=\"line\">    </span><br><span class=\"line\">public:</span><br><span class=\"line\">\tSOCKET                          m_hSocket;</span><br><span class=\"line\">    short                           m_nPort;</span><br><span class=\"line\">    char                            m_szServer[64];</span><br><span class=\"line\">    long                            m_nLastDataTime;        //最近一次收发数据的时间</span><br><span class=\"line\">    long                            m_nHeartbeatInterval;   //心跳包时间间隔，单位秒</span><br><span class=\"line\">    CRITICAL_SECTION                m_csLastDataTime;       //保护m_nLastDataTime的互斥体 </span><br><span class=\"line\">    HANDLE                          m_hSendDataThread;      //发送数据线程</span><br><span class=\"line\">    HANDLE                          m_hRecvDataThread;      //接收数据线程</span><br><span class=\"line\">    std::string                     m_strSendBuf;</span><br><span class=\"line\">    std::string                     m_strRecvBuf;</span><br><span class=\"line\">    HANDLE                          m_hExitEvent;</span><br><span class=\"line\">    bool                            m_bConnected;</span><br><span class=\"line\">    CRITICAL_SECTION                m_csSendBuf;</span><br><span class=\"line\">    HANDLE                          m_hSemaphoreSendBuf;</span><br><span class=\"line\">    HWND                            m_hProxyWnd;</span><br><span class=\"line\">    CNetProxy*                      m_pNetProxy;</span><br><span class=\"line\">    int                             m_nReconnectTimeInterval;    //重连时间间隔</span><br><span class=\"line\">    time_t                          m_nLastReconnectTime;        //上次重连时刻</span><br><span class=\"line\">    CFlowStatistics*                m_pFlowStatistics;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">CSocketClient::CSocketClient()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tm_pImpl = new Impl();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">CSocketClient::~CSocketClient()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tdelete m_pImpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在<strong>CSocketClient</strong> 这个类除了保留对外的接口以外，其内部实现用到的变量和方法基本上对使用者不可见了。C++ 中对类的这种封装方式，我们称之为 <strong>pimpl</strong> 惯用法，即 <strong>Pointer to Implementation</strong> （也有人认为是 <strong>Private Implementation</strong>）。</p>\n<blockquote>\n<p>在实际的开发中，<strong>Impl</strong> 类的声明和定义既可以使用 <strong>class</strong> 关键字也可以使用 <strong>struct</strong> 关键字。在 C++ 语言中，struct 类型可以定义成员方法，但 struct 所有成员变量和方法默认都是 public 的。</p>\n</blockquote>\n<p>现在来总结一下这个方法的优点：</p>\n<ul>\n<li><p>核心数据成员被隐藏；</p>\n<p>  核心数据成员被隐藏，不必暴露在头文件中，对使用者透明，提高了安全性。</p>\n</li>\n<li><p>降低编译依赖，提高编译速度；</p>\n<p>  由于原来的头文件的一些私有成员变量可能是非指针非引用类型的自定义类型，需要在当前类的头文件中包含这些类型的头文件，使用了 <strong>pimpl</strong> 惯用法以后，这些私有成员变量被移动到当前类的 cpp 文件中，因此头文件不再需要包含这些成员变量的类型头文件，当前头文件变“干净”，这样其他文件在引用这个头文件时，依赖的类型变少，加快了编译速度。</p>\n</li>\n<li><p>接口与实现分离。</p>\n<p>  使用了 <strong>pimpl</strong> 惯用法之后，即使 <strong>CSocketClient</strong> 或者 <strong>Impl</strong> 类的实现细节发生了变化，对使用者都是透明的，对外的 <strong>CSocketClient</strong> 类声明仍然可以保持不变。例如我们可以增删改 Impl 的成员变量和成员方法而保持 <strong>SocketClient.h</strong> 文件内容不变；如果不使用 <strong>pimpl</strong> 惯用法，我们做不到不改变 <strong>SocketClient.h</strong> 文件而增删改 <strong>CSocketClient</strong> 类的成员。</p>\n</li>\n</ul>\n<p><strong>智能指针用于 pimpl 惯用法</strong></p>\n<p>C++ 11 标准引入了智能指针对象，我们可以使用 <strong>std::unique_ptr</strong> 对象来管理上述用于隐藏具体实现的 <strong>m_pImpl</strong> 指针。</p>\n<p><strong>SocketClient.h</strong> 文件可以修改成如下方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;memory&gt; //for std::unique_ptr  </span><br><span class=\"line\"></span><br><span class=\"line\">class CSocketClient</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    CSocketClient();</span><br><span class=\"line\">    ~CSocketClient();</span><br><span class=\"line\"></span><br><span class=\"line\">    //重复的代码省略...</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    struct                  Impl;</span><br><span class=\"line\">    std::unique_ptr&lt;Impl&gt;   m_pImpl;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>SocketClient.cpp</strong> 中修改 <strong>CSocketClient</strong> 对象的构造函数和析构函数的实现如下：</p>\n<p><strong>构造函数</strong></p>\n<p>如果你的编译器仅支持 C++ 11 标准，我们可以按如下修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSocketClient::CSocketClient()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //C++11 标准并未提供 std::make_unique()，该方法是 C++14 提供的</span><br><span class=\"line\">    m_pImpl.reset(new Impl());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你的编译器支持 C++14 及以上标准，可以这么修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSocketClient::CSocketClient() : m_pImpl(std::make_unique&lt;Impl&gt;())</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于已经使用了智能指针来管理 m_pImpl 指向的堆内存，因此析构函数中不再需要显式释放堆内存：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSocketClient::~CSocketClient()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //不再需要显式 delete 了 </span><br><span class=\"line\">    //delete m_pImpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>pimp</strong> 惯用法是 C&#x2F;C++ 项目开发中一种非常实用的代码编写策略，建议读者掌握它。</p>\n","text":"pimpl 惯用法现在这里有一个名为 CSocketClient 的网络通信类，定义如下： 1234567891011121314151617181920212...","permalink":"/post/转载/cpp/C++必须掌握的pimpl惯用法","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pimpl-%E6%83%AF%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">pimpl 惯用法</span></a></li></ol>","author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"【转载】C++17结构化绑定","uid":"7e72488827dc1c1de5e7eda02fcbe24e","slug":"转载/cpp/C++17结构化绑定","date":"2021-05-06T09:27:48.000Z","updated":"2023-05-19T05:34:21.026Z","comments":true,"path":"api/articles/转载/cpp/C++17结构化绑定.json","keywords":null,"cover":null,"text":"C++ 17 结构化绑定stl 的 map 容器很多读者应该都很熟悉，map 容器提供了一个 insert 方法，我们用该方法向 map 中插入元素，但是应该很...","permalink":"/post/转载/cpp/C++17结构化绑定","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"【转载】不定参数函数实现var_arg系列的宏","uid":"40a7e4f59089c11e355c8f7228d5379e","slug":"转载/cpp/不定参数函数实现var_arg系列的宏","date":"2021-05-06T09:27:48.000Z","updated":"2024-11-11T08:31:27.041Z","comments":true,"path":"api/articles/转载/cpp/不定参数函数实现var_arg系列的宏.json","keywords":null,"cover":[],"text":"不定参数函数实现var_arg系列的宏电驴的源码日志模块有一个叫 DebugLogError 函数，其签名如下： 12//代码位于easyMule-master...","permalink":"/post/转载/cpp/不定参数函数实现var_arg系列的宏","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"转载","slug":"转载","count":50,"path":"api/categories/转载.json"}],"tags":[{"name":"c++","slug":"c","count":35,"path":"api/tags/c.json"},{"name":"学习资料","slug":"学习资料","count":26,"path":"api/tags/学习资料.json"}],"author":{"name":"阿木大叔","slug":"blog-author","avatar":"/images/base/logo.png","link":"/","description":"坚持code，努力吹牛 <br /> @ <b>gitee：阿木大叔</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}